/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.latestheadlines.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestByParseDate;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestClusteringEnabled;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestClusteringThreshold;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestIsHeadline;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestIsOpinion;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestIsPaidContent;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestPage;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestPageSize;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestRankedOnly;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestWordCountMax;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesRequestWordCountMin;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LatestHeadlinesRequest.Builder.class)
public final class LatestHeadlinesRequest {
    private final Optional<String> when;

    private final Optional<LatestHeadlinesRequestByParseDate> byParseDate;

    private final Optional<String> sortBy;

    private final Optional<Object> lang;

    private final Optional<Object> notLang;

    private final Optional<Object> countries;

    private final Optional<Object> notCountries;

    private final Optional<Object> sources;

    private final Optional<Object> predefinedSources;

    private final Optional<Object> notSources;

    private final Optional<Object> notAuthorName;

    private final Optional<LatestHeadlinesRequestRankedOnly> rankedOnly;

    private final Optional<LatestHeadlinesRequestIsHeadline> isHeadline;

    private final Optional<LatestHeadlinesRequestIsOpinion> isOpinion;

    private final Optional<LatestHeadlinesRequestIsPaidContent> isPaidContent;

    private final Optional<Object> parentUrl;

    private final Optional<Object> allLinks;

    private final Optional<Object> allDomainLinks;

    private final Optional<LatestHeadlinesRequestWordCountMin> wordCountMin;

    private final Optional<LatestHeadlinesRequestWordCountMax> wordCountMax;

    private final Optional<LatestHeadlinesRequestPage> page;

    private final Optional<LatestHeadlinesRequestPageSize> pageSize;

    private final Optional<String> clusteringVariable;

    private final Optional<LatestHeadlinesRequestClusteringEnabled> clusteringEnabled;

    private final Optional<LatestHeadlinesRequestClusteringThreshold> clusteringThreshold;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<String> theme;

    private final Optional<String> notTheme;

    private final Optional<String> orgEntityName;

    private final Optional<String> perEntityName;

    private final Optional<String> locEntityName;

    private final Optional<String> miscEntityName;

    private final Optional<Double> titleSentimentMin;

    private final Optional<Double> titleSentimentMax;

    private final Optional<Double> contentSentimentMin;

    private final Optional<Double> contentSentimentMax;

    private final Optional<Object> iptcTags;

    private final Optional<Object> notIptcTags;

    private final Optional<Object> iabTags;

    private final Optional<Object> notIabTags;

    private final Map<String, Object> additionalProperties;

    private LatestHeadlinesRequest(
            Optional<String> when,
            Optional<LatestHeadlinesRequestByParseDate> byParseDate,
            Optional<String> sortBy,
            Optional<Object> lang,
            Optional<Object> notLang,
            Optional<Object> countries,
            Optional<Object> notCountries,
            Optional<Object> sources,
            Optional<Object> predefinedSources,
            Optional<Object> notSources,
            Optional<Object> notAuthorName,
            Optional<LatestHeadlinesRequestRankedOnly> rankedOnly,
            Optional<LatestHeadlinesRequestIsHeadline> isHeadline,
            Optional<LatestHeadlinesRequestIsOpinion> isOpinion,
            Optional<LatestHeadlinesRequestIsPaidContent> isPaidContent,
            Optional<Object> parentUrl,
            Optional<Object> allLinks,
            Optional<Object> allDomainLinks,
            Optional<LatestHeadlinesRequestWordCountMin> wordCountMin,
            Optional<LatestHeadlinesRequestWordCountMax> wordCountMax,
            Optional<LatestHeadlinesRequestPage> page,
            Optional<LatestHeadlinesRequestPageSize> pageSize,
            Optional<String> clusteringVariable,
            Optional<LatestHeadlinesRequestClusteringEnabled> clusteringEnabled,
            Optional<LatestHeadlinesRequestClusteringThreshold> clusteringThreshold,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<String> theme,
            Optional<String> notTheme,
            Optional<String> orgEntityName,
            Optional<String> perEntityName,
            Optional<String> locEntityName,
            Optional<String> miscEntityName,
            Optional<Double> titleSentimentMin,
            Optional<Double> titleSentimentMax,
            Optional<Double> contentSentimentMin,
            Optional<Double> contentSentimentMax,
            Optional<Object> iptcTags,
            Optional<Object> notIptcTags,
            Optional<Object> iabTags,
            Optional<Object> notIabTags,
            Map<String, Object> additionalProperties) {
        this.when = when;
        this.byParseDate = byParseDate;
        this.sortBy = sortBy;
        this.lang = lang;
        this.notLang = notLang;
        this.countries = countries;
        this.notCountries = notCountries;
        this.sources = sources;
        this.predefinedSources = predefinedSources;
        this.notSources = notSources;
        this.notAuthorName = notAuthorName;
        this.rankedOnly = rankedOnly;
        this.isHeadline = isHeadline;
        this.isOpinion = isOpinion;
        this.isPaidContent = isPaidContent;
        this.parentUrl = parentUrl;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.wordCountMin = wordCountMin;
        this.wordCountMax = wordCountMax;
        this.page = page;
        this.pageSize = pageSize;
        this.clusteringVariable = clusteringVariable;
        this.clusteringEnabled = clusteringEnabled;
        this.clusteringThreshold = clusteringThreshold;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.orgEntityName = orgEntityName;
        this.perEntityName = perEntityName;
        this.locEntityName = locEntityName;
        this.miscEntityName = miscEntityName;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.iptcTags = iptcTags;
        this.notIptcTags = notIptcTags;
        this.iabTags = iabTags;
        this.notIabTags = notIabTags;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("when")
    public Optional<String> getWhen() {
        return when;
    }

    @JsonProperty("by_parse_date")
    public Optional<LatestHeadlinesRequestByParseDate> getByParseDate() {
        return byParseDate;
    }

    @JsonProperty("sort_by")
    public Optional<String> getSortBy() {
        return sortBy;
    }

    @JsonProperty("lang")
    public Optional<Object> getLang() {
        return lang;
    }

    @JsonProperty("not_lang")
    public Optional<Object> getNotLang() {
        return notLang;
    }

    @JsonProperty("countries")
    public Optional<Object> getCountries() {
        return countries;
    }

    @JsonProperty("not_countries")
    public Optional<Object> getNotCountries() {
        return notCountries;
    }

    @JsonProperty("sources")
    public Optional<Object> getSources() {
        return sources;
    }

    @JsonProperty("predefined_sources")
    public Optional<Object> getPredefinedSources() {
        return predefinedSources;
    }

    @JsonProperty("not_sources")
    public Optional<Object> getNotSources() {
        return notSources;
    }

    @JsonProperty("not_author_name")
    public Optional<Object> getNotAuthorName() {
        return notAuthorName;
    }

    @JsonProperty("ranked_only")
    public Optional<LatestHeadlinesRequestRankedOnly> getRankedOnly() {
        return rankedOnly;
    }

    @JsonProperty("is_headline")
    public Optional<LatestHeadlinesRequestIsHeadline> getIsHeadline() {
        return isHeadline;
    }

    @JsonProperty("is_opinion")
    public Optional<LatestHeadlinesRequestIsOpinion> getIsOpinion() {
        return isOpinion;
    }

    @JsonProperty("is_paid_content")
    public Optional<LatestHeadlinesRequestIsPaidContent> getIsPaidContent() {
        return isPaidContent;
    }

    @JsonProperty("parent_url")
    public Optional<Object> getParentUrl() {
        return parentUrl;
    }

    @JsonProperty("all_links")
    public Optional<Object> getAllLinks() {
        return allLinks;
    }

    @JsonProperty("all_domain_links")
    public Optional<Object> getAllDomainLinks() {
        return allDomainLinks;
    }

    @JsonProperty("word_count_min")
    public Optional<LatestHeadlinesRequestWordCountMin> getWordCountMin() {
        return wordCountMin;
    }

    @JsonProperty("word_count_max")
    public Optional<LatestHeadlinesRequestWordCountMax> getWordCountMax() {
        return wordCountMax;
    }

    @JsonProperty("page")
    public Optional<LatestHeadlinesRequestPage> getPage() {
        return page;
    }

    @JsonProperty("page_size")
    public Optional<LatestHeadlinesRequestPageSize> getPageSize() {
        return pageSize;
    }

    @JsonProperty("clustering_variable")
    public Optional<String> getClusteringVariable() {
        return clusteringVariable;
    }

    @JsonProperty("clustering_enabled")
    public Optional<LatestHeadlinesRequestClusteringEnabled> getClusteringEnabled() {
        return clusteringEnabled;
    }

    @JsonProperty("clustering_threshold")
    public Optional<LatestHeadlinesRequestClusteringThreshold> getClusteringThreshold() {
        return clusteringThreshold;
    }

    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    @JsonProperty("theme")
    public Optional<String> getTheme() {
        return theme;
    }

    @JsonProperty("not_theme")
    public Optional<String> getNotTheme() {
        return notTheme;
    }

    @JsonProperty("ORG_entity_name")
    public Optional<String> getOrgEntityName() {
        return orgEntityName;
    }

    @JsonProperty("PER_entity_name")
    public Optional<String> getPerEntityName() {
        return perEntityName;
    }

    @JsonProperty("LOC_entity_name")
    public Optional<String> getLocEntityName() {
        return locEntityName;
    }

    @JsonProperty("MISC_entity_name")
    public Optional<String> getMiscEntityName() {
        return miscEntityName;
    }

    @JsonProperty("title_sentiment_min")
    public Optional<Double> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    @JsonProperty("title_sentiment_max")
    public Optional<Double> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    @JsonProperty("content_sentiment_min")
    public Optional<Double> getContentSentimentMin() {
        return contentSentimentMin;
    }

    @JsonProperty("content_sentiment_max")
    public Optional<Double> getContentSentimentMax() {
        return contentSentimentMax;
    }

    @JsonProperty("iptc_tags")
    public Optional<Object> getIptcTags() {
        return iptcTags;
    }

    @JsonProperty("not_iptc_tags")
    public Optional<Object> getNotIptcTags() {
        return notIptcTags;
    }

    @JsonProperty("iab_tags")
    public Optional<Object> getIabTags() {
        return iabTags;
    }

    @JsonProperty("not_iab_tags")
    public Optional<Object> getNotIabTags() {
        return notIabTags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LatestHeadlinesRequest && equalTo((LatestHeadlinesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LatestHeadlinesRequest other) {
        return when.equals(other.when)
                && byParseDate.equals(other.byParseDate)
                && sortBy.equals(other.sortBy)
                && lang.equals(other.lang)
                && notLang.equals(other.notLang)
                && countries.equals(other.countries)
                && notCountries.equals(other.notCountries)
                && sources.equals(other.sources)
                && predefinedSources.equals(other.predefinedSources)
                && notSources.equals(other.notSources)
                && notAuthorName.equals(other.notAuthorName)
                && rankedOnly.equals(other.rankedOnly)
                && isHeadline.equals(other.isHeadline)
                && isOpinion.equals(other.isOpinion)
                && isPaidContent.equals(other.isPaidContent)
                && parentUrl.equals(other.parentUrl)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && wordCountMin.equals(other.wordCountMin)
                && wordCountMax.equals(other.wordCountMax)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && clusteringVariable.equals(other.clusteringVariable)
                && clusteringEnabled.equals(other.clusteringEnabled)
                && clusteringThreshold.equals(other.clusteringThreshold)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && orgEntityName.equals(other.orgEntityName)
                && perEntityName.equals(other.perEntityName)
                && locEntityName.equals(other.locEntityName)
                && miscEntityName.equals(other.miscEntityName)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && iptcTags.equals(other.iptcTags)
                && notIptcTags.equals(other.notIptcTags)
                && iabTags.equals(other.iabTags)
                && notIabTags.equals(other.notIabTags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.when,
                this.byParseDate,
                this.sortBy,
                this.lang,
                this.notLang,
                this.countries,
                this.notCountries,
                this.sources,
                this.predefinedSources,
                this.notSources,
                this.notAuthorName,
                this.rankedOnly,
                this.isHeadline,
                this.isOpinion,
                this.isPaidContent,
                this.parentUrl,
                this.allLinks,
                this.allDomainLinks,
                this.wordCountMin,
                this.wordCountMax,
                this.page,
                this.pageSize,
                this.clusteringVariable,
                this.clusteringEnabled,
                this.clusteringThreshold,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.orgEntityName,
                this.perEntityName,
                this.locEntityName,
                this.miscEntityName,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.iptcTags,
                this.notIptcTags,
                this.iabTags,
                this.notIabTags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> when = Optional.empty();

        private Optional<LatestHeadlinesRequestByParseDate> byParseDate = Optional.empty();

        private Optional<String> sortBy = Optional.empty();

        private Optional<Object> lang = Optional.empty();

        private Optional<Object> notLang = Optional.empty();

        private Optional<Object> countries = Optional.empty();

        private Optional<Object> notCountries = Optional.empty();

        private Optional<Object> sources = Optional.empty();

        private Optional<Object> predefinedSources = Optional.empty();

        private Optional<Object> notSources = Optional.empty();

        private Optional<Object> notAuthorName = Optional.empty();

        private Optional<LatestHeadlinesRequestRankedOnly> rankedOnly = Optional.empty();

        private Optional<LatestHeadlinesRequestIsHeadline> isHeadline = Optional.empty();

        private Optional<LatestHeadlinesRequestIsOpinion> isOpinion = Optional.empty();

        private Optional<LatestHeadlinesRequestIsPaidContent> isPaidContent = Optional.empty();

        private Optional<Object> parentUrl = Optional.empty();

        private Optional<Object> allLinks = Optional.empty();

        private Optional<Object> allDomainLinks = Optional.empty();

        private Optional<LatestHeadlinesRequestWordCountMin> wordCountMin = Optional.empty();

        private Optional<LatestHeadlinesRequestWordCountMax> wordCountMax = Optional.empty();

        private Optional<LatestHeadlinesRequestPage> page = Optional.empty();

        private Optional<LatestHeadlinesRequestPageSize> pageSize = Optional.empty();

        private Optional<String> clusteringVariable = Optional.empty();

        private Optional<LatestHeadlinesRequestClusteringEnabled> clusteringEnabled = Optional.empty();

        private Optional<LatestHeadlinesRequestClusteringThreshold> clusteringThreshold = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<String> theme = Optional.empty();

        private Optional<String> notTheme = Optional.empty();

        private Optional<String> orgEntityName = Optional.empty();

        private Optional<String> perEntityName = Optional.empty();

        private Optional<String> locEntityName = Optional.empty();

        private Optional<String> miscEntityName = Optional.empty();

        private Optional<Double> titleSentimentMin = Optional.empty();

        private Optional<Double> titleSentimentMax = Optional.empty();

        private Optional<Double> contentSentimentMin = Optional.empty();

        private Optional<Double> contentSentimentMax = Optional.empty();

        private Optional<Object> iptcTags = Optional.empty();

        private Optional<Object> notIptcTags = Optional.empty();

        private Optional<Object> iabTags = Optional.empty();

        private Optional<Object> notIabTags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LatestHeadlinesRequest other) {
            when(other.getWhen());
            byParseDate(other.getByParseDate());
            sortBy(other.getSortBy());
            lang(other.getLang());
            notLang(other.getNotLang());
            countries(other.getCountries());
            notCountries(other.getNotCountries());
            sources(other.getSources());
            predefinedSources(other.getPredefinedSources());
            notSources(other.getNotSources());
            notAuthorName(other.getNotAuthorName());
            rankedOnly(other.getRankedOnly());
            isHeadline(other.getIsHeadline());
            isOpinion(other.getIsOpinion());
            isPaidContent(other.getIsPaidContent());
            parentUrl(other.getParentUrl());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            wordCountMin(other.getWordCountMin());
            wordCountMax(other.getWordCountMax());
            page(other.getPage());
            pageSize(other.getPageSize());
            clusteringVariable(other.getClusteringVariable());
            clusteringEnabled(other.getClusteringEnabled());
            clusteringThreshold(other.getClusteringThreshold());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            orgEntityName(other.getOrgEntityName());
            perEntityName(other.getPerEntityName());
            locEntityName(other.getLocEntityName());
            miscEntityName(other.getMiscEntityName());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            iptcTags(other.getIptcTags());
            notIptcTags(other.getNotIptcTags());
            iabTags(other.getIabTags());
            notIabTags(other.getNotIabTags());
            return this;
        }

        @JsonSetter(value = "when", nulls = Nulls.SKIP)
        public Builder when(Optional<String> when) {
            this.when = when;
            return this;
        }

        public Builder when(String when) {
            this.when = Optional.ofNullable(when);
            return this;
        }

        @JsonSetter(value = "by_parse_date", nulls = Nulls.SKIP)
        public Builder byParseDate(Optional<LatestHeadlinesRequestByParseDate> byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }

        public Builder byParseDate(LatestHeadlinesRequestByParseDate byParseDate) {
            this.byParseDate = Optional.ofNullable(byParseDate);
            return this;
        }

        @JsonSetter(value = "sort_by", nulls = Nulls.SKIP)
        public Builder sortBy(Optional<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(String sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        @JsonSetter(value = "lang", nulls = Nulls.SKIP)
        public Builder lang(Optional<Object> lang) {
            this.lang = lang;
            return this;
        }

        public Builder lang(Object lang) {
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        @JsonSetter(value = "not_lang", nulls = Nulls.SKIP)
        public Builder notLang(Optional<Object> notLang) {
            this.notLang = notLang;
            return this;
        }

        public Builder notLang(Object notLang) {
            this.notLang = Optional.ofNullable(notLang);
            return this;
        }

        @JsonSetter(value = "countries", nulls = Nulls.SKIP)
        public Builder countries(Optional<Object> countries) {
            this.countries = countries;
            return this;
        }

        public Builder countries(Object countries) {
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        @JsonSetter(value = "not_countries", nulls = Nulls.SKIP)
        public Builder notCountries(Optional<Object> notCountries) {
            this.notCountries = notCountries;
            return this;
        }

        public Builder notCountries(Object notCountries) {
            this.notCountries = Optional.ofNullable(notCountries);
            return this;
        }

        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public Builder sources(Optional<Object> sources) {
            this.sources = sources;
            return this;
        }

        public Builder sources(Object sources) {
            this.sources = Optional.ofNullable(sources);
            return this;
        }

        @JsonSetter(value = "predefined_sources", nulls = Nulls.SKIP)
        public Builder predefinedSources(Optional<Object> predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }

        public Builder predefinedSources(Object predefinedSources) {
            this.predefinedSources = Optional.ofNullable(predefinedSources);
            return this;
        }

        @JsonSetter(value = "not_sources", nulls = Nulls.SKIP)
        public Builder notSources(Optional<Object> notSources) {
            this.notSources = notSources;
            return this;
        }

        public Builder notSources(Object notSources) {
            this.notSources = Optional.ofNullable(notSources);
            return this;
        }

        @JsonSetter(value = "not_author_name", nulls = Nulls.SKIP)
        public Builder notAuthorName(Optional<Object> notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        public Builder notAuthorName(Object notAuthorName) {
            this.notAuthorName = Optional.ofNullable(notAuthorName);
            return this;
        }

        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public Builder rankedOnly(Optional<LatestHeadlinesRequestRankedOnly> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        public Builder rankedOnly(LatestHeadlinesRequestRankedOnly rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public Builder isHeadline(Optional<LatestHeadlinesRequestIsHeadline> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        public Builder isHeadline(LatestHeadlinesRequestIsHeadline isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public Builder isOpinion(Optional<LatestHeadlinesRequestIsOpinion> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        public Builder isOpinion(LatestHeadlinesRequestIsOpinion isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        @JsonSetter(value = "is_paid_content", nulls = Nulls.SKIP)
        public Builder isPaidContent(Optional<LatestHeadlinesRequestIsPaidContent> isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }

        public Builder isPaidContent(LatestHeadlinesRequestIsPaidContent isPaidContent) {
            this.isPaidContent = Optional.ofNullable(isPaidContent);
            return this;
        }

        @JsonSetter(value = "parent_url", nulls = Nulls.SKIP)
        public Builder parentUrl(Optional<Object> parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }

        public Builder parentUrl(Object parentUrl) {
            this.parentUrl = Optional.ofNullable(parentUrl);
            return this;
        }

        @JsonSetter(value = "all_links", nulls = Nulls.SKIP)
        public Builder allLinks(Optional<Object> allLinks) {
            this.allLinks = allLinks;
            return this;
        }

        public Builder allLinks(Object allLinks) {
            this.allLinks = Optional.ofNullable(allLinks);
            return this;
        }

        @JsonSetter(value = "all_domain_links", nulls = Nulls.SKIP)
        public Builder allDomainLinks(Optional<Object> allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }

        public Builder allDomainLinks(Object allDomainLinks) {
            this.allDomainLinks = Optional.ofNullable(allDomainLinks);
            return this;
        }

        @JsonSetter(value = "word_count_min", nulls = Nulls.SKIP)
        public Builder wordCountMin(Optional<LatestHeadlinesRequestWordCountMin> wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }

        public Builder wordCountMin(LatestHeadlinesRequestWordCountMin wordCountMin) {
            this.wordCountMin = Optional.ofNullable(wordCountMin);
            return this;
        }

        @JsonSetter(value = "word_count_max", nulls = Nulls.SKIP)
        public Builder wordCountMax(Optional<LatestHeadlinesRequestWordCountMax> wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }

        public Builder wordCountMax(LatestHeadlinesRequestWordCountMax wordCountMax) {
            this.wordCountMax = Optional.ofNullable(wordCountMax);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<LatestHeadlinesRequestPage> page) {
            this.page = page;
            return this;
        }

        public Builder page(LatestHeadlinesRequestPage page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<LatestHeadlinesRequestPageSize> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(LatestHeadlinesRequestPageSize pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "clustering_variable", nulls = Nulls.SKIP)
        public Builder clusteringVariable(Optional<String> clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }

        public Builder clusteringVariable(String clusteringVariable) {
            this.clusteringVariable = Optional.ofNullable(clusteringVariable);
            return this;
        }

        @JsonSetter(value = "clustering_enabled", nulls = Nulls.SKIP)
        public Builder clusteringEnabled(Optional<LatestHeadlinesRequestClusteringEnabled> clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }

        public Builder clusteringEnabled(LatestHeadlinesRequestClusteringEnabled clusteringEnabled) {
            this.clusteringEnabled = Optional.ofNullable(clusteringEnabled);
            return this;
        }

        @JsonSetter(value = "clustering_threshold", nulls = Nulls.SKIP)
        public Builder clusteringThreshold(Optional<LatestHeadlinesRequestClusteringThreshold> clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }

        public Builder clusteringThreshold(LatestHeadlinesRequestClusteringThreshold clusteringThreshold) {
            this.clusteringThreshold = Optional.ofNullable(clusteringThreshold);
            return this;
        }

        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public Builder includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        public Builder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public Builder hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        public Builder hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public Builder theme(Optional<String> theme) {
            this.theme = theme;
            return this;
        }

        public Builder theme(String theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public Builder notTheme(Optional<String> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        public Builder notTheme(String notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        @JsonSetter(value = "ORG_entity_name", nulls = Nulls.SKIP)
        public Builder orgEntityName(Optional<String> orgEntityName) {
            this.orgEntityName = orgEntityName;
            return this;
        }

        public Builder orgEntityName(String orgEntityName) {
            this.orgEntityName = Optional.ofNullable(orgEntityName);
            return this;
        }

        @JsonSetter(value = "PER_entity_name", nulls = Nulls.SKIP)
        public Builder perEntityName(Optional<String> perEntityName) {
            this.perEntityName = perEntityName;
            return this;
        }

        public Builder perEntityName(String perEntityName) {
            this.perEntityName = Optional.ofNullable(perEntityName);
            return this;
        }

        @JsonSetter(value = "LOC_entity_name", nulls = Nulls.SKIP)
        public Builder locEntityName(Optional<String> locEntityName) {
            this.locEntityName = locEntityName;
            return this;
        }

        public Builder locEntityName(String locEntityName) {
            this.locEntityName = Optional.ofNullable(locEntityName);
            return this;
        }

        @JsonSetter(value = "MISC_entity_name", nulls = Nulls.SKIP)
        public Builder miscEntityName(Optional<String> miscEntityName) {
            this.miscEntityName = miscEntityName;
            return this;
        }

        public Builder miscEntityName(String miscEntityName) {
            this.miscEntityName = Optional.ofNullable(miscEntityName);
            return this;
        }

        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public Builder titleSentimentMin(Optional<Double> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        public Builder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public Builder titleSentimentMax(Optional<Double> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        public Builder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public Builder contentSentimentMin(Optional<Double> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        public Builder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public Builder contentSentimentMax(Optional<Double> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        public Builder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        @JsonSetter(value = "iptc_tags", nulls = Nulls.SKIP)
        public Builder iptcTags(Optional<Object> iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }

        public Builder iptcTags(Object iptcTags) {
            this.iptcTags = Optional.ofNullable(iptcTags);
            return this;
        }

        @JsonSetter(value = "not_iptc_tags", nulls = Nulls.SKIP)
        public Builder notIptcTags(Optional<Object> notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }

        public Builder notIptcTags(Object notIptcTags) {
            this.notIptcTags = Optional.ofNullable(notIptcTags);
            return this;
        }

        @JsonSetter(value = "iab_tags", nulls = Nulls.SKIP)
        public Builder iabTags(Optional<Object> iabTags) {
            this.iabTags = iabTags;
            return this;
        }

        public Builder iabTags(Object iabTags) {
            this.iabTags = Optional.ofNullable(iabTags);
            return this;
        }

        @JsonSetter(value = "not_iab_tags", nulls = Nulls.SKIP)
        public Builder notIabTags(Optional<Object> notIabTags) {
            this.notIabTags = notIabTags;
            return this;
        }

        public Builder notIabTags(Object notIabTags) {
            this.notIabTags = Optional.ofNullable(notIabTags);
            return this;
        }

        public LatestHeadlinesRequest build() {
            return new LatestHeadlinesRequest(
                    when,
                    byParseDate,
                    sortBy,
                    lang,
                    notLang,
                    countries,
                    notCountries,
                    sources,
                    predefinedSources,
                    notSources,
                    notAuthorName,
                    rankedOnly,
                    isHeadline,
                    isOpinion,
                    isPaidContent,
                    parentUrl,
                    allLinks,
                    allDomainLinks,
                    wordCountMin,
                    wordCountMax,
                    page,
                    pageSize,
                    clusteringVariable,
                    clusteringEnabled,
                    clusteringThreshold,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    orgEntityName,
                    perEntityName,
                    locEntityName,
                    miscEntityName,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    iptcTags,
                    notIptcTags,
                    iabTags,
                    notIabTags,
                    additionalProperties);
        }
    }
}
