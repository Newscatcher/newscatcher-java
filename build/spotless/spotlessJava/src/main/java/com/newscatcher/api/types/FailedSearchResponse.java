/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FailedSearchResponse.Builder.class)
public final class FailedSearchResponse {
    private final Optional<String> status;

    private final Optional<Integer> totalHits;

    private final Optional<Integer> page;

    private final Optional<Integer> totalPages;

    private final Optional<Integer> pageSize;

    private final Optional<List<ArticleResult>> articles;

    private final Map<String, Object> userInput;

    private final Map<String, Object> additionalProperties;

    private FailedSearchResponse(
            Optional<String> status,
            Optional<Integer> totalHits,
            Optional<Integer> page,
            Optional<Integer> totalPages,
            Optional<Integer> pageSize,
            Optional<List<ArticleResult>> articles,
            Map<String, Object> userInput,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.totalHits = totalHits;
        this.page = page;
        this.totalPages = totalPages;
        this.pageSize = pageSize;
        this.articles = articles;
        this.userInput = userInput;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    @JsonProperty("total_hits")
    public Optional<Integer> getTotalHits() {
        return totalHits;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("total_pages")
    public Optional<Integer> getTotalPages() {
        return totalPages;
    }

    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("articles")
    public Optional<List<ArticleResult>> getArticles() {
        return articles;
    }

    @JsonProperty("user_input")
    public Map<String, Object> getUserInput() {
        return userInput;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FailedSearchResponse && equalTo((FailedSearchResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FailedSearchResponse other) {
        return status.equals(other.status)
                && totalHits.equals(other.totalHits)
                && page.equals(other.page)
                && totalPages.equals(other.totalPages)
                && pageSize.equals(other.pageSize)
                && articles.equals(other.articles)
                && userInput.equals(other.userInput);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status, this.totalHits, this.page, this.totalPages, this.pageSize, this.articles, this.userInput);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> status = Optional.empty();

        private Optional<Integer> totalHits = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> totalPages = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<List<ArticleResult>> articles = Optional.empty();

        private Map<String, Object> userInput = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FailedSearchResponse other) {
            status(other.getStatus());
            totalHits(other.getTotalHits());
            page(other.getPage());
            totalPages(other.getTotalPages());
            pageSize(other.getPageSize());
            articles(other.getArticles());
            userInput(other.getUserInput());
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "total_hits", nulls = Nulls.SKIP)
        public Builder totalHits(Optional<Integer> totalHits) {
            this.totalHits = totalHits;
            return this;
        }

        public Builder totalHits(Integer totalHits) {
            this.totalHits = Optional.ofNullable(totalHits);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "total_pages", nulls = Nulls.SKIP)
        public Builder totalPages(Optional<Integer> totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        public Builder totalPages(Integer totalPages) {
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "articles", nulls = Nulls.SKIP)
        public Builder articles(Optional<List<ArticleResult>> articles) {
            this.articles = articles;
            return this;
        }

        public Builder articles(List<ArticleResult> articles) {
            this.articles = Optional.ofNullable(articles);
            return this;
        }

        @JsonSetter(value = "user_input", nulls = Nulls.SKIP)
        public Builder userInput(Map<String, Object> userInput) {
            this.userInput.clear();
            this.userInput.putAll(userInput);
            return this;
        }

        public Builder putAllUserInput(Map<String, Object> userInput) {
            this.userInput.putAll(userInput);
            return this;
        }

        public Builder userInput(String key, Object value) {
            this.userInput.put(key, value);
            return this;
        }

        public FailedSearchResponse build() {
            return new FailedSearchResponse(
                    status, totalHits, page, totalPages, pageSize, articles, userInput, additionalProperties);
        }
    }
}
