/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BreakingNewsEventEntity.Builder.class)
public final class BreakingNewsEventEntity {
    private final String eventId;

    private final int articlesCount;

    private final List<BreakingNewsArticleEntity> articles;

    private final Map<String, Object> additionalProperties;

    private BreakingNewsEventEntity(
            String eventId,
            int articlesCount,
            List<BreakingNewsArticleEntity> articles,
            Map<String, Object> additionalProperties) {
        this.eventId = eventId;
        this.articlesCount = articlesCount;
        this.articles = articles;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the breaking news event/cluster.
     */
    @JsonProperty("event_id")
    public String getEventId() {
        return eventId;
    }

    /**
     * @return Number of articles in this breaking news cluster.
     */
    @JsonProperty("articles_count")
    public int getArticlesCount() {
        return articlesCount;
    }

    /**
     * @return The articles associated with this breaking news event.
     */
    @JsonProperty("articles")
    public List<BreakingNewsArticleEntity> getArticles() {
        return articles;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BreakingNewsEventEntity && equalTo((BreakingNewsEventEntity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BreakingNewsEventEntity other) {
        return eventId.equals(other.eventId) && articlesCount == other.articlesCount && articles.equals(other.articles);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventId, this.articlesCount, this.articles);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventIdStage builder() {
        return new Builder();
    }

    public interface EventIdStage {
        /**
         * <p>Unique identifier for the breaking news event/cluster.</p>
         */
        ArticlesCountStage eventId(@NotNull String eventId);

        Builder from(BreakingNewsEventEntity other);
    }

    public interface ArticlesCountStage {
        /**
         * <p>Number of articles in this breaking news cluster.</p>
         */
        _FinalStage articlesCount(int articlesCount);
    }

    public interface _FinalStage {
        BreakingNewsEventEntity build();

        /**
         * <p>The articles associated with this breaking news event.</p>
         */
        _FinalStage articles(List<BreakingNewsArticleEntity> articles);

        _FinalStage addArticles(BreakingNewsArticleEntity articles);

        _FinalStage addAllArticles(List<BreakingNewsArticleEntity> articles);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventIdStage, ArticlesCountStage, _FinalStage {
        private String eventId;

        private int articlesCount;

        private List<BreakingNewsArticleEntity> articles = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BreakingNewsEventEntity other) {
            eventId(other.getEventId());
            articlesCount(other.getArticlesCount());
            articles(other.getArticles());
            return this;
        }

        /**
         * <p>Unique identifier for the breaking news event/cluster.</p>
         * <p>Unique identifier for the breaking news event/cluster.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("event_id")
        public ArticlesCountStage eventId(@NotNull String eventId) {
            this.eventId = Objects.requireNonNull(eventId, "eventId must not be null");
            return this;
        }

        /**
         * <p>Number of articles in this breaking news cluster.</p>
         * <p>Number of articles in this breaking news cluster.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("articles_count")
        public _FinalStage articlesCount(int articlesCount) {
            this.articlesCount = articlesCount;
            return this;
        }

        /**
         * <p>The articles associated with this breaking news event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllArticles(List<BreakingNewsArticleEntity> articles) {
            this.articles.addAll(articles);
            return this;
        }

        /**
         * <p>The articles associated with this breaking news event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addArticles(BreakingNewsArticleEntity articles) {
            this.articles.add(articles);
            return this;
        }

        /**
         * <p>The articles associated with this breaking news event.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "articles", nulls = Nulls.SKIP)
        public _FinalStage articles(List<BreakingNewsArticleEntity> articles) {
            this.articles.clear();
            this.articles.addAll(articles);
            return this;
        }

        @java.lang.Override
        public BreakingNewsEventEntity build() {
            return new BreakingNewsEventEntity(eventId, articlesCount, articles, additionalProperties);
        }
    }
}
