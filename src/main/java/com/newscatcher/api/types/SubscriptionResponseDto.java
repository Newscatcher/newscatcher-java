/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionResponseDto.Builder.class)
public final class SubscriptionResponseDto {
    private final boolean active;

    private final int concurrentCalls;

    private final String plan;

    private final int planCalls;

    private final int remainingCalls;

    private final int historicalDays;

    private final Map<String, Object> additionalProperties;

    private SubscriptionResponseDto(
            boolean active,
            int concurrentCalls,
            String plan,
            int planCalls,
            int remainingCalls,
            int historicalDays,
            Map<String, Object> additionalProperties) {
        this.active = active;
        this.concurrentCalls = concurrentCalls;
        this.plan = plan;
        this.planCalls = planCalls;
        this.remainingCalls = remainingCalls;
        this.historicalDays = historicalDays;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the subscription is currently active.
     */
    @JsonProperty("active")
    public boolean getActive() {
        return active;
    }

    /**
     * @return The number of API calls allowed per second allowed in the current plan.
     */
    @JsonProperty("concurrent_calls")
    public int getConcurrentCalls() {
        return concurrentCalls;
    }

    /**
     * @return The name of the subscription plan.
     */
    @JsonProperty("plan")
    public String getPlan() {
        return plan;
    }

    /**
     * @return The total number of API calls assigned to the current subscription.
     */
    @JsonProperty("plan_calls")
    public int getPlanCalls() {
        return planCalls;
    }

    /**
     * @return The number of API calls remaining for the current subscription period.
     */
    @JsonProperty("remaining_calls")
    public int getRemainingCalls() {
        return remainingCalls;
    }

    /**
     * @return The number of historical days accessible under the current subscription plan.
     */
    @JsonProperty("historical_days")
    public int getHistoricalDays() {
        return historicalDays;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionResponseDto && equalTo((SubscriptionResponseDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionResponseDto other) {
        return active == other.active
                && concurrentCalls == other.concurrentCalls
                && plan.equals(other.plan)
                && planCalls == other.planCalls
                && remainingCalls == other.remainingCalls
                && historicalDays == other.historicalDays;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.active, this.concurrentCalls, this.plan, this.planCalls, this.remainingCalls, this.historicalDays);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ActiveStage builder() {
        return new Builder();
    }

    public interface ActiveStage {
        ConcurrentCallsStage active(boolean active);

        Builder from(SubscriptionResponseDto other);
    }

    public interface ConcurrentCallsStage {
        PlanStage concurrentCalls(int concurrentCalls);
    }

    public interface PlanStage {
        PlanCallsStage plan(@NotNull String plan);
    }

    public interface PlanCallsStage {
        RemainingCallsStage planCalls(int planCalls);
    }

    public interface RemainingCallsStage {
        HistoricalDaysStage remainingCalls(int remainingCalls);
    }

    public interface HistoricalDaysStage {
        _FinalStage historicalDays(int historicalDays);
    }

    public interface _FinalStage {
        SubscriptionResponseDto build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ActiveStage,
                    ConcurrentCallsStage,
                    PlanStage,
                    PlanCallsStage,
                    RemainingCallsStage,
                    HistoricalDaysStage,
                    _FinalStage {
        private boolean active;

        private int concurrentCalls;

        private String plan;

        private int planCalls;

        private int remainingCalls;

        private int historicalDays;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SubscriptionResponseDto other) {
            active(other.getActive());
            concurrentCalls(other.getConcurrentCalls());
            plan(other.getPlan());
            planCalls(other.getPlanCalls());
            remainingCalls(other.getRemainingCalls());
            historicalDays(other.getHistoricalDays());
            return this;
        }

        /**
         * <p>Indicates whether the subscription is currently active.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("active")
        public ConcurrentCallsStage active(boolean active) {
            this.active = active;
            return this;
        }

        /**
         * <p>The number of API calls allowed per second allowed in the current plan.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("concurrent_calls")
        public PlanStage concurrentCalls(int concurrentCalls) {
            this.concurrentCalls = concurrentCalls;
            return this;
        }

        /**
         * <p>The name of the subscription plan.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("plan")
        public PlanCallsStage plan(@NotNull String plan) {
            this.plan = Objects.requireNonNull(plan, "plan must not be null");
            return this;
        }

        /**
         * <p>The total number of API calls assigned to the current subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("plan_calls")
        public RemainingCallsStage planCalls(int planCalls) {
            this.planCalls = planCalls;
            return this;
        }

        /**
         * <p>The number of API calls remaining for the current subscription period.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("remaining_calls")
        public HistoricalDaysStage remainingCalls(int remainingCalls) {
            this.remainingCalls = remainingCalls;
            return this;
        }

        /**
         * <p>The number of historical days accessible under the current subscription plan.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("historical_days")
        public _FinalStage historicalDays(int historicalDays) {
            this.historicalDays = historicalDays;
            return this;
        }

        @java.lang.Override
        public SubscriptionResponseDto build() {
            return new SubscriptionResponseDto(
                    active, concurrentCalls, plan, planCalls, remainingCalls, historicalDays, additionalProperties);
        }
    }
}
