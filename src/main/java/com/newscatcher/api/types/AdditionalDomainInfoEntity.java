/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AdditionalDomainInfoEntity.Builder.class)
public final class AdditionalDomainInfoEntity {
    private final Optional<Boolean> isNewsDomain;

    private final Optional<String> newsType;

    private final Optional<String> newsDomainType;

    private final Map<String, Object> additionalProperties;

    private AdditionalDomainInfoEntity(
            Optional<Boolean> isNewsDomain,
            Optional<String> newsType,
            Optional<String> newsDomainType,
            Map<String, Object> additionalProperties) {
        this.isNewsDomain = isNewsDomain;
        this.newsType = newsType;
        this.newsDomainType = newsDomainType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the domain is a news domain.
     */
    @JsonProperty("is_news_domain")
    public Optional<Boolean> getIsNewsDomain() {
        return isNewsDomain;
    }

    /**
     * @return The type of news content provided by the domain.
     */
    @JsonProperty("news_type")
    public Optional<String> getNewsType() {
        return newsType;
    }

    /**
     * @return The type of news domain.
     */
    @JsonProperty("news_domain_type")
    public Optional<String> getNewsDomainType() {
        return newsDomainType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AdditionalDomainInfoEntity && equalTo((AdditionalDomainInfoEntity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AdditionalDomainInfoEntity other) {
        return isNewsDomain.equals(other.isNewsDomain)
                && newsType.equals(other.newsType)
                && newsDomainType.equals(other.newsDomainType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.isNewsDomain, this.newsType, this.newsDomainType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> isNewsDomain = Optional.empty();

        private Optional<String> newsType = Optional.empty();

        private Optional<String> newsDomainType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AdditionalDomainInfoEntity other) {
            isNewsDomain(other.getIsNewsDomain());
            newsType(other.getNewsType());
            newsDomainType(other.getNewsDomainType());
            return this;
        }

        /**
         * <p>Indicates whether the domain is a news domain.</p>
         */
        @JsonSetter(value = "is_news_domain", nulls = Nulls.SKIP)
        public Builder isNewsDomain(Optional<Boolean> isNewsDomain) {
            this.isNewsDomain = isNewsDomain;
            return this;
        }

        public Builder isNewsDomain(Boolean isNewsDomain) {
            this.isNewsDomain = Optional.ofNullable(isNewsDomain);
            return this;
        }

        /**
         * <p>The type of news content provided by the domain.</p>
         */
        @JsonSetter(value = "news_type", nulls = Nulls.SKIP)
        public Builder newsType(Optional<String> newsType) {
            this.newsType = newsType;
            return this;
        }

        public Builder newsType(String newsType) {
            this.newsType = Optional.ofNullable(newsType);
            return this;
        }

        /**
         * <p>The type of news domain.</p>
         */
        @JsonSetter(value = "news_domain_type", nulls = Nulls.SKIP)
        public Builder newsDomainType(Optional<String> newsDomainType) {
            this.newsDomainType = newsDomainType;
            return this;
        }

        public Builder newsDomainType(String newsDomainType) {
            this.newsDomainType = Optional.ofNullable(newsDomainType);
            return this;
        }

        public AdditionalDomainInfoEntity build() {
            return new AdditionalDomainInfoEntity(isNewsDomain, newsType, newsDomainType, additionalProperties);
        }
    }
}
