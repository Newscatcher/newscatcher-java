/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Error.Builder.class)
public final class Error {
    private final String message;

    private final int statusCode;

    private final String status;

    private final Map<String, Object> additionalProperties;

    private Error(String message, int statusCode, String status, Map<String, Object> additionalProperties) {
        this.message = message;
        this.statusCode = statusCode;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A detailed description of the error.
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * @return The HTTP status code of the error.
     */
    @JsonProperty("status_code")
    public int getStatusCode() {
        return statusCode;
    }

    /**
     * @return A short description of the status code.
     */
    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Error && equalTo((Error) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Error other) {
        return message.equals(other.message) && statusCode == other.statusCode && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.message, this.statusCode, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MessageStage builder() {
        return new Builder();
    }

    public interface MessageStage {
        /**
         * <p>A detailed description of the error.</p>
         */
        StatusCodeStage message(@NotNull String message);

        Builder from(Error other);
    }

    public interface StatusCodeStage {
        /**
         * <p>The HTTP status code of the error.</p>
         */
        StatusStage statusCode(int statusCode);
    }

    public interface StatusStage {
        /**
         * <p>A short description of the status code.</p>
         */
        _FinalStage status(@NotNull String status);
    }

    public interface _FinalStage {
        Error build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MessageStage, StatusCodeStage, StatusStage, _FinalStage {
        private String message;

        private int statusCode;

        private String status;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Error other) {
            message(other.getMessage());
            statusCode(other.getStatusCode());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>A detailed description of the error.</p>
         * <p>A detailed description of the error.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("message")
        public StatusCodeStage message(@NotNull String message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        /**
         * <p>The HTTP status code of the error.</p>
         * <p>The HTTP status code of the error.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status_code")
        public StatusStage statusCode(int statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * <p>A short description of the status code.</p>
         * <p>A short description of the status code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull String status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        public Error build() {
            return new Error(message, statusCode, status, additionalProperties);
        }
    }
}
