/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClusterEntity.Builder.class)
public final class ClusterEntity {
    private final String clusterId;

    private final int clusterSize;

    private final List<ArticleEntity> articles;

    private final Map<String, Object> additionalProperties;

    private ClusterEntity(
            String clusterId, int clusterSize, List<ArticleEntity> articles, Map<String, Object> additionalProperties) {
        this.clusterId = clusterId;
        this.clusterSize = clusterSize;
        this.articles = articles;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier for the cluster.
     */
    @JsonProperty("cluster_id")
    public String getClusterId() {
        return clusterId;
    }

    /**
     * @return The number of articles in the cluster.
     */
    @JsonProperty("cluster_size")
    public int getClusterSize() {
        return clusterSize;
    }

    /**
     * @return A list of articles in the cluster.
     */
    @JsonProperty("articles")
    public List<ArticleEntity> getArticles() {
        return articles;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClusterEntity && equalTo((ClusterEntity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClusterEntity other) {
        return clusterId.equals(other.clusterId) && clusterSize == other.clusterSize && articles.equals(other.articles);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.clusterId, this.clusterSize, this.articles);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ClusterIdStage builder() {
        return new Builder();
    }

    public interface ClusterIdStage {
        /**
         * <p>The unique identifier for the cluster.</p>
         */
        ClusterSizeStage clusterId(@NotNull String clusterId);

        Builder from(ClusterEntity other);
    }

    public interface ClusterSizeStage {
        /**
         * <p>The number of articles in the cluster.</p>
         */
        _FinalStage clusterSize(int clusterSize);
    }

    public interface _FinalStage {
        ClusterEntity build();

        /**
         * <p>A list of articles in the cluster.</p>
         */
        _FinalStage articles(List<ArticleEntity> articles);

        _FinalStage addArticles(ArticleEntity articles);

        _FinalStage addAllArticles(List<ArticleEntity> articles);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ClusterIdStage, ClusterSizeStage, _FinalStage {
        private String clusterId;

        private int clusterSize;

        private List<ArticleEntity> articles = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ClusterEntity other) {
            clusterId(other.getClusterId());
            clusterSize(other.getClusterSize());
            articles(other.getArticles());
            return this;
        }

        /**
         * <p>The unique identifier for the cluster.</p>
         * <p>The unique identifier for the cluster.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cluster_id")
        public ClusterSizeStage clusterId(@NotNull String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId, "clusterId must not be null");
            return this;
        }

        /**
         * <p>The number of articles in the cluster.</p>
         * <p>The number of articles in the cluster.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cluster_size")
        public _FinalStage clusterSize(int clusterSize) {
            this.clusterSize = clusterSize;
            return this;
        }

        /**
         * <p>A list of articles in the cluster.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllArticles(List<ArticleEntity> articles) {
            this.articles.addAll(articles);
            return this;
        }

        /**
         * <p>A list of articles in the cluster.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addArticles(ArticleEntity articles) {
            this.articles.add(articles);
            return this;
        }

        /**
         * <p>A list of articles in the cluster.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "articles", nulls = Nulls.SKIP)
        public _FinalStage articles(List<ArticleEntity> articles) {
            this.articles.clear();
            this.articles.addAll(articles);
            return this;
        }

        @java.lang.Override
        public ClusterEntity build() {
            return new ClusterEntity(clusterId, clusterSize, articles, additionalProperties);
        }
    }
}
