/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BaseSearchResponseDto.Builder.class)
public final class BaseSearchResponseDto implements IBaseSearchResponseDto {
    private final String status;

    private final int totalHits;

    private final int page;

    private final int totalPages;

    private final int pageSize;

    private final Map<String, Object> additionalProperties;

    private BaseSearchResponseDto(
            String status,
            int totalHits,
            int page,
            int totalPages,
            int pageSize,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.totalHits = totalHits;
        this.page = page;
        this.totalPages = totalPages;
        this.pageSize = pageSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The status of the response.
     */
    @JsonProperty("status")
    @java.lang.Override
    public String getStatus() {
        return status;
    }

    /**
     * @return The total number of articles matching the search criteria.
     */
    @JsonProperty("total_hits")
    @java.lang.Override
    public int getTotalHits() {
        return totalHits;
    }

    /**
     * @return The current page number of the results.
     */
    @JsonProperty("page")
    @java.lang.Override
    public int getPage() {
        return page;
    }

    /**
     * @return The total number of pages available for the given search criteria.
     */
    @JsonProperty("total_pages")
    @java.lang.Override
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * @return The number of articles per page.
     */
    @JsonProperty("page_size")
    @java.lang.Override
    public int getPageSize() {
        return pageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BaseSearchResponseDto && equalTo((BaseSearchResponseDto) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BaseSearchResponseDto other) {
        return status.equals(other.status)
                && totalHits == other.totalHits
                && page == other.page
                && totalPages == other.totalPages
                && pageSize == other.pageSize;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.totalHits, this.page, this.totalPages, this.pageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        /**
         * <p>The status of the response.</p>
         */
        TotalHitsStage status(@NotNull String status);

        Builder from(BaseSearchResponseDto other);
    }

    public interface TotalHitsStage {
        /**
         * <p>The total number of articles matching the search criteria.</p>
         */
        PageStage totalHits(int totalHits);
    }

    public interface PageStage {
        /**
         * <p>The current page number of the results.</p>
         */
        TotalPagesStage page(int page);
    }

    public interface TotalPagesStage {
        /**
         * <p>The total number of pages available for the given search criteria.</p>
         */
        PageSizeStage totalPages(int totalPages);
    }

    public interface PageSizeStage {
        /**
         * <p>The number of articles per page.</p>
         */
        _FinalStage pageSize(int pageSize);
    }

    public interface _FinalStage {
        BaseSearchResponseDto build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StatusStage, TotalHitsStage, PageStage, TotalPagesStage, PageSizeStage, _FinalStage {
        private String status;

        private int totalHits;

        private int page;

        private int totalPages;

        private int pageSize;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BaseSearchResponseDto other) {
            status(other.getStatus());
            totalHits(other.getTotalHits());
            page(other.getPage());
            totalPages(other.getTotalPages());
            pageSize(other.getPageSize());
            return this;
        }

        /**
         * <p>The status of the response.</p>
         * <p>The status of the response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public TotalHitsStage status(@NotNull String status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>The total number of articles matching the search criteria.</p>
         * <p>The total number of articles matching the search criteria.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("total_hits")
        public PageStage totalHits(int totalHits) {
            this.totalHits = totalHits;
            return this;
        }

        /**
         * <p>The current page number of the results.</p>
         * <p>The current page number of the results.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("page")
        public TotalPagesStage page(int page) {
            this.page = page;
            return this;
        }

        /**
         * <p>The total number of pages available for the given search criteria.</p>
         * <p>The total number of pages available for the given search criteria.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("total_pages")
        public PageSizeStage totalPages(int totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        /**
         * <p>The number of articles per page.</p>
         * <p>The number of articles per page.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("page_size")
        public _FinalStage pageSize(int pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        @java.lang.Override
        public BaseSearchResponseDto build() {
            return new BaseSearchResponseDto(status, totalHits, page, totalPages, pageSize, additionalProperties);
        }
    }
}
