/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AggregationItem.Builder.class)
public final class AggregationItem {
    private final List<TimeFrameCount> aggregationCount;

    private final Map<String, Object> additionalProperties;

    private AggregationItem(List<TimeFrameCount> aggregationCount, Map<String, Object> additionalProperties) {
        this.aggregationCount = aggregationCount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Array of time frames and their corresponding article counts
     */
    @JsonProperty("aggregation_count")
    public List<TimeFrameCount> getAggregationCount() {
        return aggregationCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AggregationItem && equalTo((AggregationItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AggregationItem other) {
        return aggregationCount.equals(other.aggregationCount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.aggregationCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<TimeFrameCount> aggregationCount = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AggregationItem other) {
            aggregationCount(other.getAggregationCount());
            return this;
        }

        @JsonSetter(value = "aggregation_count", nulls = Nulls.SKIP)
        public Builder aggregationCount(List<TimeFrameCount> aggregationCount) {
            this.aggregationCount.clear();
            this.aggregationCount.addAll(aggregationCount);
            return this;
        }

        public Builder addAggregationCount(TimeFrameCount aggregationCount) {
            this.aggregationCount.add(aggregationCount);
            return this;
        }

        public Builder addAllAggregationCount(List<TimeFrameCount> aggregationCount) {
            this.aggregationCount.addAll(aggregationCount);
            return this;
        }

        public AggregationItem build() {
            return new AggregationItem(aggregationCount, additionalProperties);
        }
    }
}
