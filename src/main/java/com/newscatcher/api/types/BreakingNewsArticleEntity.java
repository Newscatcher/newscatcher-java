/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BreakingNewsArticleEntity.Builder.class)
public final class BreakingNewsArticleEntity {
    private final String title;

    private final Optional<String> author;

    private final Optional<Authors> authors;

    private final Optional<Journalists> journalists;

    private final Optional<String> publishedDate;

    private final Optional<String> publishedDatePrecision;

    private final Optional<String> updatedDate;

    private final Optional<String> updatedDatePrecision;

    private final Optional<String> parseDate;

    private final String link;

    private final String domainUrl;

    private final String fullDomainUrl;

    private final Optional<String> nameSource;

    private final Optional<Boolean> isHeadline;

    private final Optional<Boolean> paidContent;

    private final String parentUrl;

    private final Optional<String> country;

    private final Optional<String> rights;

    private final int rank;

    private final Optional<String> media;

    private final Optional<String> language;

    private final Optional<String> description;

    private final String content;

    private final Optional<Integer> wordCount;

    private final Optional<Boolean> isOpinion;

    private final Optional<String> twitterAccount;

    private final Optional<BreakingNewsArticleEntityAllLinks> allLinks;

    private final Optional<BreakingNewsArticleEntityAllDomainLinks> allDomainLinks;

    private final Optional<NlpDataEntity> nlp;

    private final String id;

    private final double score;

    private final Optional<Boolean> robotsCompliant;

    private final Map<String, Object> additionalProperties;

    private BreakingNewsArticleEntity(
            String title,
            Optional<String> author,
            Optional<Authors> authors,
            Optional<Journalists> journalists,
            Optional<String> publishedDate,
            Optional<String> publishedDatePrecision,
            Optional<String> updatedDate,
            Optional<String> updatedDatePrecision,
            Optional<String> parseDate,
            String link,
            String domainUrl,
            String fullDomainUrl,
            Optional<String> nameSource,
            Optional<Boolean> isHeadline,
            Optional<Boolean> paidContent,
            String parentUrl,
            Optional<String> country,
            Optional<String> rights,
            int rank,
            Optional<String> media,
            Optional<String> language,
            Optional<String> description,
            String content,
            Optional<Integer> wordCount,
            Optional<Boolean> isOpinion,
            Optional<String> twitterAccount,
            Optional<BreakingNewsArticleEntityAllLinks> allLinks,
            Optional<BreakingNewsArticleEntityAllDomainLinks> allDomainLinks,
            Optional<NlpDataEntity> nlp,
            String id,
            double score,
            Optional<Boolean> robotsCompliant,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.author = author;
        this.authors = authors;
        this.journalists = journalists;
        this.publishedDate = publishedDate;
        this.publishedDatePrecision = publishedDatePrecision;
        this.updatedDate = updatedDate;
        this.updatedDatePrecision = updatedDatePrecision;
        this.parseDate = parseDate;
        this.link = link;
        this.domainUrl = domainUrl;
        this.fullDomainUrl = fullDomainUrl;
        this.nameSource = nameSource;
        this.isHeadline = isHeadline;
        this.paidContent = paidContent;
        this.parentUrl = parentUrl;
        this.country = country;
        this.rights = rights;
        this.rank = rank;
        this.media = media;
        this.language = language;
        this.description = description;
        this.content = content;
        this.wordCount = wordCount;
        this.isOpinion = isOpinion;
        this.twitterAccount = twitterAccount;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.nlp = nlp;
        this.id = id;
        this.score = score;
        this.robotsCompliant = robotsCompliant;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The title of the article.
     */
    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    /**
     * @return The primary author of the article.
     */
    @JsonProperty("author")
    public Optional<String> getAuthor() {
        return author;
    }

    /**
     * @return A list of authors of the article.
     */
    @JsonProperty("authors")
    public Optional<Authors> getAuthors() {
        return authors;
    }

    /**
     * @return A list of journalists associated with the article.
     */
    @JsonProperty("journalists")
    public Optional<Journalists> getJournalists() {
        return journalists;
    }

    /**
     * @return The date the article was published.
     */
    @JsonProperty("published_date")
    public Optional<String> getPublishedDate() {
        return publishedDate;
    }

    /**
     * @return The precision of the published date.
     */
    @JsonProperty("published_date_precision")
    public Optional<String> getPublishedDatePrecision() {
        return publishedDatePrecision;
    }

    /**
     * @return The date the article was last updated.
     */
    @JsonProperty("updated_date")
    public Optional<String> getUpdatedDate() {
        return updatedDate;
    }

    /**
     * @return The precision of the updated date.
     */
    @JsonProperty("updated_date_precision")
    public Optional<String> getUpdatedDatePrecision() {
        return updatedDatePrecision;
    }

    /**
     * @return The date the article was parsed.
     */
    @JsonProperty("parse_date")
    public Optional<String> getParseDate() {
        return parseDate;
    }

    /**
     * @return The URL link to the article.
     */
    @JsonProperty("link")
    public String getLink() {
        return link;
    }

    /**
     * @return The domain URL of the article.
     */
    @JsonProperty("domain_url")
    public String getDomainUrl() {
        return domainUrl;
    }

    /**
     * @return The full domain URL of the article.
     */
    @JsonProperty("full_domain_url")
    public String getFullDomainUrl() {
        return fullDomainUrl;
    }

    /**
     * @return The name of the source where the article was published.
     */
    @JsonProperty("name_source")
    public Optional<String> getNameSource() {
        return nameSource;
    }

    /**
     * @return Indicates if the article is a headline.
     */
    @JsonProperty("is_headline")
    public Optional<Boolean> getIsHeadline() {
        return isHeadline;
    }

    /**
     * @return Indicates if the article is paid content.
     */
    @JsonProperty("paid_content")
    public Optional<Boolean> getPaidContent() {
        return paidContent;
    }

    /**
     * @return The categorical URL of the article.
     */
    @JsonProperty("parent_url")
    public String getParentUrl() {
        return parentUrl;
    }

    /**
     * @return The country where the article was published.
     */
    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    /**
     * @return The rights information for the article.
     */
    @JsonProperty("rights")
    public Optional<String> getRights() {
        return rights;
    }

    /**
     * @return The rank of the article's source.
     */
    @JsonProperty("rank")
    public int getRank() {
        return rank;
    }

    /**
     * @return The media associated with the article.
     */
    @JsonProperty("media")
    public Optional<String> getMedia() {
        return media;
    }

    /**
     * @return The language in which the article is written.
     */
    @JsonProperty("language")
    public Optional<String> getLanguage() {
        return language;
    }

    /**
     * @return A brief description of the article.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The content of the article.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return The word count of the article.
     */
    @JsonProperty("word_count")
    public Optional<Integer> getWordCount() {
        return wordCount;
    }

    /**
     * @return Indicates if the article is an opinion piece.
     */
    @JsonProperty("is_opinion")
    public Optional<Boolean> getIsOpinion() {
        return isOpinion;
    }

    /**
     * @return The Twitter account associated with the article.
     */
    @JsonProperty("twitter_account")
    public Optional<String> getTwitterAccount() {
        return twitterAccount;
    }

    /**
     * @return A list of all URLs mentioned in the article.
     */
    @JsonProperty("all_links")
    public Optional<BreakingNewsArticleEntityAllLinks> getAllLinks() {
        return allLinks;
    }

    /**
     * @return A list of all domain URLs mentioned in the article.
     */
    @JsonProperty("all_domain_links")
    public Optional<BreakingNewsArticleEntityAllDomainLinks> getAllDomainLinks() {
        return allDomainLinks;
    }

    @JsonProperty("nlp")
    public Optional<NlpDataEntity> getNlp() {
        return nlp;
    }

    /**
     * @return The unique identifier for the article.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The relevance score of the article.
     */
    @JsonProperty("score")
    public double getScore() {
        return score;
    }

    /**
     * @return True if the article content can be safely accessed according to the publisher's robots.txt rules; false otherwise.
     */
    @JsonProperty("robots_compliant")
    public Optional<Boolean> getRobotsCompliant() {
        return robotsCompliant;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BreakingNewsArticleEntity && equalTo((BreakingNewsArticleEntity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BreakingNewsArticleEntity other) {
        return title.equals(other.title)
                && author.equals(other.author)
                && authors.equals(other.authors)
                && journalists.equals(other.journalists)
                && publishedDate.equals(other.publishedDate)
                && publishedDatePrecision.equals(other.publishedDatePrecision)
                && updatedDate.equals(other.updatedDate)
                && updatedDatePrecision.equals(other.updatedDatePrecision)
                && parseDate.equals(other.parseDate)
                && link.equals(other.link)
                && domainUrl.equals(other.domainUrl)
                && fullDomainUrl.equals(other.fullDomainUrl)
                && nameSource.equals(other.nameSource)
                && isHeadline.equals(other.isHeadline)
                && paidContent.equals(other.paidContent)
                && parentUrl.equals(other.parentUrl)
                && country.equals(other.country)
                && rights.equals(other.rights)
                && rank == other.rank
                && media.equals(other.media)
                && language.equals(other.language)
                && description.equals(other.description)
                && content.equals(other.content)
                && wordCount.equals(other.wordCount)
                && isOpinion.equals(other.isOpinion)
                && twitterAccount.equals(other.twitterAccount)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && nlp.equals(other.nlp)
                && id.equals(other.id)
                && score == other.score
                && robotsCompliant.equals(other.robotsCompliant);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.title,
                this.author,
                this.authors,
                this.journalists,
                this.publishedDate,
                this.publishedDatePrecision,
                this.updatedDate,
                this.updatedDatePrecision,
                this.parseDate,
                this.link,
                this.domainUrl,
                this.fullDomainUrl,
                this.nameSource,
                this.isHeadline,
                this.paidContent,
                this.parentUrl,
                this.country,
                this.rights,
                this.rank,
                this.media,
                this.language,
                this.description,
                this.content,
                this.wordCount,
                this.isOpinion,
                this.twitterAccount,
                this.allLinks,
                this.allDomainLinks,
                this.nlp,
                this.id,
                this.score,
                this.robotsCompliant);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TitleStage builder() {
        return new Builder();
    }

    public interface TitleStage {
        /**
         * <p>The title of the article.</p>
         */
        LinkStage title(@NotNull String title);

        Builder from(BreakingNewsArticleEntity other);
    }

    public interface LinkStage {
        /**
         * <p>The URL link to the article.</p>
         */
        DomainUrlStage link(@NotNull String link);
    }

    public interface DomainUrlStage {
        /**
         * <p>The domain URL of the article.</p>
         */
        FullDomainUrlStage domainUrl(@NotNull String domainUrl);
    }

    public interface FullDomainUrlStage {
        /**
         * <p>The full domain URL of the article.</p>
         */
        ParentUrlStage fullDomainUrl(@NotNull String fullDomainUrl);
    }

    public interface ParentUrlStage {
        /**
         * <p>The categorical URL of the article.</p>
         */
        RankStage parentUrl(@NotNull String parentUrl);
    }

    public interface RankStage {
        /**
         * <p>The rank of the article's source.</p>
         */
        ContentStage rank(int rank);
    }

    public interface ContentStage {
        /**
         * <p>The content of the article.</p>
         */
        IdStage content(@NotNull String content);
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for the article.</p>
         */
        ScoreStage id(@NotNull String id);
    }

    public interface ScoreStage {
        /**
         * <p>The relevance score of the article.</p>
         */
        _FinalStage score(double score);
    }

    public interface _FinalStage {
        BreakingNewsArticleEntity build();

        /**
         * <p>The primary author of the article.</p>
         */
        _FinalStage author(Optional<String> author);

        _FinalStage author(String author);

        /**
         * <p>A list of authors of the article.</p>
         */
        _FinalStage authors(Optional<Authors> authors);

        _FinalStage authors(Authors authors);

        /**
         * <p>A list of journalists associated with the article.</p>
         */
        _FinalStage journalists(Optional<Journalists> journalists);

        _FinalStage journalists(Journalists journalists);

        /**
         * <p>The date the article was published.</p>
         */
        _FinalStage publishedDate(Optional<String> publishedDate);

        _FinalStage publishedDate(String publishedDate);

        /**
         * <p>The precision of the published date.</p>
         */
        _FinalStage publishedDatePrecision(Optional<String> publishedDatePrecision);

        _FinalStage publishedDatePrecision(String publishedDatePrecision);

        /**
         * <p>The date the article was last updated.</p>
         */
        _FinalStage updatedDate(Optional<String> updatedDate);

        _FinalStage updatedDate(String updatedDate);

        /**
         * <p>The precision of the updated date.</p>
         */
        _FinalStage updatedDatePrecision(Optional<String> updatedDatePrecision);

        _FinalStage updatedDatePrecision(String updatedDatePrecision);

        /**
         * <p>The date the article was parsed.</p>
         */
        _FinalStage parseDate(Optional<String> parseDate);

        _FinalStage parseDate(String parseDate);

        /**
         * <p>The name of the source where the article was published.</p>
         */
        _FinalStage nameSource(Optional<String> nameSource);

        _FinalStage nameSource(String nameSource);

        /**
         * <p>Indicates if the article is a headline.</p>
         */
        _FinalStage isHeadline(Optional<Boolean> isHeadline);

        _FinalStage isHeadline(Boolean isHeadline);

        /**
         * <p>Indicates if the article is paid content.</p>
         */
        _FinalStage paidContent(Optional<Boolean> paidContent);

        _FinalStage paidContent(Boolean paidContent);

        /**
         * <p>The country where the article was published.</p>
         */
        _FinalStage country(Optional<String> country);

        _FinalStage country(String country);

        /**
         * <p>The rights information for the article.</p>
         */
        _FinalStage rights(Optional<String> rights);

        _FinalStage rights(String rights);

        /**
         * <p>The media associated with the article.</p>
         */
        _FinalStage media(Optional<String> media);

        _FinalStage media(String media);

        /**
         * <p>The language in which the article is written.</p>
         */
        _FinalStage language(Optional<String> language);

        _FinalStage language(String language);

        /**
         * <p>A brief description of the article.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>The word count of the article.</p>
         */
        _FinalStage wordCount(Optional<Integer> wordCount);

        _FinalStage wordCount(Integer wordCount);

        /**
         * <p>Indicates if the article is an opinion piece.</p>
         */
        _FinalStage isOpinion(Optional<Boolean> isOpinion);

        _FinalStage isOpinion(Boolean isOpinion);

        /**
         * <p>The Twitter account associated with the article.</p>
         */
        _FinalStage twitterAccount(Optional<String> twitterAccount);

        _FinalStage twitterAccount(String twitterAccount);

        /**
         * <p>A list of all URLs mentioned in the article.</p>
         */
        _FinalStage allLinks(Optional<BreakingNewsArticleEntityAllLinks> allLinks);

        _FinalStage allLinks(BreakingNewsArticleEntityAllLinks allLinks);

        /**
         * <p>A list of all domain URLs mentioned in the article.</p>
         */
        _FinalStage allDomainLinks(Optional<BreakingNewsArticleEntityAllDomainLinks> allDomainLinks);

        _FinalStage allDomainLinks(BreakingNewsArticleEntityAllDomainLinks allDomainLinks);

        _FinalStage nlp(Optional<NlpDataEntity> nlp);

        _FinalStage nlp(NlpDataEntity nlp);

        /**
         * <p>True if the article content can be safely accessed according to the publisher's robots.txt rules; false otherwise.</p>
         */
        _FinalStage robotsCompliant(Optional<Boolean> robotsCompliant);

        _FinalStage robotsCompliant(Boolean robotsCompliant);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TitleStage,
                    LinkStage,
                    DomainUrlStage,
                    FullDomainUrlStage,
                    ParentUrlStage,
                    RankStage,
                    ContentStage,
                    IdStage,
                    ScoreStage,
                    _FinalStage {
        private String title;

        private String link;

        private String domainUrl;

        private String fullDomainUrl;

        private String parentUrl;

        private int rank;

        private String content;

        private String id;

        private double score;

        private Optional<Boolean> robotsCompliant = Optional.empty();

        private Optional<NlpDataEntity> nlp = Optional.empty();

        private Optional<BreakingNewsArticleEntityAllDomainLinks> allDomainLinks = Optional.empty();

        private Optional<BreakingNewsArticleEntityAllLinks> allLinks = Optional.empty();

        private Optional<String> twitterAccount = Optional.empty();

        private Optional<Boolean> isOpinion = Optional.empty();

        private Optional<Integer> wordCount = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> language = Optional.empty();

        private Optional<String> media = Optional.empty();

        private Optional<String> rights = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<Boolean> paidContent = Optional.empty();

        private Optional<Boolean> isHeadline = Optional.empty();

        private Optional<String> nameSource = Optional.empty();

        private Optional<String> parseDate = Optional.empty();

        private Optional<String> updatedDatePrecision = Optional.empty();

        private Optional<String> updatedDate = Optional.empty();

        private Optional<String> publishedDatePrecision = Optional.empty();

        private Optional<String> publishedDate = Optional.empty();

        private Optional<Journalists> journalists = Optional.empty();

        private Optional<Authors> authors = Optional.empty();

        private Optional<String> author = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BreakingNewsArticleEntity other) {
            title(other.getTitle());
            author(other.getAuthor());
            authors(other.getAuthors());
            journalists(other.getJournalists());
            publishedDate(other.getPublishedDate());
            publishedDatePrecision(other.getPublishedDatePrecision());
            updatedDate(other.getUpdatedDate());
            updatedDatePrecision(other.getUpdatedDatePrecision());
            parseDate(other.getParseDate());
            link(other.getLink());
            domainUrl(other.getDomainUrl());
            fullDomainUrl(other.getFullDomainUrl());
            nameSource(other.getNameSource());
            isHeadline(other.getIsHeadline());
            paidContent(other.getPaidContent());
            parentUrl(other.getParentUrl());
            country(other.getCountry());
            rights(other.getRights());
            rank(other.getRank());
            media(other.getMedia());
            language(other.getLanguage());
            description(other.getDescription());
            content(other.getContent());
            wordCount(other.getWordCount());
            isOpinion(other.getIsOpinion());
            twitterAccount(other.getTwitterAccount());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            nlp(other.getNlp());
            id(other.getId());
            score(other.getScore());
            robotsCompliant(other.getRobotsCompliant());
            return this;
        }

        /**
         * <p>The title of the article.</p>
         * <p>The title of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("title")
        public LinkStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        /**
         * <p>The URL link to the article.</p>
         * <p>The URL link to the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("link")
        public DomainUrlStage link(@NotNull String link) {
            this.link = Objects.requireNonNull(link, "link must not be null");
            return this;
        }

        /**
         * <p>The domain URL of the article.</p>
         * <p>The domain URL of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("domain_url")
        public FullDomainUrlStage domainUrl(@NotNull String domainUrl) {
            this.domainUrl = Objects.requireNonNull(domainUrl, "domainUrl must not be null");
            return this;
        }

        /**
         * <p>The full domain URL of the article.</p>
         * <p>The full domain URL of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("full_domain_url")
        public ParentUrlStage fullDomainUrl(@NotNull String fullDomainUrl) {
            this.fullDomainUrl = Objects.requireNonNull(fullDomainUrl, "fullDomainUrl must not be null");
            return this;
        }

        /**
         * <p>The categorical URL of the article.</p>
         * <p>The categorical URL of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("parent_url")
        public RankStage parentUrl(@NotNull String parentUrl) {
            this.parentUrl = Objects.requireNonNull(parentUrl, "parentUrl must not be null");
            return this;
        }

        /**
         * <p>The rank of the article's source.</p>
         * <p>The rank of the article's source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("rank")
        public ContentStage rank(int rank) {
            this.rank = rank;
            return this;
        }

        /**
         * <p>The content of the article.</p>
         * <p>The content of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public IdStage content(@NotNull String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        /**
         * <p>The unique identifier for the article.</p>
         * <p>The unique identifier for the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public ScoreStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The relevance score of the article.</p>
         * <p>The relevance score of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("score")
        public _FinalStage score(double score) {
            this.score = score;
            return this;
        }

        /**
         * <p>True if the article content can be safely accessed according to the publisher's robots.txt rules; false otherwise.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage robotsCompliant(Boolean robotsCompliant) {
            this.robotsCompliant = Optional.ofNullable(robotsCompliant);
            return this;
        }

        /**
         * <p>True if the article content can be safely accessed according to the publisher's robots.txt rules; false otherwise.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "robots_compliant", nulls = Nulls.SKIP)
        public _FinalStage robotsCompliant(Optional<Boolean> robotsCompliant) {
            this.robotsCompliant = robotsCompliant;
            return this;
        }

        @java.lang.Override
        public _FinalStage nlp(NlpDataEntity nlp) {
            this.nlp = Optional.ofNullable(nlp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nlp", nulls = Nulls.SKIP)
        public _FinalStage nlp(Optional<NlpDataEntity> nlp) {
            this.nlp = nlp;
            return this;
        }

        /**
         * <p>A list of all domain URLs mentioned in the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allDomainLinks(BreakingNewsArticleEntityAllDomainLinks allDomainLinks) {
            this.allDomainLinks = Optional.ofNullable(allDomainLinks);
            return this;
        }

        /**
         * <p>A list of all domain URLs mentioned in the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "all_domain_links", nulls = Nulls.SKIP)
        public _FinalStage allDomainLinks(Optional<BreakingNewsArticleEntityAllDomainLinks> allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }

        /**
         * <p>A list of all URLs mentioned in the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allLinks(BreakingNewsArticleEntityAllLinks allLinks) {
            this.allLinks = Optional.ofNullable(allLinks);
            return this;
        }

        /**
         * <p>A list of all URLs mentioned in the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "all_links", nulls = Nulls.SKIP)
        public _FinalStage allLinks(Optional<BreakingNewsArticleEntityAllLinks> allLinks) {
            this.allLinks = allLinks;
            return this;
        }

        /**
         * <p>The Twitter account associated with the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage twitterAccount(String twitterAccount) {
            this.twitterAccount = Optional.ofNullable(twitterAccount);
            return this;
        }

        /**
         * <p>The Twitter account associated with the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "twitter_account", nulls = Nulls.SKIP)
        public _FinalStage twitterAccount(Optional<String> twitterAccount) {
            this.twitterAccount = twitterAccount;
            return this;
        }

        /**
         * <p>Indicates if the article is an opinion piece.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isOpinion(Boolean isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        /**
         * <p>Indicates if the article is an opinion piece.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public _FinalStage isOpinion(Optional<Boolean> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        /**
         * <p>The word count of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage wordCount(Integer wordCount) {
            this.wordCount = Optional.ofNullable(wordCount);
            return this;
        }

        /**
         * <p>The word count of the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "word_count", nulls = Nulls.SKIP)
        public _FinalStage wordCount(Optional<Integer> wordCount) {
            this.wordCount = wordCount;
            return this;
        }

        /**
         * <p>A brief description of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>A brief description of the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        /**
         * <p>The language in which the article is written.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>The language in which the article is written.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public _FinalStage language(Optional<String> language) {
            this.language = language;
            return this;
        }

        /**
         * <p>The media associated with the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage media(String media) {
            this.media = Optional.ofNullable(media);
            return this;
        }

        /**
         * <p>The media associated with the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "media", nulls = Nulls.SKIP)
        public _FinalStage media(Optional<String> media) {
            this.media = media;
            return this;
        }

        /**
         * <p>The rights information for the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rights(String rights) {
            this.rights = Optional.ofNullable(rights);
            return this;
        }

        /**
         * <p>The rights information for the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rights", nulls = Nulls.SKIP)
        public _FinalStage rights(Optional<String> rights) {
            this.rights = rights;
            return this;
        }

        /**
         * <p>The country where the article was published.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * <p>The country where the article was published.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public _FinalStage country(Optional<String> country) {
            this.country = country;
            return this;
        }

        /**
         * <p>Indicates if the article is paid content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paidContent(Boolean paidContent) {
            this.paidContent = Optional.ofNullable(paidContent);
            return this;
        }

        /**
         * <p>Indicates if the article is paid content.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paid_content", nulls = Nulls.SKIP)
        public _FinalStage paidContent(Optional<Boolean> paidContent) {
            this.paidContent = paidContent;
            return this;
        }

        /**
         * <p>Indicates if the article is a headline.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isHeadline(Boolean isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        /**
         * <p>Indicates if the article is a headline.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public _FinalStage isHeadline(Optional<Boolean> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        /**
         * <p>The name of the source where the article was published.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage nameSource(String nameSource) {
            this.nameSource = Optional.ofNullable(nameSource);
            return this;
        }

        /**
         * <p>The name of the source where the article was published.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name_source", nulls = Nulls.SKIP)
        public _FinalStage nameSource(Optional<String> nameSource) {
            this.nameSource = nameSource;
            return this;
        }

        /**
         * <p>The date the article was parsed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parseDate(String parseDate) {
            this.parseDate = Optional.ofNullable(parseDate);
            return this;
        }

        /**
         * <p>The date the article was parsed.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "parse_date", nulls = Nulls.SKIP)
        public _FinalStage parseDate(Optional<String> parseDate) {
            this.parseDate = parseDate;
            return this;
        }

        /**
         * <p>The precision of the updated date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedDatePrecision(String updatedDatePrecision) {
            this.updatedDatePrecision = Optional.ofNullable(updatedDatePrecision);
            return this;
        }

        /**
         * <p>The precision of the updated date.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_date_precision", nulls = Nulls.SKIP)
        public _FinalStage updatedDatePrecision(Optional<String> updatedDatePrecision) {
            this.updatedDatePrecision = updatedDatePrecision;
            return this;
        }

        /**
         * <p>The date the article was last updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedDate(String updatedDate) {
            this.updatedDate = Optional.ofNullable(updatedDate);
            return this;
        }

        /**
         * <p>The date the article was last updated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_date", nulls = Nulls.SKIP)
        public _FinalStage updatedDate(Optional<String> updatedDate) {
            this.updatedDate = updatedDate;
            return this;
        }

        /**
         * <p>The precision of the published date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage publishedDatePrecision(String publishedDatePrecision) {
            this.publishedDatePrecision = Optional.ofNullable(publishedDatePrecision);
            return this;
        }

        /**
         * <p>The precision of the published date.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "published_date_precision", nulls = Nulls.SKIP)
        public _FinalStage publishedDatePrecision(Optional<String> publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return this;
        }

        /**
         * <p>The date the article was published.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage publishedDate(String publishedDate) {
            this.publishedDate = Optional.ofNullable(publishedDate);
            return this;
        }

        /**
         * <p>The date the article was published.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "published_date", nulls = Nulls.SKIP)
        public _FinalStage publishedDate(Optional<String> publishedDate) {
            this.publishedDate = publishedDate;
            return this;
        }

        /**
         * <p>A list of journalists associated with the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage journalists(Journalists journalists) {
            this.journalists = Optional.ofNullable(journalists);
            return this;
        }

        /**
         * <p>A list of journalists associated with the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "journalists", nulls = Nulls.SKIP)
        public _FinalStage journalists(Optional<Journalists> journalists) {
            this.journalists = journalists;
            return this;
        }

        /**
         * <p>A list of authors of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage authors(Authors authors) {
            this.authors = Optional.ofNullable(authors);
            return this;
        }

        /**
         * <p>A list of authors of the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "authors", nulls = Nulls.SKIP)
        public _FinalStage authors(Optional<Authors> authors) {
            this.authors = authors;
            return this;
        }

        /**
         * <p>The primary author of the article.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage author(String author) {
            this.author = Optional.ofNullable(author);
            return this;
        }

        /**
         * <p>The primary author of the article.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "author", nulls = Nulls.SKIP)
        public _FinalStage author(Optional<String> author) {
            this.author = author;
            return this;
        }

        @java.lang.Override
        public BreakingNewsArticleEntity build() {
            return new BreakingNewsArticleEntity(
                    title,
                    author,
                    authors,
                    journalists,
                    publishedDate,
                    publishedDatePrecision,
                    updatedDate,
                    updatedDatePrecision,
                    parseDate,
                    link,
                    domainUrl,
                    fullDomainUrl,
                    nameSource,
                    isHeadline,
                    paidContent,
                    parentUrl,
                    country,
                    rights,
                    rank,
                    media,
                    language,
                    description,
                    content,
                    wordCount,
                    isOpinion,
                    twitterAccount,
                    allLinks,
                    allDomainLinks,
                    nlp,
                    id,
                    score,
                    robotsCompliant,
                    additionalProperties);
        }
    }
}
