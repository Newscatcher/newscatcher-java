/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SourceInfo.Builder.class)
public final class SourceInfo {
    private final Optional<String> nameSource;

    private final String domainUrl;

    private final Optional<String> logo;

    private final Optional<AdditionalSourceInfo> additionalInfo;

    private final Map<String, Object> additionalProperties;

    private SourceInfo(
            Optional<String> nameSource,
            String domainUrl,
            Optional<String> logo,
            Optional<AdditionalSourceInfo> additionalInfo,
            Map<String, Object> additionalProperties) {
        this.nameSource = nameSource;
        this.domainUrl = domainUrl;
        this.logo = logo;
        this.additionalInfo = additionalInfo;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the news source.
     */
    @JsonProperty("name_source")
    public Optional<String> getNameSource() {
        return nameSource;
    }

    /**
     * @return The domain URL of the news source.
     */
    @JsonProperty("domain_url")
    public String getDomainUrl() {
        return domainUrl;
    }

    /**
     * @return The logo of the news source.
     */
    @JsonProperty("logo")
    public Optional<String> getLogo() {
        return logo;
    }

    @JsonProperty("additional_info")
    public Optional<AdditionalSourceInfo> getAdditionalInfo() {
        return additionalInfo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourceInfo && equalTo((SourceInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourceInfo other) {
        return nameSource.equals(other.nameSource)
                && domainUrl.equals(other.domainUrl)
                && logo.equals(other.logo)
                && additionalInfo.equals(other.additionalInfo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nameSource, this.domainUrl, this.logo, this.additionalInfo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DomainUrlStage builder() {
        return new Builder();
    }

    public interface DomainUrlStage {
        _FinalStage domainUrl(@NotNull String domainUrl);

        Builder from(SourceInfo other);
    }

    public interface _FinalStage {
        SourceInfo build();

        _FinalStage nameSource(Optional<String> nameSource);

        _FinalStage nameSource(String nameSource);

        _FinalStage logo(Optional<String> logo);

        _FinalStage logo(String logo);

        _FinalStage additionalInfo(Optional<AdditionalSourceInfo> additionalInfo);

        _FinalStage additionalInfo(AdditionalSourceInfo additionalInfo);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DomainUrlStage, _FinalStage {
        private String domainUrl;

        private Optional<AdditionalSourceInfo> additionalInfo = Optional.empty();

        private Optional<String> logo = Optional.empty();

        private Optional<String> nameSource = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SourceInfo other) {
            nameSource(other.getNameSource());
            domainUrl(other.getDomainUrl());
            logo(other.getLogo());
            additionalInfo(other.getAdditionalInfo());
            return this;
        }

        /**
         * <p>The domain URL of the news source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("domain_url")
        public _FinalStage domainUrl(@NotNull String domainUrl) {
            this.domainUrl = Objects.requireNonNull(domainUrl, "domainUrl must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage additionalInfo(AdditionalSourceInfo additionalInfo) {
            this.additionalInfo = Optional.ofNullable(additionalInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "additional_info", nulls = Nulls.SKIP)
        public _FinalStage additionalInfo(Optional<AdditionalSourceInfo> additionalInfo) {
            this.additionalInfo = additionalInfo;
            return this;
        }

        /**
         * <p>The logo of the news source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage logo(String logo) {
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "logo", nulls = Nulls.SKIP)
        public _FinalStage logo(Optional<String> logo) {
            this.logo = logo;
            return this;
        }

        /**
         * <p>The name of the news source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage nameSource(String nameSource) {
            this.nameSource = Optional.ofNullable(nameSource);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name_source", nulls = Nulls.SKIP)
        public _FinalStage nameSource(Optional<String> nameSource) {
            this.nameSource = nameSource;
            return this;
        }

        @java.lang.Override
        public SourceInfo build() {
            return new SourceInfo(nameSource, domainUrl, logo, additionalInfo, additionalProperties);
        }
    }
}
