/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchlink;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.MediaTypes;
import com.newscatcher.api.core.NewscatcherApiApiException;
import com.newscatcher.api.core.NewscatcherApiException;
import com.newscatcher.api.core.NewscatcherApiHttpResponse;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.core.QueryStringMapper;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.errors.BadRequestError;
import com.newscatcher.api.errors.ForbiddenError;
import com.newscatcher.api.errors.InternalServerError;
import com.newscatcher.api.errors.RequestTimeoutError;
import com.newscatcher.api.errors.TooManyRequestsError;
import com.newscatcher.api.errors.UnauthorizedError;
import com.newscatcher.api.errors.UnprocessableEntityError;
import com.newscatcher.api.resources.searchlink.requests.SearchUrlGetRequest;
import com.newscatcher.api.resources.searchlink.requests.SearchUrlPostRequest;
import com.newscatcher.api.types.Error;
import com.newscatcher.api.types.SearchResponseDto;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawSearchLinkClient {
    protected final ClientOptions clientOptions;

    public AsyncRawSearchLinkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Searches for articles based on specified links or IDs. You can filter results by date range.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> searchUrlGet() {
        return searchUrlGet(SearchUrlGetRequest.builder().build());
    }

    /**
     * Searches for articles based on specified links or IDs. You can filter results by date range.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> searchUrlGet(SearchUrlGetRequest request) {
        return searchUrlGet(request, null);
    }

    /**
     * Searches for articles based on specified links or IDs. You can filter results by date range.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> searchUrlGet(
            SearchUrlGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/search_by_link");
        if (request.getIds().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "ids", request.getIds().get(), false);
        }
        if (request.getLinks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "links", request.getLinks().get(), false);
        }
        if (request.getFrom().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "from_", request.getFrom().get(), false);
        }
        if (request.getTo().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "to_", request.getTo().get(), false);
        }
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get(), false);
        }
        if (request.getPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page_size", request.getPageSize().get(), false);
        }
        if (request.getRobotsCompliant().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "robots_compliant", request.getRobotsCompliant().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new NewscatcherApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchResponseDto.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 403:
                                future.completeExceptionally(new ForbiddenError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 408:
                                future.completeExceptionally(new RequestTimeoutError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 422:
                                future.completeExceptionally(new UnprocessableEntityError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, String.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new NewscatcherApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new NewscatcherApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new NewscatcherApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Searches for articles using their ID(s) or link(s).
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> searchUrlPost() {
        return searchUrlPost(SearchUrlPostRequest.builder().build());
    }

    /**
     * Searches for articles using their ID(s) or link(s).
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> searchUrlPost(
            SearchUrlPostRequest request) {
        return searchUrlPost(request, null);
    }

    /**
     * Searches for articles using their ID(s) or link(s).
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> searchUrlPost(
            SearchUrlPostRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/search_by_link")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new NewscatcherApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<NewscatcherApiHttpResponse<SearchResponseDto>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new NewscatcherApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchResponseDto.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 403:
                                future.completeExceptionally(new ForbiddenError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 408:
                                future.completeExceptionally(new RequestTimeoutError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 422:
                                future.completeExceptionally(new UnprocessableEntityError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, String.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new NewscatcherApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new NewscatcherApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new NewscatcherApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
