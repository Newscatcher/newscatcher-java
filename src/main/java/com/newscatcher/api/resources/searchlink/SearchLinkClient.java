/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchlink;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.MediaTypes;
import com.newscatcher.api.core.NewscatcherApiApiException;
import com.newscatcher.api.core.NewscatcherApiException;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.errors.UnprocessableEntityError;
import com.newscatcher.api.resources.searchlink.requests.SearchUrlGetRequest;
import com.newscatcher.api.resources.searchlink.requests.SearchUrlRequest;
import com.newscatcher.api.types.HttpValidationError;
import com.newscatcher.api.types.SearchResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class SearchLinkClient {
    protected final ClientOptions clientOptions;

    public SearchLinkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     */
    public SearchResponse searchUrlGet(SearchUrlGetRequest request) {
        return searchUrlGet(request, null);
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     */
    public SearchResponse searchUrlGet(SearchUrlGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/search_by_link");
        httpUrl.addQueryParameter("ids", request.getIds());
        httpUrl.addQueryParameter("links", request.getLinks());
        if (request.getFrom().isPresent()) {
            httpUrl.addQueryParameter("from_", request.getFrom().get());
        }
        if (request.getTo().isPresent()) {
            httpUrl.addQueryParameter("to_", request.getTo().get());
        }
        if (request.getPage().isPresent()) {
            httpUrl.addQueryParameter("page", request.getPage().get().toString());
        }
        if (request.getPageSize().isPresent()) {
            httpUrl.addQueryParameter("page_size", request.getPageSize().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new NewscatcherApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new NewscatcherApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     */
    public SearchResponse searchUrlPost() {
        return searchUrlPost(SearchUrlRequest.builder().build());
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     */
    public SearchResponse searchUrlPost(SearchUrlRequest request) {
        return searchUrlPost(request, null);
    }

    /**
     * This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).
     */
    public SearchResponse searchUrlPost(SearchUrlRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/search_by_link")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new NewscatcherApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new NewscatcherApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new NewscatcherApiException("Network error executing HTTP request", e);
        }
    }
}
