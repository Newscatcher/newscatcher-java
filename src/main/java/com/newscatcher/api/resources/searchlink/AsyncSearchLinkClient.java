/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchlink;

import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.resources.searchlink.requests.SearchUrlGetRequest;
import com.newscatcher.api.resources.searchlink.requests.SearchUrlPostRequest;
import com.newscatcher.api.types.SearchResponseDto;
import java.util.concurrent.CompletableFuture;

public class AsyncSearchLinkClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawSearchLinkClient rawClient;

    public AsyncSearchLinkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawSearchLinkClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawSearchLinkClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Searches for articles based on specified links or IDs. You can filter results by date range.
     */
    public CompletableFuture<SearchResponseDto> searchUrlGet() {
        return this.rawClient.searchUrlGet().thenApply(response -> response.body());
    }

    /**
     * Searches for articles based on specified links or IDs. You can filter results by date range.
     */
    public CompletableFuture<SearchResponseDto> searchUrlGet(SearchUrlGetRequest request) {
        return this.rawClient.searchUrlGet(request).thenApply(response -> response.body());
    }

    /**
     * Searches for articles based on specified links or IDs. You can filter results by date range.
     */
    public CompletableFuture<SearchResponseDto> searchUrlGet(
            SearchUrlGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.searchUrlGet(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Searches for articles using their ID(s) or link(s).
     */
    public CompletableFuture<SearchResponseDto> searchUrlPost() {
        return this.rawClient.searchUrlPost().thenApply(response -> response.body());
    }

    /**
     * Searches for articles using their ID(s) or link(s).
     */
    public CompletableFuture<SearchResponseDto> searchUrlPost(SearchUrlPostRequest request) {
        return this.rawClient.searchUrlPost(request).thenApply(response -> response.body());
    }

    /**
     * Searches for articles using their ID(s) or link(s).
     */
    public CompletableFuture<SearchResponseDto> searchUrlPost(
            SearchUrlPostRequest request, RequestOptions requestOptions) {
        return this.rawClient.searchUrlPost(request, requestOptions).thenApply(response -> response.body());
    }
}
