/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchlink.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.types.From;
import com.newscatcher.api.types.To;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchUrlGetRequest.Builder.class)
public final class SearchUrlGetRequest {
    private final Optional<String> ids;

    private final Optional<String> links;

    private final Optional<From> from;

    private final Optional<To> to;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Map<String, Object> additionalProperties;

    private SearchUrlGetRequest(
            Optional<String> ids,
            Optional<String> links,
            Optional<From> from,
            Optional<To> to,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Map<String, Object> additionalProperties) {
        this.ids = ids;
        this.links = links;
        this.from = from;
        this.to = to;
        this.page = page;
        this.pageSize = pageSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Newscatcher article ID (corresponds to the <code>_id</code> field in API response) or a list of article IDs to search for. To specify multiple IDs, use a comma-separated string.
     * <p>Example: <code>&quot;1234567890abcdef, abcdef1234567890&quot;</code></p>
     * <p><strong>Caution</strong>: You can use either the <code>links</code> or the <code>ids</code> parameter, but not both at the same time.</p>
     */
    @JsonProperty("ids")
    public Optional<String> getIds() {
        return ids;
    }

    /**
     * @return The article link or list of article links to search for. To specify multiple links, use a comma-separated string.
     * <p>Example: <code>&quot;https://example.com/article1, https://example.com/article2&quot;</code></p>
     * <p><strong>Caution</strong>: You can use either the <code>links</code> or the <code>ids</code> parameter, but not both at the same time.</p>
     */
    @JsonProperty("links")
    public Optional<String> getLinks() {
        return links;
    }

    @JsonProperty("from_")
    public Optional<From> getFrom() {
        return from;
    }

    @JsonProperty("to_")
    public Optional<To> getTo() {
        return to;
    }

    /**
     * @return The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.
     * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The number of articles to return per page.
     */
    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchUrlGetRequest && equalTo((SearchUrlGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchUrlGetRequest other) {
        return ids.equals(other.ids)
                && links.equals(other.links)
                && from.equals(other.from)
                && to.equals(other.to)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ids, this.links, this.from, this.to, this.page, this.pageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> ids = Optional.empty();

        private Optional<String> links = Optional.empty();

        private Optional<From> from = Optional.empty();

        private Optional<To> to = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchUrlGetRequest other) {
            ids(other.getIds());
            links(other.getLinks());
            from(other.getFrom());
            to(other.getTo());
            page(other.getPage());
            pageSize(other.getPageSize());
            return this;
        }

        @JsonSetter(value = "ids", nulls = Nulls.SKIP)
        public Builder ids(Optional<String> ids) {
            this.ids = ids;
            return this;
        }

        public Builder ids(String ids) {
            this.ids = Optional.ofNullable(ids);
            return this;
        }

        @JsonSetter(value = "links", nulls = Nulls.SKIP)
        public Builder links(Optional<String> links) {
            this.links = links;
            return this;
        }

        public Builder links(String links) {
            this.links = Optional.ofNullable(links);
            return this;
        }

        @JsonSetter(value = "from_", nulls = Nulls.SKIP)
        public Builder from(Optional<From> from) {
            this.from = from;
            return this;
        }

        public Builder from(From from) {
            this.from = Optional.ofNullable(from);
            return this;
        }

        @JsonSetter(value = "to_", nulls = Nulls.SKIP)
        public Builder to(Optional<To> to) {
            this.to = to;
            return this;
        }

        public Builder to(To to) {
            this.to = Optional.ofNullable(to);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        public SearchUrlGetRequest build() {
            return new SearchUrlGetRequest(ids, links, from, to, page, pageSize, additionalProperties);
        }
    }
}
