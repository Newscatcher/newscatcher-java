/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchsimilar;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.MediaTypes;
import com.newscatcher.api.core.NewscatcherApiApiException;
import com.newscatcher.api.core.NewscatcherApiException;
import com.newscatcher.api.core.NewscatcherApiHttpResponse;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.core.QueryStringMapper;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.errors.BadRequestError;
import com.newscatcher.api.errors.ForbiddenError;
import com.newscatcher.api.errors.InternalServerError;
import com.newscatcher.api.errors.RequestTimeoutError;
import com.newscatcher.api.errors.TooManyRequestsError;
import com.newscatcher.api.errors.UnauthorizedError;
import com.newscatcher.api.errors.UnprocessableEntityError;
import com.newscatcher.api.resources.searchsimilar.requests.SearchSimilarGetRequest;
import com.newscatcher.api.resources.searchsimilar.requests.SearchSimilarPostRequest;
import com.newscatcher.api.resources.searchsimilar.types.SearchSimilarGetResponse;
import com.newscatcher.api.resources.searchsimilar.types.SearchSimilarPostResponse;
import com.newscatcher.api.types.Error;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawSearchsimilarClient {
    protected final ClientOptions clientOptions;

    public AsyncRawSearchsimilarClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Searches for articles similar to a specified query.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchSimilarGetResponse>> get(
            SearchSimilarGetRequest request) {
        return get(request, null);
    }

    /**
     * Searches for articles similar to a specified query.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchSimilarGetResponse>> get(
            SearchSimilarGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/search_similar");
        QueryStringMapper.addQueryParameter(httpUrl, "q", request.getQ(), false);
        if (request.getSearchIn().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search_in", request.getSearchIn().get(), false);
        }
        if (request.getIncludeTranslationFields().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_translation_fields",
                    request.getIncludeTranslationFields().get(),
                    false);
        }
        if (request.getIncludeSimilarDocuments().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_similar_documents",
                    request.getIncludeSimilarDocuments().get(),
                    false);
        }
        if (request.getSimilarDocumentsNumber().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "similar_documents_number",
                    request.getSimilarDocumentsNumber().get(),
                    false);
        }
        if (request.getSimilarDocumentsFields().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "similar_documents_fields",
                    request.getSimilarDocumentsFields().get(),
                    false);
        }
        if (request.getPredefinedSources().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "predefined_sources",
                    request.getPredefinedSources().get(),
                    false);
        }
        if (request.getSources().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sources", request.getSources().get(), false);
        }
        if (request.getNotSources().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "not_sources", request.getNotSources().get(), false);
        }
        if (request.getLang().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "lang", request.getLang().get(), false);
        }
        if (request.getNotLang().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "not_lang", request.getNotLang().get(), false);
        }
        if (request.getCountries().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "countries", request.getCountries().get(), false);
        }
        if (request.getNotCountries().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "not_countries", request.getNotCountries().get(), false);
        }
        if (request.getFrom().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "from_", request.getFrom().get(), false);
        }
        if (request.getTo().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "to_", request.getTo().get(), false);
        }
        if (request.getByParseDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "by_parse_date", request.getByParseDate().get(), false);
        }
        if (request.getPublishedDatePrecision().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "published_date_precision",
                    request.getPublishedDatePrecision().get(),
                    false);
        }
        if (request.getSortBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_by", request.getSortBy().get(), false);
        }
        if (request.getRankedOnly().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "ranked_only", request.getRankedOnly().get(), false);
        }
        if (request.getFromRank().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "from_rank", request.getFromRank().get(), false);
        }
        if (request.getToRank().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "to_rank", request.getToRank().get(), false);
        }
        if (request.getIsHeadline().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "is_headline", request.getIsHeadline().get(), false);
        }
        if (request.getIsOpinion().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "is_opinion", request.getIsOpinion().get(), false);
        }
        if (request.getIsPaidContent().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "is_paid_content", request.getIsPaidContent().get(), false);
        }
        if (request.getParentUrl().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "parent_url", request.getParentUrl().get(), false);
        }
        if (request.getAllLinks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "all_links", request.getAllLinks().get(), false);
        }
        if (request.getAllDomainLinks().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "all_domain_links", request.getAllDomainLinks().get(), false);
        }
        if (request.getWordCountMin().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "word_count_min", request.getWordCountMin().get(), false);
        }
        if (request.getWordCountMax().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "word_count_max", request.getWordCountMax().get(), false);
        }
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get(), false);
        }
        if (request.getPageSize().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page_size", request.getPageSize().get(), false);
        }
        if (request.getIncludeNlpData().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "include_nlp_data", request.getIncludeNlpData().get(), false);
        }
        if (request.getHasNlp().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "has_nlp", request.getHasNlp().get(), false);
        }
        if (request.getTheme().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "theme", request.getTheme().get(), false);
        }
        if (request.getNotTheme().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "not_theme", request.getNotTheme().get(), false);
        }
        if (request.getNerName().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "ner_name", request.getNerName().get(), false);
        }
        if (request.getTitleSentimentMin().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "title_sentiment_min",
                    request.getTitleSentimentMin().get(),
                    false);
        }
        if (request.getTitleSentimentMax().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "title_sentiment_max",
                    request.getTitleSentimentMax().get(),
                    false);
        }
        if (request.getContentSentimentMin().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "content_sentiment_min",
                    request.getContentSentimentMin().get(),
                    false);
        }
        if (request.getContentSentimentMax().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "content_sentiment_max",
                    request.getContentSentimentMax().get(),
                    false);
        }
        if (request.getIptcTags().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "iptc_tags", request.getIptcTags().get(), false);
        }
        if (request.getNotIptcTags().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "not_iptc_tags", request.getNotIptcTags().get(), false);
        }
        if (request.getCustomTags().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "custom_tags", request.getCustomTags().get(), false);
        }
        if (request.getRobotsCompliant().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "robots_compliant", request.getRobotsCompliant().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<NewscatcherApiHttpResponse<SearchSimilarGetResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new NewscatcherApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), SearchSimilarGetResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 403:
                                future.completeExceptionally(new ForbiddenError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 408:
                                future.completeExceptionally(new RequestTimeoutError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 422:
                                future.completeExceptionally(new UnprocessableEntityError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, String.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new NewscatcherApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new NewscatcherApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new NewscatcherApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Searches for articles similar to the specified query. You can filter results by language, country, source, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchSimilarPostResponse>> post(
            SearchSimilarPostRequest request) {
        return post(request, null);
    }

    /**
     * Searches for articles similar to the specified query. You can filter results by language, country, source, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SearchSimilarPostResponse>> post(
            SearchSimilarPostRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/search_similar")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new NewscatcherApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<NewscatcherApiHttpResponse<SearchSimilarPostResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new NewscatcherApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), SearchSimilarPostResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 403:
                                future.completeExceptionally(new ForbiddenError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 408:
                                future.completeExceptionally(new RequestTimeoutError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 422:
                                future.completeExceptionally(new UnprocessableEntityError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, String.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new NewscatcherApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new NewscatcherApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new NewscatcherApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
