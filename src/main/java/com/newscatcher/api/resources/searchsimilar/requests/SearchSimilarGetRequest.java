/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchsimilar.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchSimilarGetRequest.Builder.class)
public final class SearchSimilarGetRequest {
    private final String q;

    private final Optional<String> searchIn;

    private final Optional<Boolean> includeSimilarDocuments;

    private final Optional<Integer> similarDocumentsNumber;

    private final Optional<String> similarDocumentsFields;

    private final String predefinedSources;

    private final String sources;

    private final String notSources;

    private final String lang;

    private final String notLang;

    private final String countries;

    private final String notCountries;

    private final Optional<String> from;

    private final Optional<String> to;

    private final Optional<Boolean> byParseDate;

    private final Optional<String> publishedDatePrecision;

    private final Optional<String> sortBy;

    private final Optional<String> rankedOnly;

    private final Optional<Integer> fromRank;

    private final Optional<Integer> toRank;

    private final Optional<Boolean> isHeadline;

    private final Optional<Boolean> isOpinion;

    private final Optional<Boolean> isPaidContent;

    private final String parentUrl;

    private final String allLinks;

    private final String allDomainLinks;

    private final Optional<Integer> wordCountMin;

    private final Optional<Integer> wordCountMax;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<String> theme;

    private final Optional<String> notTheme;

    private final Optional<Double> titleSentimentMin;

    private final Optional<Double> titleSentimentMax;

    private final Optional<Double> contentSentimentMin;

    private final Optional<Double> contentSentimentMax;

    private final String iptcTags;

    private final String notIptcTags;

    private final Map<String, Object> additionalProperties;

    private SearchSimilarGetRequest(
            String q,
            Optional<String> searchIn,
            Optional<Boolean> includeSimilarDocuments,
            Optional<Integer> similarDocumentsNumber,
            Optional<String> similarDocumentsFields,
            String predefinedSources,
            String sources,
            String notSources,
            String lang,
            String notLang,
            String countries,
            String notCountries,
            Optional<String> from,
            Optional<String> to,
            Optional<Boolean> byParseDate,
            Optional<String> publishedDatePrecision,
            Optional<String> sortBy,
            Optional<String> rankedOnly,
            Optional<Integer> fromRank,
            Optional<Integer> toRank,
            Optional<Boolean> isHeadline,
            Optional<Boolean> isOpinion,
            Optional<Boolean> isPaidContent,
            String parentUrl,
            String allLinks,
            String allDomainLinks,
            Optional<Integer> wordCountMin,
            Optional<Integer> wordCountMax,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<String> theme,
            Optional<String> notTheme,
            Optional<Double> titleSentimentMin,
            Optional<Double> titleSentimentMax,
            Optional<Double> contentSentimentMin,
            Optional<Double> contentSentimentMax,
            String iptcTags,
            String notIptcTags,
            Map<String, Object> additionalProperties) {
        this.q = q;
        this.searchIn = searchIn;
        this.includeSimilarDocuments = includeSimilarDocuments;
        this.similarDocumentsNumber = similarDocumentsNumber;
        this.similarDocumentsFields = similarDocumentsFields;
        this.predefinedSources = predefinedSources;
        this.sources = sources;
        this.notSources = notSources;
        this.lang = lang;
        this.notLang = notLang;
        this.countries = countries;
        this.notCountries = notCountries;
        this.from = from;
        this.to = to;
        this.byParseDate = byParseDate;
        this.publishedDatePrecision = publishedDatePrecision;
        this.sortBy = sortBy;
        this.rankedOnly = rankedOnly;
        this.fromRank = fromRank;
        this.toRank = toRank;
        this.isHeadline = isHeadline;
        this.isOpinion = isOpinion;
        this.isPaidContent = isPaidContent;
        this.parentUrl = parentUrl;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.wordCountMin = wordCountMin;
        this.wordCountMax = wordCountMax;
        this.page = page;
        this.pageSize = pageSize;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.iptcTags = iptcTags;
        this.notIptcTags = notIptcTags;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("q")
    public String getQ() {
        return q;
    }

    @JsonProperty("search_in")
    public Optional<String> getSearchIn() {
        return searchIn;
    }

    @JsonProperty("include_similar_documents")
    public Optional<Boolean> getIncludeSimilarDocuments() {
        return includeSimilarDocuments;
    }

    @JsonProperty("similar_documents_number")
    public Optional<Integer> getSimilarDocumentsNumber() {
        return similarDocumentsNumber;
    }

    @JsonProperty("similar_documents_fields")
    public Optional<String> getSimilarDocumentsFields() {
        return similarDocumentsFields;
    }

    @JsonProperty("predefined_sources")
    public String getPredefinedSources() {
        return predefinedSources;
    }

    @JsonProperty("sources")
    public String getSources() {
        return sources;
    }

    @JsonProperty("not_sources")
    public String getNotSources() {
        return notSources;
    }

    @JsonProperty("lang")
    public String getLang() {
        return lang;
    }

    @JsonProperty("not_lang")
    public String getNotLang() {
        return notLang;
    }

    @JsonProperty("countries")
    public String getCountries() {
        return countries;
    }

    @JsonProperty("not_countries")
    public String getNotCountries() {
        return notCountries;
    }

    @JsonProperty("from_")
    public Optional<String> getFrom() {
        return from;
    }

    @JsonProperty("to_")
    public Optional<String> getTo() {
        return to;
    }

    @JsonProperty("by_parse_date")
    public Optional<Boolean> getByParseDate() {
        return byParseDate;
    }

    @JsonProperty("published_date_precision")
    public Optional<String> getPublishedDatePrecision() {
        return publishedDatePrecision;
    }

    @JsonProperty("sort_by")
    public Optional<String> getSortBy() {
        return sortBy;
    }

    @JsonProperty("ranked_only")
    public Optional<String> getRankedOnly() {
        return rankedOnly;
    }

    @JsonProperty("from_rank")
    public Optional<Integer> getFromRank() {
        return fromRank;
    }

    @JsonProperty("to_rank")
    public Optional<Integer> getToRank() {
        return toRank;
    }

    @JsonProperty("is_headline")
    public Optional<Boolean> getIsHeadline() {
        return isHeadline;
    }

    @JsonProperty("is_opinion")
    public Optional<Boolean> getIsOpinion() {
        return isOpinion;
    }

    @JsonProperty("is_paid_content")
    public Optional<Boolean> getIsPaidContent() {
        return isPaidContent;
    }

    @JsonProperty("parent_url")
    public String getParentUrl() {
        return parentUrl;
    }

    @JsonProperty("all_links")
    public String getAllLinks() {
        return allLinks;
    }

    @JsonProperty("all_domain_links")
    public String getAllDomainLinks() {
        return allDomainLinks;
    }

    @JsonProperty("word_count_min")
    public Optional<Integer> getWordCountMin() {
        return wordCountMin;
    }

    @JsonProperty("word_count_max")
    public Optional<Integer> getWordCountMax() {
        return wordCountMax;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    @JsonProperty("theme")
    public Optional<String> getTheme() {
        return theme;
    }

    @JsonProperty("not_theme")
    public Optional<String> getNotTheme() {
        return notTheme;
    }

    @JsonProperty("title_sentiment_min")
    public Optional<Double> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    @JsonProperty("title_sentiment_max")
    public Optional<Double> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    @JsonProperty("content_sentiment_min")
    public Optional<Double> getContentSentimentMin() {
        return contentSentimentMin;
    }

    @JsonProperty("content_sentiment_max")
    public Optional<Double> getContentSentimentMax() {
        return contentSentimentMax;
    }

    @JsonProperty("iptc_tags")
    public String getIptcTags() {
        return iptcTags;
    }

    @JsonProperty("not_iptc_tags")
    public String getNotIptcTags() {
        return notIptcTags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchSimilarGetRequest && equalTo((SearchSimilarGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchSimilarGetRequest other) {
        return q.equals(other.q)
                && searchIn.equals(other.searchIn)
                && includeSimilarDocuments.equals(other.includeSimilarDocuments)
                && similarDocumentsNumber.equals(other.similarDocumentsNumber)
                && similarDocumentsFields.equals(other.similarDocumentsFields)
                && predefinedSources.equals(other.predefinedSources)
                && sources.equals(other.sources)
                && notSources.equals(other.notSources)
                && lang.equals(other.lang)
                && notLang.equals(other.notLang)
                && countries.equals(other.countries)
                && notCountries.equals(other.notCountries)
                && from.equals(other.from)
                && to.equals(other.to)
                && byParseDate.equals(other.byParseDate)
                && publishedDatePrecision.equals(other.publishedDatePrecision)
                && sortBy.equals(other.sortBy)
                && rankedOnly.equals(other.rankedOnly)
                && fromRank.equals(other.fromRank)
                && toRank.equals(other.toRank)
                && isHeadline.equals(other.isHeadline)
                && isOpinion.equals(other.isOpinion)
                && isPaidContent.equals(other.isPaidContent)
                && parentUrl.equals(other.parentUrl)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && wordCountMin.equals(other.wordCountMin)
                && wordCountMax.equals(other.wordCountMax)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && iptcTags.equals(other.iptcTags)
                && notIptcTags.equals(other.notIptcTags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.q,
                this.searchIn,
                this.includeSimilarDocuments,
                this.similarDocumentsNumber,
                this.similarDocumentsFields,
                this.predefinedSources,
                this.sources,
                this.notSources,
                this.lang,
                this.notLang,
                this.countries,
                this.notCountries,
                this.from,
                this.to,
                this.byParseDate,
                this.publishedDatePrecision,
                this.sortBy,
                this.rankedOnly,
                this.fromRank,
                this.toRank,
                this.isHeadline,
                this.isOpinion,
                this.isPaidContent,
                this.parentUrl,
                this.allLinks,
                this.allDomainLinks,
                this.wordCountMin,
                this.wordCountMax,
                this.page,
                this.pageSize,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.iptcTags,
                this.notIptcTags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QStage builder() {
        return new Builder();
    }

    public interface QStage {
        PredefinedSourcesStage q(@NotNull String q);

        Builder from(SearchSimilarGetRequest other);
    }

    public interface PredefinedSourcesStage {
        SourcesStage predefinedSources(@NotNull String predefinedSources);
    }

    public interface SourcesStage {
        NotSourcesStage sources(@NotNull String sources);
    }

    public interface NotSourcesStage {
        LangStage notSources(@NotNull String notSources);
    }

    public interface LangStage {
        NotLangStage lang(@NotNull String lang);
    }

    public interface NotLangStage {
        CountriesStage notLang(@NotNull String notLang);
    }

    public interface CountriesStage {
        NotCountriesStage countries(@NotNull String countries);
    }

    public interface NotCountriesStage {
        ParentUrlStage notCountries(@NotNull String notCountries);
    }

    public interface ParentUrlStage {
        AllLinksStage parentUrl(@NotNull String parentUrl);
    }

    public interface AllLinksStage {
        AllDomainLinksStage allLinks(@NotNull String allLinks);
    }

    public interface AllDomainLinksStage {
        IptcTagsStage allDomainLinks(@NotNull String allDomainLinks);
    }

    public interface IptcTagsStage {
        NotIptcTagsStage iptcTags(@NotNull String iptcTags);
    }

    public interface NotIptcTagsStage {
        _FinalStage notIptcTags(@NotNull String notIptcTags);
    }

    public interface _FinalStage {
        SearchSimilarGetRequest build();

        _FinalStage searchIn(Optional<String> searchIn);

        _FinalStage searchIn(String searchIn);

        _FinalStage includeSimilarDocuments(Optional<Boolean> includeSimilarDocuments);

        _FinalStage includeSimilarDocuments(Boolean includeSimilarDocuments);

        _FinalStage similarDocumentsNumber(Optional<Integer> similarDocumentsNumber);

        _FinalStage similarDocumentsNumber(Integer similarDocumentsNumber);

        _FinalStage similarDocumentsFields(Optional<String> similarDocumentsFields);

        _FinalStage similarDocumentsFields(String similarDocumentsFields);

        _FinalStage from(Optional<String> from);

        _FinalStage from(String from);

        _FinalStage to(Optional<String> to);

        _FinalStage to(String to);

        _FinalStage byParseDate(Optional<Boolean> byParseDate);

        _FinalStage byParseDate(Boolean byParseDate);

        _FinalStage publishedDatePrecision(Optional<String> publishedDatePrecision);

        _FinalStage publishedDatePrecision(String publishedDatePrecision);

        _FinalStage sortBy(Optional<String> sortBy);

        _FinalStage sortBy(String sortBy);

        _FinalStage rankedOnly(Optional<String> rankedOnly);

        _FinalStage rankedOnly(String rankedOnly);

        _FinalStage fromRank(Optional<Integer> fromRank);

        _FinalStage fromRank(Integer fromRank);

        _FinalStage toRank(Optional<Integer> toRank);

        _FinalStage toRank(Integer toRank);

        _FinalStage isHeadline(Optional<Boolean> isHeadline);

        _FinalStage isHeadline(Boolean isHeadline);

        _FinalStage isOpinion(Optional<Boolean> isOpinion);

        _FinalStage isOpinion(Boolean isOpinion);

        _FinalStage isPaidContent(Optional<Boolean> isPaidContent);

        _FinalStage isPaidContent(Boolean isPaidContent);

        _FinalStage wordCountMin(Optional<Integer> wordCountMin);

        _FinalStage wordCountMin(Integer wordCountMin);

        _FinalStage wordCountMax(Optional<Integer> wordCountMax);

        _FinalStage wordCountMax(Integer wordCountMax);

        _FinalStage page(Optional<Integer> page);

        _FinalStage page(Integer page);

        _FinalStage pageSize(Optional<Integer> pageSize);

        _FinalStage pageSize(Integer pageSize);

        _FinalStage includeNlpData(Optional<Boolean> includeNlpData);

        _FinalStage includeNlpData(Boolean includeNlpData);

        _FinalStage hasNlp(Optional<Boolean> hasNlp);

        _FinalStage hasNlp(Boolean hasNlp);

        _FinalStage theme(Optional<String> theme);

        _FinalStage theme(String theme);

        _FinalStage notTheme(Optional<String> notTheme);

        _FinalStage notTheme(String notTheme);

        _FinalStage titleSentimentMin(Optional<Double> titleSentimentMin);

        _FinalStage titleSentimentMin(Double titleSentimentMin);

        _FinalStage titleSentimentMax(Optional<Double> titleSentimentMax);

        _FinalStage titleSentimentMax(Double titleSentimentMax);

        _FinalStage contentSentimentMin(Optional<Double> contentSentimentMin);

        _FinalStage contentSentimentMin(Double contentSentimentMin);

        _FinalStage contentSentimentMax(Optional<Double> contentSentimentMax);

        _FinalStage contentSentimentMax(Double contentSentimentMax);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements QStage,
                    PredefinedSourcesStage,
                    SourcesStage,
                    NotSourcesStage,
                    LangStage,
                    NotLangStage,
                    CountriesStage,
                    NotCountriesStage,
                    ParentUrlStage,
                    AllLinksStage,
                    AllDomainLinksStage,
                    IptcTagsStage,
                    NotIptcTagsStage,
                    _FinalStage {
        private String q;

        private String predefinedSources;

        private String sources;

        private String notSources;

        private String lang;

        private String notLang;

        private String countries;

        private String notCountries;

        private String parentUrl;

        private String allLinks;

        private String allDomainLinks;

        private String iptcTags;

        private String notIptcTags;

        private Optional<Double> contentSentimentMax = Optional.empty();

        private Optional<Double> contentSentimentMin = Optional.empty();

        private Optional<Double> titleSentimentMax = Optional.empty();

        private Optional<Double> titleSentimentMin = Optional.empty();

        private Optional<String> notTheme = Optional.empty();

        private Optional<String> theme = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> wordCountMax = Optional.empty();

        private Optional<Integer> wordCountMin = Optional.empty();

        private Optional<Boolean> isPaidContent = Optional.empty();

        private Optional<Boolean> isOpinion = Optional.empty();

        private Optional<Boolean> isHeadline = Optional.empty();

        private Optional<Integer> toRank = Optional.empty();

        private Optional<Integer> fromRank = Optional.empty();

        private Optional<String> rankedOnly = Optional.empty();

        private Optional<String> sortBy = Optional.empty();

        private Optional<String> publishedDatePrecision = Optional.empty();

        private Optional<Boolean> byParseDate = Optional.empty();

        private Optional<String> to = Optional.empty();

        private Optional<String> from = Optional.empty();

        private Optional<String> similarDocumentsFields = Optional.empty();

        private Optional<Integer> similarDocumentsNumber = Optional.empty();

        private Optional<Boolean> includeSimilarDocuments = Optional.empty();

        private Optional<String> searchIn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchSimilarGetRequest other) {
            q(other.getQ());
            searchIn(other.getSearchIn());
            includeSimilarDocuments(other.getIncludeSimilarDocuments());
            similarDocumentsNumber(other.getSimilarDocumentsNumber());
            similarDocumentsFields(other.getSimilarDocumentsFields());
            predefinedSources(other.getPredefinedSources());
            sources(other.getSources());
            notSources(other.getNotSources());
            lang(other.getLang());
            notLang(other.getNotLang());
            countries(other.getCountries());
            notCountries(other.getNotCountries());
            from(other.getFrom());
            to(other.getTo());
            byParseDate(other.getByParseDate());
            publishedDatePrecision(other.getPublishedDatePrecision());
            sortBy(other.getSortBy());
            rankedOnly(other.getRankedOnly());
            fromRank(other.getFromRank());
            toRank(other.getToRank());
            isHeadline(other.getIsHeadline());
            isOpinion(other.getIsOpinion());
            isPaidContent(other.getIsPaidContent());
            parentUrl(other.getParentUrl());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            wordCountMin(other.getWordCountMin());
            wordCountMax(other.getWordCountMax());
            page(other.getPage());
            pageSize(other.getPageSize());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            iptcTags(other.getIptcTags());
            notIptcTags(other.getNotIptcTags());
            return this;
        }

        @java.lang.Override
        @JsonSetter("q")
        public PredefinedSourcesStage q(@NotNull String q) {
            this.q = Objects.requireNonNull(q, "q must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("predefined_sources")
        public SourcesStage predefinedSources(@NotNull String predefinedSources) {
            this.predefinedSources = Objects.requireNonNull(predefinedSources, "predefinedSources must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("sources")
        public NotSourcesStage sources(@NotNull String sources) {
            this.sources = Objects.requireNonNull(sources, "sources must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("not_sources")
        public LangStage notSources(@NotNull String notSources) {
            this.notSources = Objects.requireNonNull(notSources, "notSources must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("lang")
        public NotLangStage lang(@NotNull String lang) {
            this.lang = Objects.requireNonNull(lang, "lang must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("not_lang")
        public CountriesStage notLang(@NotNull String notLang) {
            this.notLang = Objects.requireNonNull(notLang, "notLang must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("countries")
        public NotCountriesStage countries(@NotNull String countries) {
            this.countries = Objects.requireNonNull(countries, "countries must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("not_countries")
        public ParentUrlStage notCountries(@NotNull String notCountries) {
            this.notCountries = Objects.requireNonNull(notCountries, "notCountries must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("parent_url")
        public AllLinksStage parentUrl(@NotNull String parentUrl) {
            this.parentUrl = Objects.requireNonNull(parentUrl, "parentUrl must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("all_links")
        public AllDomainLinksStage allLinks(@NotNull String allLinks) {
            this.allLinks = Objects.requireNonNull(allLinks, "allLinks must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("all_domain_links")
        public IptcTagsStage allDomainLinks(@NotNull String allDomainLinks) {
            this.allDomainLinks = Objects.requireNonNull(allDomainLinks, "allDomainLinks must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("iptc_tags")
        public NotIptcTagsStage iptcTags(@NotNull String iptcTags) {
            this.iptcTags = Objects.requireNonNull(iptcTags, "iptcTags must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("not_iptc_tags")
        public _FinalStage notIptcTags(@NotNull String notIptcTags) {
            this.notIptcTags = Objects.requireNonNull(notIptcTags, "notIptcTags must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public _FinalStage contentSentimentMax(Optional<Double> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        @java.lang.Override
        public _FinalStage contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public _FinalStage contentSentimentMin(Optional<Double> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        @java.lang.Override
        public _FinalStage titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public _FinalStage titleSentimentMax(Optional<Double> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        @java.lang.Override
        public _FinalStage titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public _FinalStage titleSentimentMin(Optional<Double> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        @java.lang.Override
        public _FinalStage notTheme(String notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public _FinalStage notTheme(Optional<String> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        @java.lang.Override
        public _FinalStage theme(String theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public _FinalStage theme(Optional<String> theme) {
            this.theme = theme;
            return this;
        }

        @java.lang.Override
        public _FinalStage hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public _FinalStage hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        @java.lang.Override
        public _FinalStage includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public _FinalStage includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public _FinalStage pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        @java.lang.Override
        public _FinalStage page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public _FinalStage page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        @java.lang.Override
        public _FinalStage wordCountMax(Integer wordCountMax) {
            this.wordCountMax = Optional.ofNullable(wordCountMax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "word_count_max", nulls = Nulls.SKIP)
        public _FinalStage wordCountMax(Optional<Integer> wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }

        @java.lang.Override
        public _FinalStage wordCountMin(Integer wordCountMin) {
            this.wordCountMin = Optional.ofNullable(wordCountMin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "word_count_min", nulls = Nulls.SKIP)
        public _FinalStage wordCountMin(Optional<Integer> wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }

        @java.lang.Override
        public _FinalStage isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = Optional.ofNullable(isPaidContent);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_paid_content", nulls = Nulls.SKIP)
        public _FinalStage isPaidContent(Optional<Boolean> isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }

        @java.lang.Override
        public _FinalStage isOpinion(Boolean isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public _FinalStage isOpinion(Optional<Boolean> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        @java.lang.Override
        public _FinalStage isHeadline(Boolean isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public _FinalStage isHeadline(Optional<Boolean> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        @java.lang.Override
        public _FinalStage toRank(Integer toRank) {
            this.toRank = Optional.ofNullable(toRank);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "to_rank", nulls = Nulls.SKIP)
        public _FinalStage toRank(Optional<Integer> toRank) {
            this.toRank = toRank;
            return this;
        }

        @java.lang.Override
        public _FinalStage fromRank(Integer fromRank) {
            this.fromRank = Optional.ofNullable(fromRank);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "from_rank", nulls = Nulls.SKIP)
        public _FinalStage fromRank(Optional<Integer> fromRank) {
            this.fromRank = fromRank;
            return this;
        }

        @java.lang.Override
        public _FinalStage rankedOnly(String rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public _FinalStage rankedOnly(Optional<String> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        @java.lang.Override
        public _FinalStage sortBy(String sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sort_by", nulls = Nulls.SKIP)
        public _FinalStage sortBy(Optional<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        @java.lang.Override
        public _FinalStage publishedDatePrecision(String publishedDatePrecision) {
            this.publishedDatePrecision = Optional.ofNullable(publishedDatePrecision);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "published_date_precision", nulls = Nulls.SKIP)
        public _FinalStage publishedDatePrecision(Optional<String> publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return this;
        }

        @java.lang.Override
        public _FinalStage byParseDate(Boolean byParseDate) {
            this.byParseDate = Optional.ofNullable(byParseDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "by_parse_date", nulls = Nulls.SKIP)
        public _FinalStage byParseDate(Optional<Boolean> byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage to(String to) {
            this.to = Optional.ofNullable(to);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "to_", nulls = Nulls.SKIP)
        public _FinalStage to(Optional<String> to) {
            this.to = to;
            return this;
        }

        @java.lang.Override
        public _FinalStage from(String from) {
            this.from = Optional.ofNullable(from);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "from_", nulls = Nulls.SKIP)
        public _FinalStage from(Optional<String> from) {
            this.from = from;
            return this;
        }

        @java.lang.Override
        public _FinalStage similarDocumentsFields(String similarDocumentsFields) {
            this.similarDocumentsFields = Optional.ofNullable(similarDocumentsFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "similar_documents_fields", nulls = Nulls.SKIP)
        public _FinalStage similarDocumentsFields(Optional<String> similarDocumentsFields) {
            this.similarDocumentsFields = similarDocumentsFields;
            return this;
        }

        @java.lang.Override
        public _FinalStage similarDocumentsNumber(Integer similarDocumentsNumber) {
            this.similarDocumentsNumber = Optional.ofNullable(similarDocumentsNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "similar_documents_number", nulls = Nulls.SKIP)
        public _FinalStage similarDocumentsNumber(Optional<Integer> similarDocumentsNumber) {
            this.similarDocumentsNumber = similarDocumentsNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage includeSimilarDocuments(Boolean includeSimilarDocuments) {
            this.includeSimilarDocuments = Optional.ofNullable(includeSimilarDocuments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_similar_documents", nulls = Nulls.SKIP)
        public _FinalStage includeSimilarDocuments(Optional<Boolean> includeSimilarDocuments) {
            this.includeSimilarDocuments = includeSimilarDocuments;
            return this;
        }

        @java.lang.Override
        public _FinalStage searchIn(String searchIn) {
            this.searchIn = Optional.ofNullable(searchIn);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "search_in", nulls = Nulls.SKIP)
        public _FinalStage searchIn(Optional<String> searchIn) {
            this.searchIn = searchIn;
            return this;
        }

        @java.lang.Override
        public SearchSimilarGetRequest build() {
            return new SearchSimilarGetRequest(
                    q,
                    searchIn,
                    includeSimilarDocuments,
                    similarDocumentsNumber,
                    similarDocumentsFields,
                    predefinedSources,
                    sources,
                    notSources,
                    lang,
                    notLang,
                    countries,
                    notCountries,
                    from,
                    to,
                    byParseDate,
                    publishedDatePrecision,
                    sortBy,
                    rankedOnly,
                    fromRank,
                    toRank,
                    isHeadline,
                    isOpinion,
                    isPaidContent,
                    parentUrl,
                    allLinks,
                    allDomainLinks,
                    wordCountMin,
                    wordCountMax,
                    page,
                    pageSize,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    iptcTags,
                    notIptcTags,
                    additionalProperties);
        }
    }
}
