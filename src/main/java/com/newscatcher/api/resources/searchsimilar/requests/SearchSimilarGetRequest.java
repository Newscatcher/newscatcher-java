/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.searchsimilar.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.resources.searchsimilar.types.SearchSimilarGetRequestPublishedDatePrecision;
import com.newscatcher.api.resources.searchsimilar.types.SearchSimilarGetRequestSortBy;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchSimilarGetRequest.Builder.class)
public final class SearchSimilarGetRequest {
    private final String q;

    private final Optional<String> searchIn;

    private final Optional<Boolean> includeSimilarDocuments;

    private final Optional<Integer> similarDocumentsNumber;

    private final Optional<String> similarDocumentsFields;

    private final Optional<String> predefinedSources;

    private final Optional<String> sources;

    private final Optional<String> notSources;

    private final Optional<String> lang;

    private final Optional<String> notLang;

    private final Optional<String> countries;

    private final Optional<String> notCountries;

    private final Optional<OffsetDateTime> from;

    private final Optional<OffsetDateTime> to;

    private final Optional<Boolean> byParseDate;

    private final Optional<SearchSimilarGetRequestPublishedDatePrecision> publishedDatePrecision;

    private final Optional<SearchSimilarGetRequestSortBy> sortBy;

    private final Optional<Boolean> rankedOnly;

    private final Optional<Integer> fromRank;

    private final Optional<Integer> toRank;

    private final Optional<Boolean> isHeadline;

    private final Optional<Boolean> isOpinion;

    private final Optional<Boolean> isPaidContent;

    private final Optional<String> parentUrl;

    private final Optional<String> allLinks;

    private final Optional<String> allDomainLinks;

    private final Optional<Integer> wordCountMin;

    private final Optional<Integer> wordCountMax;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<String> theme;

    private final Optional<String> notTheme;

    private final Optional<String> nerName;

    private final Optional<Float> titleSentimentMin;

    private final Optional<Float> titleSentimentMax;

    private final Optional<Float> contentSentimentMin;

    private final Optional<Float> contentSentimentMax;

    private final Optional<String> iptcTags;

    private final Optional<String> notIptcTags;

    private final Optional<String> customTags;

    private final Map<String, Object> additionalProperties;

    private SearchSimilarGetRequest(
            String q,
            Optional<String> searchIn,
            Optional<Boolean> includeSimilarDocuments,
            Optional<Integer> similarDocumentsNumber,
            Optional<String> similarDocumentsFields,
            Optional<String> predefinedSources,
            Optional<String> sources,
            Optional<String> notSources,
            Optional<String> lang,
            Optional<String> notLang,
            Optional<String> countries,
            Optional<String> notCountries,
            Optional<OffsetDateTime> from,
            Optional<OffsetDateTime> to,
            Optional<Boolean> byParseDate,
            Optional<SearchSimilarGetRequestPublishedDatePrecision> publishedDatePrecision,
            Optional<SearchSimilarGetRequestSortBy> sortBy,
            Optional<Boolean> rankedOnly,
            Optional<Integer> fromRank,
            Optional<Integer> toRank,
            Optional<Boolean> isHeadline,
            Optional<Boolean> isOpinion,
            Optional<Boolean> isPaidContent,
            Optional<String> parentUrl,
            Optional<String> allLinks,
            Optional<String> allDomainLinks,
            Optional<Integer> wordCountMin,
            Optional<Integer> wordCountMax,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<String> theme,
            Optional<String> notTheme,
            Optional<String> nerName,
            Optional<Float> titleSentimentMin,
            Optional<Float> titleSentimentMax,
            Optional<Float> contentSentimentMin,
            Optional<Float> contentSentimentMax,
            Optional<String> iptcTags,
            Optional<String> notIptcTags,
            Optional<String> customTags,
            Map<String, Object> additionalProperties) {
        this.q = q;
        this.searchIn = searchIn;
        this.includeSimilarDocuments = includeSimilarDocuments;
        this.similarDocumentsNumber = similarDocumentsNumber;
        this.similarDocumentsFields = similarDocumentsFields;
        this.predefinedSources = predefinedSources;
        this.sources = sources;
        this.notSources = notSources;
        this.lang = lang;
        this.notLang = notLang;
        this.countries = countries;
        this.notCountries = notCountries;
        this.from = from;
        this.to = to;
        this.byParseDate = byParseDate;
        this.publishedDatePrecision = publishedDatePrecision;
        this.sortBy = sortBy;
        this.rankedOnly = rankedOnly;
        this.fromRank = fromRank;
        this.toRank = toRank;
        this.isHeadline = isHeadline;
        this.isOpinion = isOpinion;
        this.isPaidContent = isPaidContent;
        this.parentUrl = parentUrl;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.wordCountMin = wordCountMin;
        this.wordCountMax = wordCountMax;
        this.page = page;
        this.pageSize = pageSize;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.nerName = nerName;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.iptcTags = iptcTags;
        this.notIptcTags = notIptcTags;
        this.customTags = customTags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The keyword(s) to search for in articles. Query syntax supports logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and wildcards:
     * <ul>
     * <li>For an exact match, use double quotes. For example, <code>&quot;technology news&quot;</code>.</li>
     * <li>Use <code>*</code> to search for any keyword.</li>
     * <li>Use <code>+</code> to include and <code>-</code> to exclude specific words or phrases.
     * For example, <code>+Apple</code>, <code>-Google</code>.</li>
     * <li>Use <code>AND</code>, <code>OR</code>, and <code>NOT</code> to refine search results.
     * For example, <code>technology AND (Apple OR Microsoft) NOT Google</code>.</li>
     * </ul>
     * <p>For more details, see <a href="/docs/v3/documentation/guides-and-concepts/advanced-querying">Advanced querying</a>.</p>
     */
    @JsonProperty("q")
    public String getQ() {
        return q;
    }

    /**
     * @return The article fields to search in. To search in multiple fields, use a comma-separated string.
     * <p>Example: <code>&quot;title, summary&quot;</code></p>
     * <p><strong>Note</strong>: The <code>summary</code> option is available if NLP is enabled in your plan.</p>
     * <p>Available options: <code>title</code>, <code>summary</code>, <code>content</code>.</p>
     */
    @JsonProperty("search_in")
    public Optional<String> getSearchIn() {
        return searchIn;
    }

    /**
     * @return If true, includes similar documents in the response.
     */
    @JsonProperty("include_similar_documents")
    public Optional<Boolean> getIncludeSimilarDocuments() {
        return includeSimilarDocuments;
    }

    /**
     * @return The number of similar documents to return.
     */
    @JsonProperty("similar_documents_number")
    public Optional<Integer> getSimilarDocumentsNumber() {
        return similarDocumentsNumber;
    }

    /**
     * @return The fields to consider for finding similar documents.
     */
    @JsonProperty("similar_documents_fields")
    public Optional<String> getSimilarDocumentsFields() {
        return similarDocumentsFields;
    }

    /**
     * @return Predefined top news sources per country.
     * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;top 100 US&quot;</code></li>
     * <li><code>&quot;top 33 AT&quot;</code></li>
     * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
     * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
     * </ul>
     */
    @JsonProperty("predefined_sources")
    public Optional<String> getPredefinedSources() {
        return predefinedSources;
    }

    /**
     * @return One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;nytimes.com&quot;</code></li>
     * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
     * </ul>
     */
    @JsonProperty("sources")
    public Optional<String> getSources() {
        return sources;
    }

    /**
     * @return The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.
     * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
     */
    @JsonProperty("not_sources")
    public Optional<String> getNotSources() {
        return notSources;
    }

    /**
     * @return The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.
     * <p>Example: <code>&quot;en, es&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
     */
    @JsonProperty("lang")
    public Optional<String> getLang() {
        return lang;
    }

    /**
     * @return The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.
     * <p>Example: <code>&quot;fr, de&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
     */
    @JsonProperty("not_lang")
    public Optional<String> getNotLang() {
        return notLang;
    }

    /**
     * @return The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.
     * <p>Example: <code>&quot;US, CA&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
     */
    @JsonProperty("countries")
    public Optional<String> getCountries() {
        return countries;
    }

    /**
     * @return The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.
     * <p>Example:<code>&quot;US, CA&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
     */
    @JsonProperty("not_countries")
    public Optional<String> getNotCountries() {
        return notCountries;
    }

    /**
     * @return The starting point in time to search from. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.
     * <p>Formats with examples:</p>
     * <ul>
     * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
     * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
     * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
     * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
     * <li>English phrases: <code>1 day ago</code>, <code>today</code></li>
     * </ul>
     * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
     */
    @JsonProperty("from_")
    public Optional<OffsetDateTime> getFrom() {
        return from;
    }

    /**
     * @return The ending point in time to search up to. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.
     * <p>Formats with examples:</p>
     * <ul>
     * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
     * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
     * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
     * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
     * <li>English phrases: <code>1 day ago</code>, <code>today</code></li>
     * </ul>
     * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
     */
    @JsonProperty("to_")
    public Optional<OffsetDateTime> getTo() {
        return to;
    }

    /**
     * @return If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.
     */
    @JsonProperty("by_parse_date")
    public Optional<Boolean> getByParseDate() {
        return byParseDate;
    }

    /**
     * @return The precision of the published date. There are three types:
     * <ul>
     * <li><code>full</code>: The day and time of an article is correctly identified with the appropriate timezone.</li>
     * <li><code>timezone unknown</code>: The day and time of an article is correctly identified without timezone.</li>
     * <li><code>date</code>: Only the day is identified without an exact time.</li>
     * </ul>
     */
    @JsonProperty("published_date_precision")
    public Optional<SearchSimilarGetRequestPublishedDatePrecision> getPublishedDatePrecision() {
        return publishedDatePrecision;
    }

    /**
     * @return The sorting order of the results. Possible values are:
     * <ul>
     * <li><code>relevancy</code>: The most relevant results first.</li>
     * <li><code>date</code>: The most recently published results first.</li>
     * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
     * </ul>
     */
    @JsonProperty("sort_by")
    public Optional<SearchSimilarGetRequestSortBy> getSortBy() {
        return sortBy;
    }

    /**
     * @return If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.
     */
    @JsonProperty("ranked_only")
    public Optional<Boolean> getRankedOnly() {
        return rankedOnly;
    }

    /**
     * @return The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
     */
    @JsonProperty("from_rank")
    public Optional<Integer> getFromRank() {
        return fromRank;
    }

    /**
     * @return The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
     */
    @JsonProperty("to_rank")
    public Optional<Integer> getToRank() {
        return toRank;
    }

    /**
     * @return If true, only returns articles that were posted on the home page of a given news domain.
     */
    @JsonProperty("is_headline")
    public Optional<Boolean> getIsHeadline() {
        return isHeadline;
    }

    /**
     * @return If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.
     */
    @JsonProperty("is_opinion")
    public Optional<Boolean> getIsOpinion() {
        return isOpinion;
    }

    /**
     * @return If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.
     */
    @JsonProperty("is_paid_content")
    public Optional<Boolean> getIsPaidContent() {
        return isPaidContent;
    }

    /**
     * @return The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.
     * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
     */
    @JsonProperty("parent_url")
    public Optional<String> getParentUrl() {
        return parentUrl;
    }

    /**
     * @return The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.
     * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
     * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
     */
    @JsonProperty("all_links")
    public Optional<String> getAllLinks() {
        return allLinks;
    }

    /**
     * @return The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.
     * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
     * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
     */
    @JsonProperty("all_domain_links")
    public Optional<String> getAllDomainLinks() {
        return allDomainLinks;
    }

    /**
     * @return The minimum number of words an article must contain. To be used for avoiding articles with small content.
     */
    @JsonProperty("word_count_min")
    public Optional<Integer> getWordCountMin() {
        return wordCountMin;
    }

    /**
     * @return The maximum number of words an article can contain. To be used for avoiding articles with large content.
     */
    @JsonProperty("word_count_max")
    public Optional<Integer> getWordCountMax() {
        return wordCountMax;
    }

    /**
     * @return The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.
     * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The number of articles to return per page.
     */
    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return If true, includes an NLP layer with each article in the response. This layer provides enhanced information such as theme classification, article summary, sentiment analysis, tags, and named entity recognition.
     * <p>The NLP layer includes:</p>
     * <ul>
     * <li>Theme: General topic of the article.</li>
     * <li>Summary: A concise overview of the article content.</li>
     * <li>Sentiment: Separate scores for title and content (range: -1 to 1).</li>
     * <li>Named entities: Identified persons (PER), organizations (ORG), locations (LOC), and miscellaneous entities (MISC).</li>
     * <li>IPTC tags: Standardized news category tags.</li>
     * <li>IAB tags: Content categories for digital advertising.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>include_nlp_data</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    /**
     * @return If true, filters the results to include only articles with an NLP layer. This allows you to focus on articles that have been processed with advanced NLP techniques.
     * <p><strong>Note</strong>: The <code>has_nlp</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    /**
     * @return Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
     */
    @JsonProperty("theme")
    public Optional<String> getTheme() {
        return theme;
    }

    /**
     * @return Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("not_theme")
    public Optional<String> getNotTheme() {
        return notTheme;
    }

    /**
     * @return The name of person, organization, location, product or other named entity to search for. To specify multiple names use a comma-separated string.
     * <p>Example: <code>&quot;Tesla, Amazon&quot;</code></p>
     */
    @JsonProperty("ner_name")
    public Optional<String> getNerName() {
        return nerName;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_min")
    public Optional<Float> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_max")
    public Optional<Float> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_min")
    public Optional<Float> getContentSentimentMin() {
        return contentSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_max")
    public Optional<Float> getContentSentimentMax() {
        return contentSentimentMax;
    }

    /**
     * @return Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.
     * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
     * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available if tags are included in your subscription plan.</p>
     * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
     */
    @JsonProperty("iptc_tags")
    public Optional<String> getIptcTags() {
        return iptcTags;
    }

    /**
     * @return Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.
     * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available if tags are included in your subscription plan.</p>
     * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
     */
    @JsonProperty("not_iptc_tags")
    public Optional<String> getNotIptcTags() {
        return notIptcTags;
    }

    /**
     * @return Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:
     * <ul>
     * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
     * </ul>
     * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
     * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
     */
    @JsonProperty("custom_tags")
    public Optional<String> getCustomTags() {
        return customTags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchSimilarGetRequest && equalTo((SearchSimilarGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchSimilarGetRequest other) {
        return q.equals(other.q)
                && searchIn.equals(other.searchIn)
                && includeSimilarDocuments.equals(other.includeSimilarDocuments)
                && similarDocumentsNumber.equals(other.similarDocumentsNumber)
                && similarDocumentsFields.equals(other.similarDocumentsFields)
                && predefinedSources.equals(other.predefinedSources)
                && sources.equals(other.sources)
                && notSources.equals(other.notSources)
                && lang.equals(other.lang)
                && notLang.equals(other.notLang)
                && countries.equals(other.countries)
                && notCountries.equals(other.notCountries)
                && from.equals(other.from)
                && to.equals(other.to)
                && byParseDate.equals(other.byParseDate)
                && publishedDatePrecision.equals(other.publishedDatePrecision)
                && sortBy.equals(other.sortBy)
                && rankedOnly.equals(other.rankedOnly)
                && fromRank.equals(other.fromRank)
                && toRank.equals(other.toRank)
                && isHeadline.equals(other.isHeadline)
                && isOpinion.equals(other.isOpinion)
                && isPaidContent.equals(other.isPaidContent)
                && parentUrl.equals(other.parentUrl)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && wordCountMin.equals(other.wordCountMin)
                && wordCountMax.equals(other.wordCountMax)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && nerName.equals(other.nerName)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && iptcTags.equals(other.iptcTags)
                && notIptcTags.equals(other.notIptcTags)
                && customTags.equals(other.customTags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.q,
                this.searchIn,
                this.includeSimilarDocuments,
                this.similarDocumentsNumber,
                this.similarDocumentsFields,
                this.predefinedSources,
                this.sources,
                this.notSources,
                this.lang,
                this.notLang,
                this.countries,
                this.notCountries,
                this.from,
                this.to,
                this.byParseDate,
                this.publishedDatePrecision,
                this.sortBy,
                this.rankedOnly,
                this.fromRank,
                this.toRank,
                this.isHeadline,
                this.isOpinion,
                this.isPaidContent,
                this.parentUrl,
                this.allLinks,
                this.allDomainLinks,
                this.wordCountMin,
                this.wordCountMax,
                this.page,
                this.pageSize,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.nerName,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.iptcTags,
                this.notIptcTags,
                this.customTags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QStage builder() {
        return new Builder();
    }

    public interface QStage {
        _FinalStage q(@NotNull String q);

        Builder from(SearchSimilarGetRequest other);
    }

    public interface _FinalStage {
        SearchSimilarGetRequest build();

        _FinalStage searchIn(Optional<String> searchIn);

        _FinalStage searchIn(String searchIn);

        _FinalStage includeSimilarDocuments(Optional<Boolean> includeSimilarDocuments);

        _FinalStage includeSimilarDocuments(Boolean includeSimilarDocuments);

        _FinalStage similarDocumentsNumber(Optional<Integer> similarDocumentsNumber);

        _FinalStage similarDocumentsNumber(Integer similarDocumentsNumber);

        _FinalStage similarDocumentsFields(Optional<String> similarDocumentsFields);

        _FinalStage similarDocumentsFields(String similarDocumentsFields);

        _FinalStage predefinedSources(Optional<String> predefinedSources);

        _FinalStage predefinedSources(String predefinedSources);

        _FinalStage sources(Optional<String> sources);

        _FinalStage sources(String sources);

        _FinalStage notSources(Optional<String> notSources);

        _FinalStage notSources(String notSources);

        _FinalStage lang(Optional<String> lang);

        _FinalStage lang(String lang);

        _FinalStage notLang(Optional<String> notLang);

        _FinalStage notLang(String notLang);

        _FinalStage countries(Optional<String> countries);

        _FinalStage countries(String countries);

        _FinalStage notCountries(Optional<String> notCountries);

        _FinalStage notCountries(String notCountries);

        _FinalStage from(Optional<OffsetDateTime> from);

        _FinalStage from(OffsetDateTime from);

        _FinalStage to(Optional<OffsetDateTime> to);

        _FinalStage to(OffsetDateTime to);

        _FinalStage byParseDate(Optional<Boolean> byParseDate);

        _FinalStage byParseDate(Boolean byParseDate);

        _FinalStage publishedDatePrecision(
                Optional<SearchSimilarGetRequestPublishedDatePrecision> publishedDatePrecision);

        _FinalStage publishedDatePrecision(SearchSimilarGetRequestPublishedDatePrecision publishedDatePrecision);

        _FinalStage sortBy(Optional<SearchSimilarGetRequestSortBy> sortBy);

        _FinalStage sortBy(SearchSimilarGetRequestSortBy sortBy);

        _FinalStage rankedOnly(Optional<Boolean> rankedOnly);

        _FinalStage rankedOnly(Boolean rankedOnly);

        _FinalStage fromRank(Optional<Integer> fromRank);

        _FinalStage fromRank(Integer fromRank);

        _FinalStage toRank(Optional<Integer> toRank);

        _FinalStage toRank(Integer toRank);

        _FinalStage isHeadline(Optional<Boolean> isHeadline);

        _FinalStage isHeadline(Boolean isHeadline);

        _FinalStage isOpinion(Optional<Boolean> isOpinion);

        _FinalStage isOpinion(Boolean isOpinion);

        _FinalStage isPaidContent(Optional<Boolean> isPaidContent);

        _FinalStage isPaidContent(Boolean isPaidContent);

        _FinalStage parentUrl(Optional<String> parentUrl);

        _FinalStage parentUrl(String parentUrl);

        _FinalStage allLinks(Optional<String> allLinks);

        _FinalStage allLinks(String allLinks);

        _FinalStage allDomainLinks(Optional<String> allDomainLinks);

        _FinalStage allDomainLinks(String allDomainLinks);

        _FinalStage wordCountMin(Optional<Integer> wordCountMin);

        _FinalStage wordCountMin(Integer wordCountMin);

        _FinalStage wordCountMax(Optional<Integer> wordCountMax);

        _FinalStage wordCountMax(Integer wordCountMax);

        _FinalStage page(Optional<Integer> page);

        _FinalStage page(Integer page);

        _FinalStage pageSize(Optional<Integer> pageSize);

        _FinalStage pageSize(Integer pageSize);

        _FinalStage includeNlpData(Optional<Boolean> includeNlpData);

        _FinalStage includeNlpData(Boolean includeNlpData);

        _FinalStage hasNlp(Optional<Boolean> hasNlp);

        _FinalStage hasNlp(Boolean hasNlp);

        _FinalStage theme(Optional<String> theme);

        _FinalStage theme(String theme);

        _FinalStage notTheme(Optional<String> notTheme);

        _FinalStage notTheme(String notTheme);

        _FinalStage nerName(Optional<String> nerName);

        _FinalStage nerName(String nerName);

        _FinalStage titleSentimentMin(Optional<Float> titleSentimentMin);

        _FinalStage titleSentimentMin(Float titleSentimentMin);

        _FinalStage titleSentimentMax(Optional<Float> titleSentimentMax);

        _FinalStage titleSentimentMax(Float titleSentimentMax);

        _FinalStage contentSentimentMin(Optional<Float> contentSentimentMin);

        _FinalStage contentSentimentMin(Float contentSentimentMin);

        _FinalStage contentSentimentMax(Optional<Float> contentSentimentMax);

        _FinalStage contentSentimentMax(Float contentSentimentMax);

        _FinalStage iptcTags(Optional<String> iptcTags);

        _FinalStage iptcTags(String iptcTags);

        _FinalStage notIptcTags(Optional<String> notIptcTags);

        _FinalStage notIptcTags(String notIptcTags);

        _FinalStage customTags(Optional<String> customTags);

        _FinalStage customTags(String customTags);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QStage, _FinalStage {
        private String q;

        private Optional<String> customTags = Optional.empty();

        private Optional<String> notIptcTags = Optional.empty();

        private Optional<String> iptcTags = Optional.empty();

        private Optional<Float> contentSentimentMax = Optional.empty();

        private Optional<Float> contentSentimentMin = Optional.empty();

        private Optional<Float> titleSentimentMax = Optional.empty();

        private Optional<Float> titleSentimentMin = Optional.empty();

        private Optional<String> nerName = Optional.empty();

        private Optional<String> notTheme = Optional.empty();

        private Optional<String> theme = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> wordCountMax = Optional.empty();

        private Optional<Integer> wordCountMin = Optional.empty();

        private Optional<String> allDomainLinks = Optional.empty();

        private Optional<String> allLinks = Optional.empty();

        private Optional<String> parentUrl = Optional.empty();

        private Optional<Boolean> isPaidContent = Optional.empty();

        private Optional<Boolean> isOpinion = Optional.empty();

        private Optional<Boolean> isHeadline = Optional.empty();

        private Optional<Integer> toRank = Optional.empty();

        private Optional<Integer> fromRank = Optional.empty();

        private Optional<Boolean> rankedOnly = Optional.empty();

        private Optional<SearchSimilarGetRequestSortBy> sortBy = Optional.empty();

        private Optional<SearchSimilarGetRequestPublishedDatePrecision> publishedDatePrecision = Optional.empty();

        private Optional<Boolean> byParseDate = Optional.empty();

        private Optional<OffsetDateTime> to = Optional.empty();

        private Optional<OffsetDateTime> from = Optional.empty();

        private Optional<String> notCountries = Optional.empty();

        private Optional<String> countries = Optional.empty();

        private Optional<String> notLang = Optional.empty();

        private Optional<String> lang = Optional.empty();

        private Optional<String> notSources = Optional.empty();

        private Optional<String> sources = Optional.empty();

        private Optional<String> predefinedSources = Optional.empty();

        private Optional<String> similarDocumentsFields = Optional.empty();

        private Optional<Integer> similarDocumentsNumber = Optional.empty();

        private Optional<Boolean> includeSimilarDocuments = Optional.empty();

        private Optional<String> searchIn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchSimilarGetRequest other) {
            q(other.getQ());
            searchIn(other.getSearchIn());
            includeSimilarDocuments(other.getIncludeSimilarDocuments());
            similarDocumentsNumber(other.getSimilarDocumentsNumber());
            similarDocumentsFields(other.getSimilarDocumentsFields());
            predefinedSources(other.getPredefinedSources());
            sources(other.getSources());
            notSources(other.getNotSources());
            lang(other.getLang());
            notLang(other.getNotLang());
            countries(other.getCountries());
            notCountries(other.getNotCountries());
            from(other.getFrom());
            to(other.getTo());
            byParseDate(other.getByParseDate());
            publishedDatePrecision(other.getPublishedDatePrecision());
            sortBy(other.getSortBy());
            rankedOnly(other.getRankedOnly());
            fromRank(other.getFromRank());
            toRank(other.getToRank());
            isHeadline(other.getIsHeadline());
            isOpinion(other.getIsOpinion());
            isPaidContent(other.getIsPaidContent());
            parentUrl(other.getParentUrl());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            wordCountMin(other.getWordCountMin());
            wordCountMax(other.getWordCountMax());
            page(other.getPage());
            pageSize(other.getPageSize());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            nerName(other.getNerName());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            iptcTags(other.getIptcTags());
            notIptcTags(other.getNotIptcTags());
            customTags(other.getCustomTags());
            return this;
        }

        /**
         * <p>The keyword(s) to search for in articles. Query syntax supports logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and wildcards:</p>
         * <ul>
         * <li>For an exact match, use double quotes. For example, <code>&quot;technology news&quot;</code>.</li>
         * <li>Use <code>*</code> to search for any keyword.</li>
         * <li>Use <code>+</code> to include and <code>-</code> to exclude specific words or phrases.
         * For example, <code>+Apple</code>, <code>-Google</code>.</li>
         * <li>Use <code>AND</code>, <code>OR</code>, and <code>NOT</code> to refine search results.
         * For example, <code>technology AND (Apple OR Microsoft) NOT Google</code>.</li>
         * </ul>
         * <p>For more details, see <a href="/docs/v3/documentation/guides-and-concepts/advanced-querying">Advanced querying</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("q")
        public _FinalStage q(@NotNull String q) {
            this.q = Objects.requireNonNull(q, "q must not be null");
            return this;
        }

        /**
         * <p>Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:</p>
         * <ul>
         * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
         * </ul>
         * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
         * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customTags(String customTags) {
            this.customTags = Optional.ofNullable(customTags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "custom_tags", nulls = Nulls.SKIP)
        public _FinalStage customTags(Optional<String> customTags) {
            this.customTags = customTags;
            return this;
        }

        /**
         * <p>Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available if tags are included in your subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notIptcTags(String notIptcTags) {
            this.notIptcTags = Optional.ofNullable(notIptcTags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "not_iptc_tags", nulls = Nulls.SKIP)
        public _FinalStage notIptcTags(Optional<String> notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }

        /**
         * <p>Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available if tags are included in your subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage iptcTags(String iptcTags) {
            this.iptcTags = Optional.ofNullable(iptcTags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "iptc_tags", nulls = Nulls.SKIP)
        public _FinalStage iptcTags(Optional<String> iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contentSentimentMax(Float contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public _FinalStage contentSentimentMax(Optional<Float> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contentSentimentMin(Float contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public _FinalStage contentSentimentMin(Optional<Float> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage titleSentimentMax(Float titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public _FinalStage titleSentimentMax(Optional<Float> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage titleSentimentMin(Float titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public _FinalStage titleSentimentMin(Optional<Float> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        /**
         * <p>The name of person, organization, location, product or other named entity to search for. To specify multiple names use a comma-separated string.</p>
         * <p>Example: <code>&quot;Tesla, Amazon&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage nerName(String nerName) {
            this.nerName = Optional.ofNullable(nerName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ner_name", nulls = Nulls.SKIP)
        public _FinalStage nerName(Optional<String> nerName) {
            this.nerName = nerName;
            return this;
        }

        /**
         * <p>Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notTheme(String notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public _FinalStage notTheme(Optional<String> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        /**
         * <p>Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage theme(String theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public _FinalStage theme(Optional<String> theme) {
            this.theme = theme;
            return this;
        }

        /**
         * <p>If true, filters the results to include only articles with an NLP layer. This allows you to focus on articles that have been processed with advanced NLP techniques.</p>
         * <p><strong>Note</strong>: The <code>has_nlp</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public _FinalStage hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        /**
         * <p>If true, includes an NLP layer with each article in the response. This layer provides enhanced information such as theme classification, article summary, sentiment analysis, tags, and named entity recognition.</p>
         * <p>The NLP layer includes:</p>
         * <ul>
         * <li>Theme: General topic of the article.</li>
         * <li>Summary: A concise overview of the article content.</li>
         * <li>Sentiment: Separate scores for title and content (range: -1 to 1).</li>
         * <li>Named entities: Identified persons (PER), organizations (ORG), locations (LOC), and miscellaneous entities (MISC).</li>
         * <li>IPTC tags: Standardized news category tags.</li>
         * <li>IAB tags: Content categories for digital advertising.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>include_nlp_data</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public _FinalStage includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        /**
         * <p>The number of articles to return per page.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public _FinalStage pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * <p>The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.</p>
         * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public _FinalStage page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        /**
         * <p>The maximum number of words an article can contain. To be used for avoiding articles with large content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage wordCountMax(Integer wordCountMax) {
            this.wordCountMax = Optional.ofNullable(wordCountMax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "word_count_max", nulls = Nulls.SKIP)
        public _FinalStage wordCountMax(Optional<Integer> wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }

        /**
         * <p>The minimum number of words an article must contain. To be used for avoiding articles with small content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage wordCountMin(Integer wordCountMin) {
            this.wordCountMin = Optional.ofNullable(wordCountMin);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "word_count_min", nulls = Nulls.SKIP)
        public _FinalStage wordCountMin(Optional<Integer> wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }

        /**
         * <p>The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.</p>
         * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allDomainLinks(String allDomainLinks) {
            this.allDomainLinks = Optional.ofNullable(allDomainLinks);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "all_domain_links", nulls = Nulls.SKIP)
        public _FinalStage allDomainLinks(Optional<String> allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }

        /**
         * <p>The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allLinks(String allLinks) {
            this.allLinks = Optional.ofNullable(allLinks);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "all_links", nulls = Nulls.SKIP)
        public _FinalStage allLinks(Optional<String> allLinks) {
            this.allLinks = allLinks;
            return this;
        }

        /**
         * <p>The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parentUrl(String parentUrl) {
            this.parentUrl = Optional.ofNullable(parentUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "parent_url", nulls = Nulls.SKIP)
        public _FinalStage parentUrl(Optional<String> parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }

        /**
         * <p>If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = Optional.ofNullable(isPaidContent);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_paid_content", nulls = Nulls.SKIP)
        public _FinalStage isPaidContent(Optional<Boolean> isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }

        /**
         * <p>If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isOpinion(Boolean isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public _FinalStage isOpinion(Optional<Boolean> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        /**
         * <p>If true, only returns articles that were posted on the home page of a given news domain.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isHeadline(Boolean isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public _FinalStage isHeadline(Optional<Boolean> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        /**
         * <p>The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage toRank(Integer toRank) {
            this.toRank = Optional.ofNullable(toRank);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "to_rank", nulls = Nulls.SKIP)
        public _FinalStage toRank(Optional<Integer> toRank) {
            this.toRank = toRank;
            return this;
        }

        /**
         * <p>The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fromRank(Integer fromRank) {
            this.fromRank = Optional.ofNullable(fromRank);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "from_rank", nulls = Nulls.SKIP)
        public _FinalStage fromRank(Optional<Integer> fromRank) {
            this.fromRank = fromRank;
            return this;
        }

        /**
         * <p>If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rankedOnly(Boolean rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public _FinalStage rankedOnly(Optional<Boolean> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        /**
         * <p>The sorting order of the results. Possible values are:</p>
         * <ul>
         * <li><code>relevancy</code>: The most relevant results first.</li>
         * <li><code>date</code>: The most recently published results first.</li>
         * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortBy(SearchSimilarGetRequestSortBy sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sort_by", nulls = Nulls.SKIP)
        public _FinalStage sortBy(Optional<SearchSimilarGetRequestSortBy> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * <p>The precision of the published date. There are three types:</p>
         * <ul>
         * <li><code>full</code>: The day and time of an article is correctly identified with the appropriate timezone.</li>
         * <li><code>timezone unknown</code>: The day and time of an article is correctly identified without timezone.</li>
         * <li><code>date</code>: Only the day is identified without an exact time.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage publishedDatePrecision(
                SearchSimilarGetRequestPublishedDatePrecision publishedDatePrecision) {
            this.publishedDatePrecision = Optional.ofNullable(publishedDatePrecision);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "published_date_precision", nulls = Nulls.SKIP)
        public _FinalStage publishedDatePrecision(
                Optional<SearchSimilarGetRequestPublishedDatePrecision> publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return this;
        }

        /**
         * <p>If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage byParseDate(Boolean byParseDate) {
            this.byParseDate = Optional.ofNullable(byParseDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "by_parse_date", nulls = Nulls.SKIP)
        public _FinalStage byParseDate(Optional<Boolean> byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }

        /**
         * <p>The ending point in time to search up to. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>1 day ago</code>, <code>today</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage to(OffsetDateTime to) {
            this.to = Optional.ofNullable(to);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "to_", nulls = Nulls.SKIP)
        public _FinalStage to(Optional<OffsetDateTime> to) {
            this.to = to;
            return this;
        }

        /**
         * <p>The starting point in time to search from. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>1 day ago</code>, <code>today</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage from(OffsetDateTime from) {
            this.from = Optional.ofNullable(from);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "from_", nulls = Nulls.SKIP)
        public _FinalStage from(Optional<OffsetDateTime> from) {
            this.from = from;
            return this;
        }

        /**
         * <p>The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.</p>
         * <p>Example:<code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notCountries(String notCountries) {
            this.notCountries = Optional.ofNullable(notCountries);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "not_countries", nulls = Nulls.SKIP)
        public _FinalStage notCountries(Optional<String> notCountries) {
            this.notCountries = notCountries;
            return this;
        }

        /**
         * <p>The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.</p>
         * <p>Example: <code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage countries(String countries) {
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "countries", nulls = Nulls.SKIP)
        public _FinalStage countries(Optional<String> countries) {
            this.countries = countries;
            return this;
        }

        /**
         * <p>The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;fr, de&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notLang(String notLang) {
            this.notLang = Optional.ofNullable(notLang);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "not_lang", nulls = Nulls.SKIP)
        public _FinalStage notLang(Optional<String> notLang) {
            this.notLang = notLang;
            return this;
        }

        /**
         * <p>The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;en, es&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lang(String lang) {
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lang", nulls = Nulls.SKIP)
        public _FinalStage lang(Optional<String> lang) {
            this.lang = lang;
            return this;
        }

        /**
         * <p>The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.</p>
         * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notSources(String notSources) {
            this.notSources = Optional.ofNullable(notSources);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "not_sources", nulls = Nulls.SKIP)
        public _FinalStage notSources(Optional<String> notSources) {
            this.notSources = notSources;
            return this;
        }

        /**
         * <p>One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;nytimes.com&quot;</code></li>
         * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sources(String sources) {
            this.sources = Optional.ofNullable(sources);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public _FinalStage sources(Optional<String> sources) {
            this.sources = sources;
            return this;
        }

        /**
         * <p>Predefined top news sources per country.</p>
         * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;top 100 US&quot;</code></li>
         * <li><code>&quot;top 33 AT&quot;</code></li>
         * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
         * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage predefinedSources(String predefinedSources) {
            this.predefinedSources = Optional.ofNullable(predefinedSources);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "predefined_sources", nulls = Nulls.SKIP)
        public _FinalStage predefinedSources(Optional<String> predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }

        /**
         * <p>The fields to consider for finding similar documents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage similarDocumentsFields(String similarDocumentsFields) {
            this.similarDocumentsFields = Optional.ofNullable(similarDocumentsFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "similar_documents_fields", nulls = Nulls.SKIP)
        public _FinalStage similarDocumentsFields(Optional<String> similarDocumentsFields) {
            this.similarDocumentsFields = similarDocumentsFields;
            return this;
        }

        /**
         * <p>The number of similar documents to return.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage similarDocumentsNumber(Integer similarDocumentsNumber) {
            this.similarDocumentsNumber = Optional.ofNullable(similarDocumentsNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "similar_documents_number", nulls = Nulls.SKIP)
        public _FinalStage similarDocumentsNumber(Optional<Integer> similarDocumentsNumber) {
            this.similarDocumentsNumber = similarDocumentsNumber;
            return this;
        }

        /**
         * <p>If true, includes similar documents in the response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage includeSimilarDocuments(Boolean includeSimilarDocuments) {
            this.includeSimilarDocuments = Optional.ofNullable(includeSimilarDocuments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_similar_documents", nulls = Nulls.SKIP)
        public _FinalStage includeSimilarDocuments(Optional<Boolean> includeSimilarDocuments) {
            this.includeSimilarDocuments = includeSimilarDocuments;
            return this;
        }

        /**
         * <p>The article fields to search in. To search in multiple fields, use a comma-separated string.</p>
         * <p>Example: <code>&quot;title, summary&quot;</code></p>
         * <p><strong>Note</strong>: The <code>summary</code> option is available if NLP is enabled in your plan.</p>
         * <p>Available options: <code>title</code>, <code>summary</code>, <code>content</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage searchIn(String searchIn) {
            this.searchIn = Optional.ofNullable(searchIn);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "search_in", nulls = Nulls.SKIP)
        public _FinalStage searchIn(Optional<String> searchIn) {
            this.searchIn = searchIn;
            return this;
        }

        @java.lang.Override
        public SearchSimilarGetRequest build() {
            return new SearchSimilarGetRequest(
                    q,
                    searchIn,
                    includeSimilarDocuments,
                    similarDocumentsNumber,
                    similarDocumentsFields,
                    predefinedSources,
                    sources,
                    notSources,
                    lang,
                    notLang,
                    countries,
                    notCountries,
                    from,
                    to,
                    byParseDate,
                    publishedDatePrecision,
                    sortBy,
                    rankedOnly,
                    fromRank,
                    toRank,
                    isHeadline,
                    isOpinion,
                    isPaidContent,
                    parentUrl,
                    allLinks,
                    allDomainLinks,
                    wordCountMin,
                    wordCountMax,
                    page,
                    pageSize,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    nerName,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    iptcTags,
                    notIptcTags,
                    customTags,
                    additionalProperties);
        }
    }
}
