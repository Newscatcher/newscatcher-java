/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.aggregation;

import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.resources.aggregation.requests.AggregationGetRequest;
import com.newscatcher.api.resources.aggregation.requests.AggregationPostRequest;
import com.newscatcher.api.resources.aggregation.types.AggregationGetResponse;
import com.newscatcher.api.resources.aggregation.types.AggregationPostResponse;

public class AggregationClient {
    protected final ClientOptions clientOptions;

    private final RawAggregationClient rawClient;

    public AggregationClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawAggregationClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawAggregationClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves the count of articles aggregated by day or hour based on various search criteria, such as keyword, language, country, and source.
     */
    public AggregationGetResponse get(AggregationGetRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves the count of articles aggregated by day or hour based on various search criteria, such as keyword, language, country, and source.
     */
    public AggregationGetResponse get(AggregationGetRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Retrieves the count of articles aggregated by day or hour based on various search criteria, such as keyword, language, country, and source.
     */
    public AggregationPostResponse post(AggregationPostRequest request) {
        return this.rawClient.post(request).body();
    }

    /**
     * Retrieves the count of articles aggregated by day or hour based on various search criteria, such as keyword, language, country, and source.
     */
    public AggregationPostResponse post(AggregationPostRequest request, RequestOptions requestOptions) {
        return this.rawClient.post(request, requestOptions).body();
    }
}
