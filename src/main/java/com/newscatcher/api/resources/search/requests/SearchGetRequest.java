/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.search.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.resources.search.types.SearchGetRequestClusteringVariable;
import com.newscatcher.api.resources.search.types.SearchGetRequestNewsDomainType;
import com.newscatcher.api.resources.search.types.SearchGetRequestPublishedDatePrecision;
import com.newscatcher.api.resources.search.types.SearchGetRequestSortBy;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchGetRequest.Builder.class)
public final class SearchGetRequest {
    private final String q;

    private final Optional<String> searchIn;

    private final Optional<Boolean> includeTranslationFields;

    private final Optional<String> predefinedSources;

    private final Optional<String> sourceName;

    private final Optional<String> sources;

    private final Optional<String> notSources;

    private final Optional<String> lang;

    private final Optional<String> notLang;

    private final Optional<String> countries;

    private final Optional<String> notCountries;

    private final Optional<String> notAuthorName;

    private final Optional<OffsetDateTime> from;

    private final Optional<OffsetDateTime> to;

    private final Optional<SearchGetRequestPublishedDatePrecision> publishedDatePrecision;

    private final Optional<Boolean> byParseDate;

    private final Optional<SearchGetRequestSortBy> sortBy;

    private final Optional<Boolean> rankedOnly;

    private final Optional<Integer> fromRank;

    private final Optional<Integer> toRank;

    private final Optional<Boolean> isHeadline;

    private final Optional<Boolean> isOpinion;

    private final Optional<Boolean> isPaidContent;

    private final Optional<String> parentUrl;

    private final Optional<String> allLinks;

    private final Optional<String> allDomainLinks;

    private final Optional<Boolean> additionalDomainInfo;

    private final Optional<Boolean> isNewsDomain;

    private final Optional<SearchGetRequestNewsDomainType> newsDomainType;

    private final Optional<String> newsType;

    private final Optional<Integer> wordCountMin;

    private final Optional<Integer> wordCountMax;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Optional<Boolean> clusteringEnabled;

    private final Optional<SearchGetRequestClusteringVariable> clusteringVariable;

    private final Optional<Float> clusteringThreshold;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<String> theme;

    private final Optional<String> notTheme;

    private final Optional<String> orgEntityName;

    private final Optional<String> perEntityName;

    private final Optional<String> locEntityName;

    private final Optional<String> miscEntityName;

    private final Optional<Float> titleSentimentMin;

    private final Optional<Float> titleSentimentMax;

    private final Optional<Float> contentSentimentMin;

    private final Optional<Float> contentSentimentMax;

    private final Optional<String> iptcTags;

    private final Optional<String> notIptcTags;

    private final Optional<String> iabTags;

    private final Optional<String> notIabTags;

    private final Optional<String> customTags;

    private final Optional<Boolean> excludeDuplicates;

    private final Optional<Boolean> robotsCompliant;

    private final Map<String, Object> additionalProperties;

    private SearchGetRequest(
            String q,
            Optional<String> searchIn,
            Optional<Boolean> includeTranslationFields,
            Optional<String> predefinedSources,
            Optional<String> sourceName,
            Optional<String> sources,
            Optional<String> notSources,
            Optional<String> lang,
            Optional<String> notLang,
            Optional<String> countries,
            Optional<String> notCountries,
            Optional<String> notAuthorName,
            Optional<OffsetDateTime> from,
            Optional<OffsetDateTime> to,
            Optional<SearchGetRequestPublishedDatePrecision> publishedDatePrecision,
            Optional<Boolean> byParseDate,
            Optional<SearchGetRequestSortBy> sortBy,
            Optional<Boolean> rankedOnly,
            Optional<Integer> fromRank,
            Optional<Integer> toRank,
            Optional<Boolean> isHeadline,
            Optional<Boolean> isOpinion,
            Optional<Boolean> isPaidContent,
            Optional<String> parentUrl,
            Optional<String> allLinks,
            Optional<String> allDomainLinks,
            Optional<Boolean> additionalDomainInfo,
            Optional<Boolean> isNewsDomain,
            Optional<SearchGetRequestNewsDomainType> newsDomainType,
            Optional<String> newsType,
            Optional<Integer> wordCountMin,
            Optional<Integer> wordCountMax,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Optional<Boolean> clusteringEnabled,
            Optional<SearchGetRequestClusteringVariable> clusteringVariable,
            Optional<Float> clusteringThreshold,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<String> theme,
            Optional<String> notTheme,
            Optional<String> orgEntityName,
            Optional<String> perEntityName,
            Optional<String> locEntityName,
            Optional<String> miscEntityName,
            Optional<Float> titleSentimentMin,
            Optional<Float> titleSentimentMax,
            Optional<Float> contentSentimentMin,
            Optional<Float> contentSentimentMax,
            Optional<String> iptcTags,
            Optional<String> notIptcTags,
            Optional<String> iabTags,
            Optional<String> notIabTags,
            Optional<String> customTags,
            Optional<Boolean> excludeDuplicates,
            Optional<Boolean> robotsCompliant,
            Map<String, Object> additionalProperties) {
        this.q = q;
        this.searchIn = searchIn;
        this.includeTranslationFields = includeTranslationFields;
        this.predefinedSources = predefinedSources;
        this.sourceName = sourceName;
        this.sources = sources;
        this.notSources = notSources;
        this.lang = lang;
        this.notLang = notLang;
        this.countries = countries;
        this.notCountries = notCountries;
        this.notAuthorName = notAuthorName;
        this.from = from;
        this.to = to;
        this.publishedDatePrecision = publishedDatePrecision;
        this.byParseDate = byParseDate;
        this.sortBy = sortBy;
        this.rankedOnly = rankedOnly;
        this.fromRank = fromRank;
        this.toRank = toRank;
        this.isHeadline = isHeadline;
        this.isOpinion = isOpinion;
        this.isPaidContent = isPaidContent;
        this.parentUrl = parentUrl;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.additionalDomainInfo = additionalDomainInfo;
        this.isNewsDomain = isNewsDomain;
        this.newsDomainType = newsDomainType;
        this.newsType = newsType;
        this.wordCountMin = wordCountMin;
        this.wordCountMax = wordCountMax;
        this.page = page;
        this.pageSize = pageSize;
        this.clusteringEnabled = clusteringEnabled;
        this.clusteringVariable = clusteringVariable;
        this.clusteringThreshold = clusteringThreshold;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.orgEntityName = orgEntityName;
        this.perEntityName = perEntityName;
        this.locEntityName = locEntityName;
        this.miscEntityName = miscEntityName;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.iptcTags = iptcTags;
        this.notIptcTags = notIptcTags;
        this.iabTags = iabTags;
        this.notIabTags = notIabTags;
        this.customTags = customTags;
        this.excludeDuplicates = excludeDuplicates;
        this.robotsCompliant = robotsCompliant;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The keyword(s) to search for in articles. Query syntax supports logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and wildcards:
     * <ul>
     * <li>For an exact match, use double quotes. For example, <code>&quot;technology news&quot;</code>.</li>
     * <li>Use <code>*</code> to search for any keyword.</li>
     * <li>Use <code>+</code> to include and <code>-</code> to exclude specific words or phrases.
     * For example, <code>+Apple</code>, <code>-Google</code>.</li>
     * <li>Use <code>AND</code>, <code>OR</code>, and <code>NOT</code> to refine search results.
     * For example, <code>technology AND (Apple OR Microsoft) NOT Google</code>.</li>
     * </ul>
     * <p>For more details, see <a href="/docs/v3/documentation/guides-and-concepts/advanced-querying">Advanced querying</a>.</p>
     */
    @JsonProperty("q")
    public String getQ() {
        return q;
    }

    @JsonProperty("search_in")
    public Optional<String> getSearchIn() {
        return searchIn;
    }

    @JsonProperty("include_translation_fields")
    public Optional<Boolean> getIncludeTranslationFields() {
        return includeTranslationFields;
    }

    /**
     * @return Predefined top news sources per country.
     * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;top 100 US&quot;</code></li>
     * <li><code>&quot;top 33 AT&quot;</code></li>
     * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
     * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
     * </ul>
     */
    @JsonProperty("predefined_sources")
    public Optional<String> getPredefinedSources() {
        return predefinedSources;
    }

    /**
     * @return Word or phrase to search within the source names. To specify multiple values, use a comma-separated string.
     * <p>Example: <code>&quot;sport, tech&quot;</code></p>
     * <p><strong>Note</strong>: The search doesn't require an exact match and returns sources containing the specified terms in their names. You can use any word or phrase, like <code>&quot;sport&quot;</code> or <code>&quot;new york times&quot;</code>. For example, <code>&quot;sport&quot;</code> returns sources such as <code>&quot;Motorsport&quot;</code>, <code>&quot;Dot Esport&quot;</code>, and <code>&quot;Tuttosport&quot;</code>.</p>
     */
    @JsonProperty("source_name")
    public Optional<String> getSourceName() {
        return sourceName;
    }

    /**
     * @return One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;nytimes.com&quot;</code></li>
     * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
     * </ul>
     */
    @JsonProperty("sources")
    public Optional<String> getSources() {
        return sources;
    }

    /**
     * @return The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.
     * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
     */
    @JsonProperty("not_sources")
    public Optional<String> getNotSources() {
        return notSources;
    }

    /**
     * @return The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.
     * <p>Example: <code>&quot;en, es&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
     */
    @JsonProperty("lang")
    public Optional<String> getLang() {
        return lang;
    }

    /**
     * @return The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.
     * <p>Example: <code>&quot;fr, de&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
     */
    @JsonProperty("not_lang")
    public Optional<String> getNotLang() {
        return notLang;
    }

    /**
     * @return The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.
     * <p>Example: <code>&quot;US, CA&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
     */
    @JsonProperty("countries")
    public Optional<String> getCountries() {
        return countries;
    }

    /**
     * @return The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.
     * <p>Example:<code>&quot;US, CA&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
     */
    @JsonProperty("not_countries")
    public Optional<String> getNotCountries() {
        return notCountries;
    }

    /**
     * @return The list of author names to exclude from your search. To exclude articles by specific authors, use a comma-separated string.
     * <p>Example: <code>&quot;John Doe, Jane Doe&quot;</code></p>
     */
    @JsonProperty("not_author_name")
    public Optional<String> getNotAuthorName() {
        return notAuthorName;
    }

    /**
     * @return The starting point in time to search from. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.
     * <p>Formats with examples:</p>
     * <ul>
     * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
     * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
     * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
     * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
     * <li>English phrases: <code>7 day ago</code>, <code>today</code></li>
     * </ul>
     * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
     */
    @JsonProperty("from_")
    public Optional<OffsetDateTime> getFrom() {
        return from;
    }

    /**
     * @return The ending point in time to search up to. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.
     * <p>Formats with examples:</p>
     * <ul>
     * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
     * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
     * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
     * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
     * <li>English phrases: <code>1 day ago</code>, <code>now</code></li>
     * </ul>
     * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
     */
    @JsonProperty("to_")
    public Optional<OffsetDateTime> getTo() {
        return to;
    }

    /**
     * @return The precision of the published date. There are three types:
     * <ul>
     * <li><code>full</code>: The day and time of an article is correctly identified with the appropriate timezone.</li>
     * <li><code>timezone unknown</code>: The day and time of an article is correctly identified without timezone.</li>
     * <li><code>date</code>: Only the day is identified without an exact time.</li>
     * </ul>
     */
    @JsonProperty("published_date_precision")
    public Optional<SearchGetRequestPublishedDatePrecision> getPublishedDatePrecision() {
        return publishedDatePrecision;
    }

    /**
     * @return If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.
     */
    @JsonProperty("by_parse_date")
    public Optional<Boolean> getByParseDate() {
        return byParseDate;
    }

    /**
     * @return The sorting order of the results. Possible values are:
     * <ul>
     * <li><code>relevancy</code>: The most relevant results first.</li>
     * <li><code>date</code>: The most recently published results first.</li>
     * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
     * </ul>
     */
    @JsonProperty("sort_by")
    public Optional<SearchGetRequestSortBy> getSortBy() {
        return sortBy;
    }

    /**
     * @return If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.
     */
    @JsonProperty("ranked_only")
    public Optional<Boolean> getRankedOnly() {
        return rankedOnly;
    }

    /**
     * @return The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
     */
    @JsonProperty("from_rank")
    public Optional<Integer> getFromRank() {
        return fromRank;
    }

    /**
     * @return The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
     */
    @JsonProperty("to_rank")
    public Optional<Integer> getToRank() {
        return toRank;
    }

    /**
     * @return If true, only returns articles that were posted on the home page of a given news domain.
     */
    @JsonProperty("is_headline")
    public Optional<Boolean> getIsHeadline() {
        return isHeadline;
    }

    /**
     * @return If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.
     */
    @JsonProperty("is_opinion")
    public Optional<Boolean> getIsOpinion() {
        return isOpinion;
    }

    /**
     * @return If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.
     */
    @JsonProperty("is_paid_content")
    public Optional<Boolean> getIsPaidContent() {
        return isPaidContent;
    }

    /**
     * @return The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.
     * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
     */
    @JsonProperty("parent_url")
    public Optional<String> getParentUrl() {
        return parentUrl;
    }

    /**
     * @return The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.
     * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
     * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
     */
    @JsonProperty("all_links")
    public Optional<String> getAllLinks() {
        return allLinks;
    }

    /**
     * @return The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.
     * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
     * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
     */
    @JsonProperty("all_domain_links")
    public Optional<String> getAllDomainLinks() {
        return allDomainLinks;
    }

    /**
     * @return If true, includes additional domain information in the response for each article:
     * <ul>
     * <li><code>is_news_domain</code>: Boolean indicating if the source is a news domain.</li>
     * <li><code>news_domain_type</code>: Type of news domain (e.g., <code>&quot;Original Content&quot;</code>).</li>
     * <li><code>news_type</code>: Category of news (e.g., <code>&quot;News and Blogs&quot;</code>).</li>
     * </ul>
     */
    @JsonProperty("additional_domain_info")
    public Optional<Boolean> getAdditionalDomainInfo() {
        return additionalDomainInfo;
    }

    /**
     * @return If true, filters results to include only news domains.
     */
    @JsonProperty("is_news_domain")
    public Optional<Boolean> getIsNewsDomain() {
        return isNewsDomain;
    }

    /**
     * @return Filters results based on the news domain type. Possible values are:
     * <ul>
     * <li><code>Original Content</code>: Sources that produce their own content.</li>
     * <li><code>Aggregator</code>: Sources that collect content from various other sources.</li>
     * <li><code>Press Releases</code>: Sources primarily publishing press releases.</li>
     * <li><code>Republisher</code>: Sources that republish content from other sources.</li>
     * <li><code>Other</code>: Sources that don't fit into main categories.</li>
     * </ul>
     */
    @JsonProperty("news_domain_type")
    public Optional<SearchGetRequestNewsDomainType> getNewsDomainType() {
        return newsDomainType;
    }

    /**
     * @return Filters results based on the news type. Multiple types can be specified using a comma-separated string.
     * <p>Example: <code>&quot;General News Outlets,Tech News and Updates&quot;</code></p>
     * <p>For a complete list of available news types, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#news-type-news-type">Enumerated parameters &gt; News type</a>.</p>
     */
    @JsonProperty("news_type")
    public Optional<String> getNewsType() {
        return newsType;
    }

    /**
     * @return The minimum number of words an article must contain. To be used for avoiding articles with small content.
     */
    @JsonProperty("word_count_min")
    public Optional<Integer> getWordCountMin() {
        return wordCountMin;
    }

    /**
     * @return The maximum number of words an article can contain. To be used for avoiding articles with large content.
     */
    @JsonProperty("word_count_max")
    public Optional<Integer> getWordCountMax() {
        return wordCountMax;
    }

    /**
     * @return The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.
     * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The number of articles to return per page.
     */
    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Determines whether to group similar articles into clusters. If true, the API returns clustered results.
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
     */
    @JsonProperty("clustering_enabled")
    public Optional<Boolean> getClusteringEnabled() {
        return clusteringEnabled;
    }

    /**
     * @return Specifies which part of the article to use for determining similarity when clustering.
     * <p>Possible values are:</p>
     * <ul>
     * <li><code>content</code>: Uses the full article content (default).</li>
     * <li><code>title</code>: Uses only the article title.</li>
     * <li><code>summary</code>: Uses the article summary.</li>
     * </ul>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
     */
    @JsonProperty("clustering_variable")
    public Optional<SearchGetRequestClusteringVariable> getClusteringVariable() {
        return clusteringVariable;
    }

    /**
     * @return Sets the similarity threshold for grouping articles into clusters. A lower value creates more inclusive clusters, while a higher value requires greater similarity between articles.
     * <p>Examples:</p>
     * <ul>
     * <li><code>0.3</code>: Results in larger, more diverse clusters.</li>
     * <li><code>0.6</code>: Balances cluster size and article similarity (default).</li>
     * <li><code>0.9</code>: Creates smaller, tightly related clusters.</li>
     * </ul>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
     */
    @JsonProperty("clustering_threshold")
    public Optional<Float> getClusteringThreshold() {
        return clusteringThreshold;
    }

    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    /**
     * @return Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
     */
    @JsonProperty("theme")
    public Optional<String> getTheme() {
        return theme;
    }

    /**
     * @return Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("not_theme")
    public Optional<String> getNotTheme() {
        return notTheme;
    }

    /**
     * @return Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
     * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("ORG_entity_name")
    public Optional<String> getOrgEntityName() {
        return orgEntityName;
    }

    /**
     * @return Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
     * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("PER_entity_name")
    public Optional<String> getPerEntityName() {
        return perEntityName;
    }

    /**
     * @return Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;California, New York&quot;</code></p>
     * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("LOC_entity_name")
    public Optional<String> getLocEntityName() {
        return locEntityName;
    }

    /**
     * @return Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
     * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("MISC_entity_name")
    public Optional<String> getMiscEntityName() {
        return miscEntityName;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_min")
    public Optional<Float> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_max")
    public Optional<Float> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_min")
    public Optional<Float> getContentSentimentMin() {
        return contentSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_max")
    public Optional<Float> getContentSentimentMax() {
        return contentSentimentMax;
    }

    /**
     * @return Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.
     * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
     * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
     * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
     */
    @JsonProperty("iptc_tags")
    public Optional<String> getIptcTags() {
        return iptcTags;
    }

    /**
     * @return Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.
     * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
     * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
     */
    @JsonProperty("not_iptc_tags")
    public Optional<String> getNotIptcTags() {
        return notIptcTags;
    }

    /**
     * @return Filters articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories, use a comma-separated string.
     * <p>Example: <code>&quot;Business, Events&quot;</code></p>
     * <p><strong>Note</strong>: The <code>iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
     * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
     */
    @JsonProperty("iab_tags")
    public Optional<String> getIabTags() {
        return iabTags;
    }

    /**
     * @return Inverse of the <code>iab_tags</code> parameter. Excludes articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories to exclude, use a comma-separated string.
     * <p>Example: <code>&quot;Agriculture, Metals&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
     * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
     */
    @JsonProperty("not_iab_tags")
    public Optional<String> getNotIabTags() {
        return notIabTags;
    }

    /**
     * @return Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:
     * <ul>
     * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
     * </ul>
     * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
     * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
     */
    @JsonProperty("custom_tags")
    public Optional<String> getCustomTags() {
        return customTags;
    }

    /**
     * @return If true, excludes duplicate and highly similar articles from the search results. If false, returns all relevant articles, including duplicates.
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/articles-deduplication">Articles deduplication</a>.</p>
     */
    @JsonProperty("exclude_duplicates")
    public Optional<Boolean> getExcludeDuplicates() {
        return excludeDuplicates;
    }

    /**
     * @return If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.
     */
    @JsonProperty("robots_compliant")
    public Optional<Boolean> getRobotsCompliant() {
        return robotsCompliant;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchGetRequest && equalTo((SearchGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchGetRequest other) {
        return q.equals(other.q)
                && searchIn.equals(other.searchIn)
                && includeTranslationFields.equals(other.includeTranslationFields)
                && predefinedSources.equals(other.predefinedSources)
                && sourceName.equals(other.sourceName)
                && sources.equals(other.sources)
                && notSources.equals(other.notSources)
                && lang.equals(other.lang)
                && notLang.equals(other.notLang)
                && countries.equals(other.countries)
                && notCountries.equals(other.notCountries)
                && notAuthorName.equals(other.notAuthorName)
                && from.equals(other.from)
                && to.equals(other.to)
                && publishedDatePrecision.equals(other.publishedDatePrecision)
                && byParseDate.equals(other.byParseDate)
                && sortBy.equals(other.sortBy)
                && rankedOnly.equals(other.rankedOnly)
                && fromRank.equals(other.fromRank)
                && toRank.equals(other.toRank)
                && isHeadline.equals(other.isHeadline)
                && isOpinion.equals(other.isOpinion)
                && isPaidContent.equals(other.isPaidContent)
                && parentUrl.equals(other.parentUrl)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && additionalDomainInfo.equals(other.additionalDomainInfo)
                && isNewsDomain.equals(other.isNewsDomain)
                && newsDomainType.equals(other.newsDomainType)
                && newsType.equals(other.newsType)
                && wordCountMin.equals(other.wordCountMin)
                && wordCountMax.equals(other.wordCountMax)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && clusteringEnabled.equals(other.clusteringEnabled)
                && clusteringVariable.equals(other.clusteringVariable)
                && clusteringThreshold.equals(other.clusteringThreshold)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && orgEntityName.equals(other.orgEntityName)
                && perEntityName.equals(other.perEntityName)
                && locEntityName.equals(other.locEntityName)
                && miscEntityName.equals(other.miscEntityName)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && iptcTags.equals(other.iptcTags)
                && notIptcTags.equals(other.notIptcTags)
                && iabTags.equals(other.iabTags)
                && notIabTags.equals(other.notIabTags)
                && customTags.equals(other.customTags)
                && excludeDuplicates.equals(other.excludeDuplicates)
                && robotsCompliant.equals(other.robotsCompliant);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.q,
                this.searchIn,
                this.includeTranslationFields,
                this.predefinedSources,
                this.sourceName,
                this.sources,
                this.notSources,
                this.lang,
                this.notLang,
                this.countries,
                this.notCountries,
                this.notAuthorName,
                this.from,
                this.to,
                this.publishedDatePrecision,
                this.byParseDate,
                this.sortBy,
                this.rankedOnly,
                this.fromRank,
                this.toRank,
                this.isHeadline,
                this.isOpinion,
                this.isPaidContent,
                this.parentUrl,
                this.allLinks,
                this.allDomainLinks,
                this.additionalDomainInfo,
                this.isNewsDomain,
                this.newsDomainType,
                this.newsType,
                this.wordCountMin,
                this.wordCountMax,
                this.page,
                this.pageSize,
                this.clusteringEnabled,
                this.clusteringVariable,
                this.clusteringThreshold,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.orgEntityName,
                this.perEntityName,
                this.locEntityName,
                this.miscEntityName,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.iptcTags,
                this.notIptcTags,
                this.iabTags,
                this.notIabTags,
                this.customTags,
                this.excludeDuplicates,
                this.robotsCompliant);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QStage builder() {
        return new Builder();
    }

    public interface QStage {
        /**
         * <p>The keyword(s) to search for in articles. Query syntax supports logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and wildcards:</p>
         * <ul>
         * <li>For an exact match, use double quotes. For example, <code>&quot;technology news&quot;</code>.</li>
         * <li>Use <code>*</code> to search for any keyword.</li>
         * <li>Use <code>+</code> to include and <code>-</code> to exclude specific words or phrases.
         * For example, <code>+Apple</code>, <code>-Google</code>.</li>
         * <li>Use <code>AND</code>, <code>OR</code>, and <code>NOT</code> to refine search results.
         * For example, <code>technology AND (Apple OR Microsoft) NOT Google</code>.</li>
         * </ul>
         * <p>For more details, see <a href="/docs/v3/documentation/guides-and-concepts/advanced-querying">Advanced querying</a>.</p>
         */
        _FinalStage q(@NotNull String q);

        Builder from(SearchGetRequest other);
    }

    public interface _FinalStage {
        SearchGetRequest build();

        _FinalStage searchIn(Optional<String> searchIn);

        _FinalStage searchIn(String searchIn);

        _FinalStage includeTranslationFields(Optional<Boolean> includeTranslationFields);

        _FinalStage includeTranslationFields(Boolean includeTranslationFields);

        /**
         * <p>Predefined top news sources per country.</p>
         * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;top 100 US&quot;</code></li>
         * <li><code>&quot;top 33 AT&quot;</code></li>
         * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
         * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
         * </ul>
         */
        _FinalStage predefinedSources(Optional<String> predefinedSources);

        _FinalStage predefinedSources(String predefinedSources);

        /**
         * <p>Word or phrase to search within the source names. To specify multiple values, use a comma-separated string.</p>
         * <p>Example: <code>&quot;sport, tech&quot;</code></p>
         * <p><strong>Note</strong>: The search doesn't require an exact match and returns sources containing the specified terms in their names. You can use any word or phrase, like <code>&quot;sport&quot;</code> or <code>&quot;new york times&quot;</code>. For example, <code>&quot;sport&quot;</code> returns sources such as <code>&quot;Motorsport&quot;</code>, <code>&quot;Dot Esport&quot;</code>, and <code>&quot;Tuttosport&quot;</code>.</p>
         */
        _FinalStage sourceName(Optional<String> sourceName);

        _FinalStage sourceName(String sourceName);

        /**
         * <p>One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;nytimes.com&quot;</code></li>
         * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
         * </ul>
         */
        _FinalStage sources(Optional<String> sources);

        _FinalStage sources(String sources);

        /**
         * <p>The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.</p>
         * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
         */
        _FinalStage notSources(Optional<String> notSources);

        _FinalStage notSources(String notSources);

        /**
         * <p>The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;en, es&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         */
        _FinalStage lang(Optional<String> lang);

        _FinalStage lang(String lang);

        /**
         * <p>The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;fr, de&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         */
        _FinalStage notLang(Optional<String> notLang);

        _FinalStage notLang(String notLang);

        /**
         * <p>The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.</p>
         * <p>Example: <code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         */
        _FinalStage countries(Optional<String> countries);

        _FinalStage countries(String countries);

        /**
         * <p>The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.</p>
         * <p>Example:<code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         */
        _FinalStage notCountries(Optional<String> notCountries);

        _FinalStage notCountries(String notCountries);

        /**
         * <p>The list of author names to exclude from your search. To exclude articles by specific authors, use a comma-separated string.</p>
         * <p>Example: <code>&quot;John Doe, Jane Doe&quot;</code></p>
         */
        _FinalStage notAuthorName(Optional<String> notAuthorName);

        _FinalStage notAuthorName(String notAuthorName);

        /**
         * <p>The starting point in time to search from. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>7 day ago</code>, <code>today</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         */
        _FinalStage from(Optional<OffsetDateTime> from);

        _FinalStage from(OffsetDateTime from);

        /**
         * <p>The ending point in time to search up to. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>1 day ago</code>, <code>now</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         */
        _FinalStage to(Optional<OffsetDateTime> to);

        _FinalStage to(OffsetDateTime to);

        /**
         * <p>The precision of the published date. There are three types:</p>
         * <ul>
         * <li><code>full</code>: The day and time of an article is correctly identified with the appropriate timezone.</li>
         * <li><code>timezone unknown</code>: The day and time of an article is correctly identified without timezone.</li>
         * <li><code>date</code>: Only the day is identified without an exact time.</li>
         * </ul>
         */
        _FinalStage publishedDatePrecision(Optional<SearchGetRequestPublishedDatePrecision> publishedDatePrecision);

        _FinalStage publishedDatePrecision(SearchGetRequestPublishedDatePrecision publishedDatePrecision);

        /**
         * <p>If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.</p>
         */
        _FinalStage byParseDate(Optional<Boolean> byParseDate);

        _FinalStage byParseDate(Boolean byParseDate);

        /**
         * <p>The sorting order of the results. Possible values are:</p>
         * <ul>
         * <li><code>relevancy</code>: The most relevant results first.</li>
         * <li><code>date</code>: The most recently published results first.</li>
         * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
         * </ul>
         */
        _FinalStage sortBy(Optional<SearchGetRequestSortBy> sortBy);

        _FinalStage sortBy(SearchGetRequestSortBy sortBy);

        /**
         * <p>If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.</p>
         */
        _FinalStage rankedOnly(Optional<Boolean> rankedOnly);

        _FinalStage rankedOnly(Boolean rankedOnly);

        /**
         * <p>The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         */
        _FinalStage fromRank(Optional<Integer> fromRank);

        _FinalStage fromRank(Integer fromRank);

        /**
         * <p>The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         */
        _FinalStage toRank(Optional<Integer> toRank);

        _FinalStage toRank(Integer toRank);

        /**
         * <p>If true, only returns articles that were posted on the home page of a given news domain.</p>
         */
        _FinalStage isHeadline(Optional<Boolean> isHeadline);

        _FinalStage isHeadline(Boolean isHeadline);

        /**
         * <p>If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.</p>
         */
        _FinalStage isOpinion(Optional<Boolean> isOpinion);

        _FinalStage isOpinion(Boolean isOpinion);

        /**
         * <p>If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.</p>
         */
        _FinalStage isPaidContent(Optional<Boolean> isPaidContent);

        _FinalStage isPaidContent(Boolean isPaidContent);

        /**
         * <p>The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
         */
        _FinalStage parentUrl(Optional<String> parentUrl);

        _FinalStage parentUrl(String parentUrl);

        /**
         * <p>The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         */
        _FinalStage allLinks(Optional<String> allLinks);

        _FinalStage allLinks(String allLinks);

        /**
         * <p>The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.</p>
         * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         */
        _FinalStage allDomainLinks(Optional<String> allDomainLinks);

        _FinalStage allDomainLinks(String allDomainLinks);

        /**
         * <p>If true, includes additional domain information in the response for each article:</p>
         * <ul>
         * <li><code>is_news_domain</code>: Boolean indicating if the source is a news domain.</li>
         * <li><code>news_domain_type</code>: Type of news domain (e.g., <code>&quot;Original Content&quot;</code>).</li>
         * <li><code>news_type</code>: Category of news (e.g., <code>&quot;News and Blogs&quot;</code>).</li>
         * </ul>
         */
        _FinalStage additionalDomainInfo(Optional<Boolean> additionalDomainInfo);

        _FinalStage additionalDomainInfo(Boolean additionalDomainInfo);

        /**
         * <p>If true, filters results to include only news domains.</p>
         */
        _FinalStage isNewsDomain(Optional<Boolean> isNewsDomain);

        _FinalStage isNewsDomain(Boolean isNewsDomain);

        /**
         * <p>Filters results based on the news domain type. Possible values are:</p>
         * <ul>
         * <li><code>Original Content</code>: Sources that produce their own content.</li>
         * <li><code>Aggregator</code>: Sources that collect content from various other sources.</li>
         * <li><code>Press Releases</code>: Sources primarily publishing press releases.</li>
         * <li><code>Republisher</code>: Sources that republish content from other sources.</li>
         * <li><code>Other</code>: Sources that don't fit into main categories.</li>
         * </ul>
         */
        _FinalStage newsDomainType(Optional<SearchGetRequestNewsDomainType> newsDomainType);

        _FinalStage newsDomainType(SearchGetRequestNewsDomainType newsDomainType);

        /**
         * <p>Filters results based on the news type. Multiple types can be specified using a comma-separated string.</p>
         * <p>Example: <code>&quot;General News Outlets,Tech News and Updates&quot;</code></p>
         * <p>For a complete list of available news types, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#news-type-news-type">Enumerated parameters &gt; News type</a>.</p>
         */
        _FinalStage newsType(Optional<String> newsType);

        _FinalStage newsType(String newsType);

        /**
         * <p>The minimum number of words an article must contain. To be used for avoiding articles with small content.</p>
         */
        _FinalStage wordCountMin(Optional<Integer> wordCountMin);

        _FinalStage wordCountMin(Integer wordCountMin);

        /**
         * <p>The maximum number of words an article can contain. To be used for avoiding articles with large content.</p>
         */
        _FinalStage wordCountMax(Optional<Integer> wordCountMax);

        _FinalStage wordCountMax(Integer wordCountMax);

        /**
         * <p>The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.</p>
         * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
         */
        _FinalStage page(Optional<Integer> page);

        _FinalStage page(Integer page);

        /**
         * <p>The number of articles to return per page.</p>
         */
        _FinalStage pageSize(Optional<Integer> pageSize);

        _FinalStage pageSize(Integer pageSize);

        /**
         * <p>Determines whether to group similar articles into clusters. If true, the API returns clustered results.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         */
        _FinalStage clusteringEnabled(Optional<Boolean> clusteringEnabled);

        _FinalStage clusteringEnabled(Boolean clusteringEnabled);

        /**
         * <p>Specifies which part of the article to use for determining similarity when clustering.</p>
         * <p>Possible values are:</p>
         * <ul>
         * <li><code>content</code>: Uses the full article content (default).</li>
         * <li><code>title</code>: Uses only the article title.</li>
         * <li><code>summary</code>: Uses the article summary.</li>
         * </ul>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         */
        _FinalStage clusteringVariable(Optional<SearchGetRequestClusteringVariable> clusteringVariable);

        _FinalStage clusteringVariable(SearchGetRequestClusteringVariable clusteringVariable);

        /**
         * <p>Sets the similarity threshold for grouping articles into clusters. A lower value creates more inclusive clusters, while a higher value requires greater similarity between articles.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>0.3</code>: Results in larger, more diverse clusters.</li>
         * <li><code>0.6</code>: Balances cluster size and article similarity (default).</li>
         * <li><code>0.9</code>: Creates smaller, tightly related clusters.</li>
         * </ul>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         */
        _FinalStage clusteringThreshold(Optional<Float> clusteringThreshold);

        _FinalStage clusteringThreshold(Float clusteringThreshold);

        _FinalStage includeNlpData(Optional<Boolean> includeNlpData);

        _FinalStage includeNlpData(Boolean includeNlpData);

        _FinalStage hasNlp(Optional<Boolean> hasNlp);

        _FinalStage hasNlp(Boolean hasNlp);

        /**
         * <p>Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
         */
        _FinalStage theme(Optional<String> theme);

        _FinalStage theme(String theme);

        /**
         * <p>Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        _FinalStage notTheme(Optional<String> notTheme);

        _FinalStage notTheme(String notTheme);

        /**
         * <p>Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
         * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        _FinalStage orgEntityName(Optional<String> orgEntityName);

        _FinalStage orgEntityName(String orgEntityName);

        /**
         * <p>Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
         * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        _FinalStage perEntityName(Optional<String> perEntityName);

        _FinalStage perEntityName(String perEntityName);

        /**
         * <p>Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;California, New York&quot;</code></p>
         * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        _FinalStage locEntityName(Optional<String> locEntityName);

        _FinalStage locEntityName(String locEntityName);

        /**
         * <p>Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
         * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        _FinalStage miscEntityName(Optional<String> miscEntityName);

        _FinalStage miscEntityName(String miscEntityName);

        /**
         * <p>Filters articles based on the minimum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        _FinalStage titleSentimentMin(Optional<Float> titleSentimentMin);

        _FinalStage titleSentimentMin(Float titleSentimentMin);

        /**
         * <p>Filters articles based on the maximum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        _FinalStage titleSentimentMax(Optional<Float> titleSentimentMax);

        _FinalStage titleSentimentMax(Float titleSentimentMax);

        /**
         * <p>Filters articles based on the minimum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        _FinalStage contentSentimentMin(Optional<Float> contentSentimentMin);

        _FinalStage contentSentimentMin(Float contentSentimentMin);

        /**
         * <p>Filters articles based on the maximum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        _FinalStage contentSentimentMax(Optional<Float> contentSentimentMax);

        _FinalStage contentSentimentMax(Float contentSentimentMax);

        /**
         * <p>Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         */
        _FinalStage iptcTags(Optional<String> iptcTags);

        _FinalStage iptcTags(String iptcTags);

        /**
         * <p>Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         */
        _FinalStage notIptcTags(Optional<String> notIptcTags);

        _FinalStage notIptcTags(String notIptcTags);

        /**
         * <p>Filters articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Business, Events&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
         */
        _FinalStage iabTags(Optional<String> iabTags);

        _FinalStage iabTags(String iabTags);

        /**
         * <p>Inverse of the <code>iab_tags</code> parameter. Excludes articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories to exclude, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Agriculture, Metals&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
         */
        _FinalStage notIabTags(Optional<String> notIabTags);

        _FinalStage notIabTags(String notIabTags);

        /**
         * <p>Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:</p>
         * <ul>
         * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
         * </ul>
         * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
         * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
         */
        _FinalStage customTags(Optional<String> customTags);

        _FinalStage customTags(String customTags);

        /**
         * <p>If true, excludes duplicate and highly similar articles from the search results. If false, returns all relevant articles, including duplicates.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/articles-deduplication">Articles deduplication</a>.</p>
         */
        _FinalStage excludeDuplicates(Optional<Boolean> excludeDuplicates);

        _FinalStage excludeDuplicates(Boolean excludeDuplicates);

        /**
         * <p>If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.</p>
         */
        _FinalStage robotsCompliant(Optional<Boolean> robotsCompliant);

        _FinalStage robotsCompliant(Boolean robotsCompliant);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QStage, _FinalStage {
        private String q;

        private Optional<Boolean> robotsCompliant = Optional.empty();

        private Optional<Boolean> excludeDuplicates = Optional.empty();

        private Optional<String> customTags = Optional.empty();

        private Optional<String> notIabTags = Optional.empty();

        private Optional<String> iabTags = Optional.empty();

        private Optional<String> notIptcTags = Optional.empty();

        private Optional<String> iptcTags = Optional.empty();

        private Optional<Float> contentSentimentMax = Optional.empty();

        private Optional<Float> contentSentimentMin = Optional.empty();

        private Optional<Float> titleSentimentMax = Optional.empty();

        private Optional<Float> titleSentimentMin = Optional.empty();

        private Optional<String> miscEntityName = Optional.empty();

        private Optional<String> locEntityName = Optional.empty();

        private Optional<String> perEntityName = Optional.empty();

        private Optional<String> orgEntityName = Optional.empty();

        private Optional<String> notTheme = Optional.empty();

        private Optional<String> theme = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Float> clusteringThreshold = Optional.empty();

        private Optional<SearchGetRequestClusteringVariable> clusteringVariable = Optional.empty();

        private Optional<Boolean> clusteringEnabled = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> wordCountMax = Optional.empty();

        private Optional<Integer> wordCountMin = Optional.empty();

        private Optional<String> newsType = Optional.empty();

        private Optional<SearchGetRequestNewsDomainType> newsDomainType = Optional.empty();

        private Optional<Boolean> isNewsDomain = Optional.empty();

        private Optional<Boolean> additionalDomainInfo = Optional.empty();

        private Optional<String> allDomainLinks = Optional.empty();

        private Optional<String> allLinks = Optional.empty();

        private Optional<String> parentUrl = Optional.empty();

        private Optional<Boolean> isPaidContent = Optional.empty();

        private Optional<Boolean> isOpinion = Optional.empty();

        private Optional<Boolean> isHeadline = Optional.empty();

        private Optional<Integer> toRank = Optional.empty();

        private Optional<Integer> fromRank = Optional.empty();

        private Optional<Boolean> rankedOnly = Optional.empty();

        private Optional<SearchGetRequestSortBy> sortBy = Optional.empty();

        private Optional<Boolean> byParseDate = Optional.empty();

        private Optional<SearchGetRequestPublishedDatePrecision> publishedDatePrecision = Optional.empty();

        private Optional<OffsetDateTime> to = Optional.empty();

        private Optional<OffsetDateTime> from = Optional.empty();

        private Optional<String> notAuthorName = Optional.empty();

        private Optional<String> notCountries = Optional.empty();

        private Optional<String> countries = Optional.empty();

        private Optional<String> notLang = Optional.empty();

        private Optional<String> lang = Optional.empty();

        private Optional<String> notSources = Optional.empty();

        private Optional<String> sources = Optional.empty();

        private Optional<String> sourceName = Optional.empty();

        private Optional<String> predefinedSources = Optional.empty();

        private Optional<Boolean> includeTranslationFields = Optional.empty();

        private Optional<String> searchIn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchGetRequest other) {
            q(other.getQ());
            searchIn(other.getSearchIn());
            includeTranslationFields(other.getIncludeTranslationFields());
            predefinedSources(other.getPredefinedSources());
            sourceName(other.getSourceName());
            sources(other.getSources());
            notSources(other.getNotSources());
            lang(other.getLang());
            notLang(other.getNotLang());
            countries(other.getCountries());
            notCountries(other.getNotCountries());
            notAuthorName(other.getNotAuthorName());
            from(other.getFrom());
            to(other.getTo());
            publishedDatePrecision(other.getPublishedDatePrecision());
            byParseDate(other.getByParseDate());
            sortBy(other.getSortBy());
            rankedOnly(other.getRankedOnly());
            fromRank(other.getFromRank());
            toRank(other.getToRank());
            isHeadline(other.getIsHeadline());
            isOpinion(other.getIsOpinion());
            isPaidContent(other.getIsPaidContent());
            parentUrl(other.getParentUrl());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            additionalDomainInfo(other.getAdditionalDomainInfo());
            isNewsDomain(other.getIsNewsDomain());
            newsDomainType(other.getNewsDomainType());
            newsType(other.getNewsType());
            wordCountMin(other.getWordCountMin());
            wordCountMax(other.getWordCountMax());
            page(other.getPage());
            pageSize(other.getPageSize());
            clusteringEnabled(other.getClusteringEnabled());
            clusteringVariable(other.getClusteringVariable());
            clusteringThreshold(other.getClusteringThreshold());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            orgEntityName(other.getOrgEntityName());
            perEntityName(other.getPerEntityName());
            locEntityName(other.getLocEntityName());
            miscEntityName(other.getMiscEntityName());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            iptcTags(other.getIptcTags());
            notIptcTags(other.getNotIptcTags());
            iabTags(other.getIabTags());
            notIabTags(other.getNotIabTags());
            customTags(other.getCustomTags());
            excludeDuplicates(other.getExcludeDuplicates());
            robotsCompliant(other.getRobotsCompliant());
            return this;
        }

        /**
         * <p>The keyword(s) to search for in articles. Query syntax supports logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and wildcards:</p>
         * <ul>
         * <li>For an exact match, use double quotes. For example, <code>&quot;technology news&quot;</code>.</li>
         * <li>Use <code>*</code> to search for any keyword.</li>
         * <li>Use <code>+</code> to include and <code>-</code> to exclude specific words or phrases.
         * For example, <code>+Apple</code>, <code>-Google</code>.</li>
         * <li>Use <code>AND</code>, <code>OR</code>, and <code>NOT</code> to refine search results.
         * For example, <code>technology AND (Apple OR Microsoft) NOT Google</code>.</li>
         * </ul>
         * <p>For more details, see <a href="/docs/v3/documentation/guides-and-concepts/advanced-querying">Advanced querying</a>.</p>
         * <p>The keyword(s) to search for in articles. Query syntax supports logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and wildcards:</p>
         * <ul>
         * <li>For an exact match, use double quotes. For example, <code>&quot;technology news&quot;</code>.</li>
         * <li>Use <code>*</code> to search for any keyword.</li>
         * <li>Use <code>+</code> to include and <code>-</code> to exclude specific words or phrases.
         * For example, <code>+Apple</code>, <code>-Google</code>.</li>
         * <li>Use <code>AND</code>, <code>OR</code>, and <code>NOT</code> to refine search results.
         * For example, <code>technology AND (Apple OR Microsoft) NOT Google</code>.</li>
         * </ul>
         * <p>For more details, see <a href="/docs/v3/documentation/guides-and-concepts/advanced-querying">Advanced querying</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("q")
        public _FinalStage q(@NotNull String q) {
            this.q = Objects.requireNonNull(q, "q must not be null");
            return this;
        }

        /**
         * <p>If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage robotsCompliant(Boolean robotsCompliant) {
            this.robotsCompliant = Optional.ofNullable(robotsCompliant);
            return this;
        }

        /**
         * <p>If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "robots_compliant", nulls = Nulls.SKIP)
        public _FinalStage robotsCompliant(Optional<Boolean> robotsCompliant) {
            this.robotsCompliant = robotsCompliant;
            return this;
        }

        /**
         * <p>If true, excludes duplicate and highly similar articles from the search results. If false, returns all relevant articles, including duplicates.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/articles-deduplication">Articles deduplication</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage excludeDuplicates(Boolean excludeDuplicates) {
            this.excludeDuplicates = Optional.ofNullable(excludeDuplicates);
            return this;
        }

        /**
         * <p>If true, excludes duplicate and highly similar articles from the search results. If false, returns all relevant articles, including duplicates.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/articles-deduplication">Articles deduplication</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "exclude_duplicates", nulls = Nulls.SKIP)
        public _FinalStage excludeDuplicates(Optional<Boolean> excludeDuplicates) {
            this.excludeDuplicates = excludeDuplicates;
            return this;
        }

        /**
         * <p>Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:</p>
         * <ul>
         * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
         * </ul>
         * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
         * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customTags(String customTags) {
            this.customTags = Optional.ofNullable(customTags);
            return this;
        }

        /**
         * <p>Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:</p>
         * <ul>
         * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
         * </ul>
         * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
         * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "custom_tags", nulls = Nulls.SKIP)
        public _FinalStage customTags(Optional<String> customTags) {
            this.customTags = customTags;
            return this;
        }

        /**
         * <p>Inverse of the <code>iab_tags</code> parameter. Excludes articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories to exclude, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Agriculture, Metals&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notIabTags(String notIabTags) {
            this.notIabTags = Optional.ofNullable(notIabTags);
            return this;
        }

        /**
         * <p>Inverse of the <code>iab_tags</code> parameter. Excludes articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories to exclude, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Agriculture, Metals&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_iab_tags", nulls = Nulls.SKIP)
        public _FinalStage notIabTags(Optional<String> notIabTags) {
            this.notIabTags = notIabTags;
            return this;
        }

        /**
         * <p>Filters articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Business, Events&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage iabTags(String iabTags) {
            this.iabTags = Optional.ofNullable(iabTags);
            return this;
        }

        /**
         * <p>Filters articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Business, Events&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iab_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "iab_tags", nulls = Nulls.SKIP)
        public _FinalStage iabTags(Optional<String> iabTags) {
            this.iabTags = iabTags;
            return this;
        }

        /**
         * <p>Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notIptcTags(String notIptcTags) {
            this.notIptcTags = Optional.ofNullable(notIptcTags);
            return this;
        }

        /**
         * <p>Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_iptc_tags", nulls = Nulls.SKIP)
        public _FinalStage notIptcTags(Optional<String> notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }

        /**
         * <p>Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage iptcTags(String iptcTags) {
            this.iptcTags = Optional.ofNullable(iptcTags);
            return this;
        }

        /**
         * <p>Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.</p>
         * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
         * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available in the <code>v3_nlp_iptc_tags</code> subscription plan.</p>
         * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "iptc_tags", nulls = Nulls.SKIP)
        public _FinalStage iptcTags(Optional<String> iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contentSentimentMax(Float contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public _FinalStage contentSentimentMax(Optional<Float> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contentSentimentMin(Float contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public _FinalStage contentSentimentMin(Optional<Float> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage titleSentimentMax(Float titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public _FinalStage titleSentimentMax(Optional<Float> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage titleSentimentMin(Float titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public _FinalStage titleSentimentMin(Optional<Float> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        /**
         * <p>Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
         * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage miscEntityName(String miscEntityName) {
            this.miscEntityName = Optional.ofNullable(miscEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
         * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "MISC_entity_name", nulls = Nulls.SKIP)
        public _FinalStage miscEntityName(Optional<String> miscEntityName) {
            this.miscEntityName = miscEntityName;
            return this;
        }

        /**
         * <p>Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;California, New York&quot;</code></p>
         * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locEntityName(String locEntityName) {
            this.locEntityName = Optional.ofNullable(locEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;California, New York&quot;</code></p>
         * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "LOC_entity_name", nulls = Nulls.SKIP)
        public _FinalStage locEntityName(Optional<String> locEntityName) {
            this.locEntityName = locEntityName;
            return this;
        }

        /**
         * <p>Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
         * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage perEntityName(String perEntityName) {
            this.perEntityName = Optional.ofNullable(perEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
         * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PER_entity_name", nulls = Nulls.SKIP)
        public _FinalStage perEntityName(Optional<String> perEntityName) {
            this.perEntityName = perEntityName;
            return this;
        }

        /**
         * <p>Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
         * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orgEntityName(String orgEntityName) {
            this.orgEntityName = Optional.ofNullable(orgEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
         * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ORG_entity_name", nulls = Nulls.SKIP)
        public _FinalStage orgEntityName(Optional<String> orgEntityName) {
            this.orgEntityName = orgEntityName;
            return this;
        }

        /**
         * <p>Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notTheme(String notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        /**
         * <p>Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public _FinalStage notTheme(Optional<String> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        /**
         * <p>Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage theme(String theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        /**
         * <p>Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public _FinalStage theme(Optional<String> theme) {
            this.theme = theme;
            return this;
        }

        @java.lang.Override
        public _FinalStage hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public _FinalStage hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        @java.lang.Override
        public _FinalStage includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public _FinalStage includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        /**
         * <p>Sets the similarity threshold for grouping articles into clusters. A lower value creates more inclusive clusters, while a higher value requires greater similarity between articles.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>0.3</code>: Results in larger, more diverse clusters.</li>
         * <li><code>0.6</code>: Balances cluster size and article similarity (default).</li>
         * <li><code>0.9</code>: Creates smaller, tightly related clusters.</li>
         * </ul>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clusteringThreshold(Float clusteringThreshold) {
            this.clusteringThreshold = Optional.ofNullable(clusteringThreshold);
            return this;
        }

        /**
         * <p>Sets the similarity threshold for grouping articles into clusters. A lower value creates more inclusive clusters, while a higher value requires greater similarity between articles.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>0.3</code>: Results in larger, more diverse clusters.</li>
         * <li><code>0.6</code>: Balances cluster size and article similarity (default).</li>
         * <li><code>0.9</code>: Creates smaller, tightly related clusters.</li>
         * </ul>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "clustering_threshold", nulls = Nulls.SKIP)
        public _FinalStage clusteringThreshold(Optional<Float> clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }

        /**
         * <p>Specifies which part of the article to use for determining similarity when clustering.</p>
         * <p>Possible values are:</p>
         * <ul>
         * <li><code>content</code>: Uses the full article content (default).</li>
         * <li><code>title</code>: Uses only the article title.</li>
         * <li><code>summary</code>: Uses the article summary.</li>
         * </ul>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clusteringVariable(SearchGetRequestClusteringVariable clusteringVariable) {
            this.clusteringVariable = Optional.ofNullable(clusteringVariable);
            return this;
        }

        /**
         * <p>Specifies which part of the article to use for determining similarity when clustering.</p>
         * <p>Possible values are:</p>
         * <ul>
         * <li><code>content</code>: Uses the full article content (default).</li>
         * <li><code>title</code>: Uses only the article title.</li>
         * <li><code>summary</code>: Uses the article summary.</li>
         * </ul>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "clustering_variable", nulls = Nulls.SKIP)
        public _FinalStage clusteringVariable(Optional<SearchGetRequestClusteringVariable> clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }

        /**
         * <p>Determines whether to group similar articles into clusters. If true, the API returns clustered results.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = Optional.ofNullable(clusteringEnabled);
            return this;
        }

        /**
         * <p>Determines whether to group similar articles into clusters. If true, the API returns clustered results.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "clustering_enabled", nulls = Nulls.SKIP)
        public _FinalStage clusteringEnabled(Optional<Boolean> clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }

        /**
         * <p>The number of articles to return per page.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * <p>The number of articles to return per page.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public _FinalStage pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * <p>The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.</p>
         * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.</p>
         * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public _FinalStage page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        /**
         * <p>The maximum number of words an article can contain. To be used for avoiding articles with large content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage wordCountMax(Integer wordCountMax) {
            this.wordCountMax = Optional.ofNullable(wordCountMax);
            return this;
        }

        /**
         * <p>The maximum number of words an article can contain. To be used for avoiding articles with large content.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "word_count_max", nulls = Nulls.SKIP)
        public _FinalStage wordCountMax(Optional<Integer> wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }

        /**
         * <p>The minimum number of words an article must contain. To be used for avoiding articles with small content.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage wordCountMin(Integer wordCountMin) {
            this.wordCountMin = Optional.ofNullable(wordCountMin);
            return this;
        }

        /**
         * <p>The minimum number of words an article must contain. To be used for avoiding articles with small content.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "word_count_min", nulls = Nulls.SKIP)
        public _FinalStage wordCountMin(Optional<Integer> wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }

        /**
         * <p>Filters results based on the news type. Multiple types can be specified using a comma-separated string.</p>
         * <p>Example: <code>&quot;General News Outlets,Tech News and Updates&quot;</code></p>
         * <p>For a complete list of available news types, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#news-type-news-type">Enumerated parameters &gt; News type</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage newsType(String newsType) {
            this.newsType = Optional.ofNullable(newsType);
            return this;
        }

        /**
         * <p>Filters results based on the news type. Multiple types can be specified using a comma-separated string.</p>
         * <p>Example: <code>&quot;General News Outlets,Tech News and Updates&quot;</code></p>
         * <p>For a complete list of available news types, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#news-type-news-type">Enumerated parameters &gt; News type</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "news_type", nulls = Nulls.SKIP)
        public _FinalStage newsType(Optional<String> newsType) {
            this.newsType = newsType;
            return this;
        }

        /**
         * <p>Filters results based on the news domain type. Possible values are:</p>
         * <ul>
         * <li><code>Original Content</code>: Sources that produce their own content.</li>
         * <li><code>Aggregator</code>: Sources that collect content from various other sources.</li>
         * <li><code>Press Releases</code>: Sources primarily publishing press releases.</li>
         * <li><code>Republisher</code>: Sources that republish content from other sources.</li>
         * <li><code>Other</code>: Sources that don't fit into main categories.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage newsDomainType(SearchGetRequestNewsDomainType newsDomainType) {
            this.newsDomainType = Optional.ofNullable(newsDomainType);
            return this;
        }

        /**
         * <p>Filters results based on the news domain type. Possible values are:</p>
         * <ul>
         * <li><code>Original Content</code>: Sources that produce their own content.</li>
         * <li><code>Aggregator</code>: Sources that collect content from various other sources.</li>
         * <li><code>Press Releases</code>: Sources primarily publishing press releases.</li>
         * <li><code>Republisher</code>: Sources that republish content from other sources.</li>
         * <li><code>Other</code>: Sources that don't fit into main categories.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "news_domain_type", nulls = Nulls.SKIP)
        public _FinalStage newsDomainType(Optional<SearchGetRequestNewsDomainType> newsDomainType) {
            this.newsDomainType = newsDomainType;
            return this;
        }

        /**
         * <p>If true, filters results to include only news domains.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isNewsDomain(Boolean isNewsDomain) {
            this.isNewsDomain = Optional.ofNullable(isNewsDomain);
            return this;
        }

        /**
         * <p>If true, filters results to include only news domains.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_news_domain", nulls = Nulls.SKIP)
        public _FinalStage isNewsDomain(Optional<Boolean> isNewsDomain) {
            this.isNewsDomain = isNewsDomain;
            return this;
        }

        /**
         * <p>If true, includes additional domain information in the response for each article:</p>
         * <ul>
         * <li><code>is_news_domain</code>: Boolean indicating if the source is a news domain.</li>
         * <li><code>news_domain_type</code>: Type of news domain (e.g., <code>&quot;Original Content&quot;</code>).</li>
         * <li><code>news_type</code>: Category of news (e.g., <code>&quot;News and Blogs&quot;</code>).</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalDomainInfo(Boolean additionalDomainInfo) {
            this.additionalDomainInfo = Optional.ofNullable(additionalDomainInfo);
            return this;
        }

        /**
         * <p>If true, includes additional domain information in the response for each article:</p>
         * <ul>
         * <li><code>is_news_domain</code>: Boolean indicating if the source is a news domain.</li>
         * <li><code>news_domain_type</code>: Type of news domain (e.g., <code>&quot;Original Content&quot;</code>).</li>
         * <li><code>news_type</code>: Category of news (e.g., <code>&quot;News and Blogs&quot;</code>).</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "additional_domain_info", nulls = Nulls.SKIP)
        public _FinalStage additionalDomainInfo(Optional<Boolean> additionalDomainInfo) {
            this.additionalDomainInfo = additionalDomainInfo;
            return this;
        }

        /**
         * <p>The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.</p>
         * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allDomainLinks(String allDomainLinks) {
            this.allDomainLinks = Optional.ofNullable(allDomainLinks);
            return this;
        }

        /**
         * <p>The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.</p>
         * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "all_domain_links", nulls = Nulls.SKIP)
        public _FinalStage allDomainLinks(Optional<String> allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }

        /**
         * <p>The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allLinks(String allLinks) {
            this.allLinks = Optional.ofNullable(allLinks);
            return this;
        }

        /**
         * <p>The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
         * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "all_links", nulls = Nulls.SKIP)
        public _FinalStage allLinks(Optional<String> allLinks) {
            this.allLinks = allLinks;
            return this;
        }

        /**
         * <p>The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parentUrl(String parentUrl) {
            this.parentUrl = Optional.ofNullable(parentUrl);
            return this;
        }

        /**
         * <p>The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.</p>
         * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
         */
        @java.lang.Override
        @JsonSetter(value = "parent_url", nulls = Nulls.SKIP)
        public _FinalStage parentUrl(Optional<String> parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }

        /**
         * <p>If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = Optional.ofNullable(isPaidContent);
            return this;
        }

        /**
         * <p>If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_paid_content", nulls = Nulls.SKIP)
        public _FinalStage isPaidContent(Optional<Boolean> isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }

        /**
         * <p>If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isOpinion(Boolean isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        /**
         * <p>If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public _FinalStage isOpinion(Optional<Boolean> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        /**
         * <p>If true, only returns articles that were posted on the home page of a given news domain.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isHeadline(Boolean isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        /**
         * <p>If true, only returns articles that were posted on the home page of a given news domain.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public _FinalStage isHeadline(Optional<Boolean> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        /**
         * <p>The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage toRank(Integer toRank) {
            this.toRank = Optional.ofNullable(toRank);
            return this;
        }

        /**
         * <p>The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "to_rank", nulls = Nulls.SKIP)
        public _FinalStage toRank(Optional<Integer> toRank) {
            this.toRank = toRank;
            return this;
        }

        /**
         * <p>The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fromRank(Integer fromRank) {
            this.fromRank = Optional.ofNullable(fromRank);
            return this;
        }

        /**
         * <p>The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "from_rank", nulls = Nulls.SKIP)
        public _FinalStage fromRank(Optional<Integer> fromRank) {
            this.fromRank = fromRank;
            return this;
        }

        /**
         * <p>If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rankedOnly(Boolean rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        /**
         * <p>If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public _FinalStage rankedOnly(Optional<Boolean> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        /**
         * <p>The sorting order of the results. Possible values are:</p>
         * <ul>
         * <li><code>relevancy</code>: The most relevant results first.</li>
         * <li><code>date</code>: The most recently published results first.</li>
         * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortBy(SearchGetRequestSortBy sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        /**
         * <p>The sorting order of the results. Possible values are:</p>
         * <ul>
         * <li><code>relevancy</code>: The most relevant results first.</li>
         * <li><code>date</code>: The most recently published results first.</li>
         * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "sort_by", nulls = Nulls.SKIP)
        public _FinalStage sortBy(Optional<SearchGetRequestSortBy> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * <p>If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage byParseDate(Boolean byParseDate) {
            this.byParseDate = Optional.ofNullable(byParseDate);
            return this;
        }

        /**
         * <p>If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "by_parse_date", nulls = Nulls.SKIP)
        public _FinalStage byParseDate(Optional<Boolean> byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }

        /**
         * <p>The precision of the published date. There are three types:</p>
         * <ul>
         * <li><code>full</code>: The day and time of an article is correctly identified with the appropriate timezone.</li>
         * <li><code>timezone unknown</code>: The day and time of an article is correctly identified without timezone.</li>
         * <li><code>date</code>: Only the day is identified without an exact time.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage publishedDatePrecision(SearchGetRequestPublishedDatePrecision publishedDatePrecision) {
            this.publishedDatePrecision = Optional.ofNullable(publishedDatePrecision);
            return this;
        }

        /**
         * <p>The precision of the published date. There are three types:</p>
         * <ul>
         * <li><code>full</code>: The day and time of an article is correctly identified with the appropriate timezone.</li>
         * <li><code>timezone unknown</code>: The day and time of an article is correctly identified without timezone.</li>
         * <li><code>date</code>: Only the day is identified without an exact time.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "published_date_precision", nulls = Nulls.SKIP)
        public _FinalStage publishedDatePrecision(
                Optional<SearchGetRequestPublishedDatePrecision> publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return this;
        }

        /**
         * <p>The ending point in time to search up to. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>1 day ago</code>, <code>now</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage to(OffsetDateTime to) {
            this.to = Optional.ofNullable(to);
            return this;
        }

        /**
         * <p>The ending point in time to search up to. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>1 day ago</code>, <code>now</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "to_", nulls = Nulls.SKIP)
        public _FinalStage to(Optional<OffsetDateTime> to) {
            this.to = to;
            return this;
        }

        /**
         * <p>The starting point in time to search from. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>7 day ago</code>, <code>today</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage from(OffsetDateTime from) {
            this.from = Optional.ofNullable(from);
            return this;
        }

        /**
         * <p>The starting point in time to search from. Accepts date-time strings in ISO 8601 format and plain text. The default time zone is UTC.</p>
         * <p>Formats with examples:</p>
         * <ul>
         * <li>YYYY-mm-ddTHH:MM:SS: <code>2024-07-01T00:00:00</code></li>
         * <li>YYYY-MM-dd: <code>2024-07-01</code></li>
         * <li>YYYY/mm/dd HH:MM:SS: <code>2024/07/01 00:00:00</code></li>
         * <li>YYYY/mm/dd: <code>2024/07/01</code></li>
         * <li>English phrases: <code>7 day ago</code>, <code>today</code></li>
         * </ul>
         * <p><strong>Note</strong>: By default, applied to the publication date of the article. To use the article's parse date instead, set the <code>by_parse_date</code> parameter to <code>true</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "from_", nulls = Nulls.SKIP)
        public _FinalStage from(Optional<OffsetDateTime> from) {
            this.from = from;
            return this;
        }

        /**
         * <p>The list of author names to exclude from your search. To exclude articles by specific authors, use a comma-separated string.</p>
         * <p>Example: <code>&quot;John Doe, Jane Doe&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notAuthorName(String notAuthorName) {
            this.notAuthorName = Optional.ofNullable(notAuthorName);
            return this;
        }

        /**
         * <p>The list of author names to exclude from your search. To exclude articles by specific authors, use a comma-separated string.</p>
         * <p>Example: <code>&quot;John Doe, Jane Doe&quot;</code></p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_author_name", nulls = Nulls.SKIP)
        public _FinalStage notAuthorName(Optional<String> notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        /**
         * <p>The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.</p>
         * <p>Example:<code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notCountries(String notCountries) {
            this.notCountries = Optional.ofNullable(notCountries);
            return this;
        }

        /**
         * <p>The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.</p>
         * <p>Example:<code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_countries", nulls = Nulls.SKIP)
        public _FinalStage notCountries(Optional<String> notCountries) {
            this.notCountries = notCountries;
            return this;
        }

        /**
         * <p>The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.</p>
         * <p>Example: <code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage countries(String countries) {
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        /**
         * <p>The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.</p>
         * <p>Example: <code>&quot;US, CA&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "countries", nulls = Nulls.SKIP)
        public _FinalStage countries(Optional<String> countries) {
            this.countries = countries;
            return this;
        }

        /**
         * <p>The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;fr, de&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notLang(String notLang) {
            this.notLang = Optional.ofNullable(notLang);
            return this;
        }

        /**
         * <p>The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;fr, de&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_lang", nulls = Nulls.SKIP)
        public _FinalStage notLang(Optional<String> notLang) {
            this.notLang = notLang;
            return this;
        }

        /**
         * <p>The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;en, es&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lang(String lang) {
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        /**
         * <p>The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.</p>
         * <p>Example: <code>&quot;en, es&quot;</code></p>
         * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "lang", nulls = Nulls.SKIP)
        public _FinalStage lang(Optional<String> lang) {
            this.lang = lang;
            return this;
        }

        /**
         * <p>The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.</p>
         * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notSources(String notSources) {
            this.notSources = Optional.ofNullable(notSources);
            return this;
        }

        /**
         * <p>The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.</p>
         * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
         */
        @java.lang.Override
        @JsonSetter(value = "not_sources", nulls = Nulls.SKIP)
        public _FinalStage notSources(Optional<String> notSources) {
            this.notSources = notSources;
            return this;
        }

        /**
         * <p>One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;nytimes.com&quot;</code></li>
         * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sources(String sources) {
            this.sources = Optional.ofNullable(sources);
            return this;
        }

        /**
         * <p>One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;nytimes.com&quot;</code></li>
         * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public _FinalStage sources(Optional<String> sources) {
            this.sources = sources;
            return this;
        }

        /**
         * <p>Word or phrase to search within the source names. To specify multiple values, use a comma-separated string.</p>
         * <p>Example: <code>&quot;sport, tech&quot;</code></p>
         * <p><strong>Note</strong>: The search doesn't require an exact match and returns sources containing the specified terms in their names. You can use any word or phrase, like <code>&quot;sport&quot;</code> or <code>&quot;new york times&quot;</code>. For example, <code>&quot;sport&quot;</code> returns sources such as <code>&quot;Motorsport&quot;</code>, <code>&quot;Dot Esport&quot;</code>, and <code>&quot;Tuttosport&quot;</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceName(String sourceName) {
            this.sourceName = Optional.ofNullable(sourceName);
            return this;
        }

        /**
         * <p>Word or phrase to search within the source names. To specify multiple values, use a comma-separated string.</p>
         * <p>Example: <code>&quot;sport, tech&quot;</code></p>
         * <p><strong>Note</strong>: The search doesn't require an exact match and returns sources containing the specified terms in their names. You can use any word or phrase, like <code>&quot;sport&quot;</code> or <code>&quot;new york times&quot;</code>. For example, <code>&quot;sport&quot;</code> returns sources such as <code>&quot;Motorsport&quot;</code>, <code>&quot;Dot Esport&quot;</code>, and <code>&quot;Tuttosport&quot;</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "source_name", nulls = Nulls.SKIP)
        public _FinalStage sourceName(Optional<String> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        /**
         * <p>Predefined top news sources per country.</p>
         * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;top 100 US&quot;</code></li>
         * <li><code>&quot;top 33 AT&quot;</code></li>
         * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
         * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage predefinedSources(String predefinedSources) {
            this.predefinedSources = Optional.ofNullable(predefinedSources);
            return this;
        }

        /**
         * <p>Predefined top news sources per country.</p>
         * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
         * <p>Examples:</p>
         * <ul>
         * <li><code>&quot;top 100 US&quot;</code></li>
         * <li><code>&quot;top 33 AT&quot;</code></li>
         * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
         * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "predefined_sources", nulls = Nulls.SKIP)
        public _FinalStage predefinedSources(Optional<String> predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }

        @java.lang.Override
        public _FinalStage includeTranslationFields(Boolean includeTranslationFields) {
            this.includeTranslationFields = Optional.ofNullable(includeTranslationFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_translation_fields", nulls = Nulls.SKIP)
        public _FinalStage includeTranslationFields(Optional<Boolean> includeTranslationFields) {
            this.includeTranslationFields = includeTranslationFields;
            return this;
        }

        @java.lang.Override
        public _FinalStage searchIn(String searchIn) {
            this.searchIn = Optional.ofNullable(searchIn);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "search_in", nulls = Nulls.SKIP)
        public _FinalStage searchIn(Optional<String> searchIn) {
            this.searchIn = searchIn;
            return this;
        }

        @java.lang.Override
        public SearchGetRequest build() {
            return new SearchGetRequest(
                    q,
                    searchIn,
                    includeTranslationFields,
                    predefinedSources,
                    sourceName,
                    sources,
                    notSources,
                    lang,
                    notLang,
                    countries,
                    notCountries,
                    notAuthorName,
                    from,
                    to,
                    publishedDatePrecision,
                    byParseDate,
                    sortBy,
                    rankedOnly,
                    fromRank,
                    toRank,
                    isHeadline,
                    isOpinion,
                    isPaidContent,
                    parentUrl,
                    allLinks,
                    allDomainLinks,
                    additionalDomainInfo,
                    isNewsDomain,
                    newsDomainType,
                    newsType,
                    wordCountMin,
                    wordCountMax,
                    page,
                    pageSize,
                    clusteringEnabled,
                    clusteringVariable,
                    clusteringThreshold,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    orgEntityName,
                    perEntityName,
                    locEntityName,
                    miscEntityName,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    iptcTags,
                    notIptcTags,
                    iabTags,
                    notIabTags,
                    customTags,
                    excludeDuplicates,
                    robotsCompliant,
                    additionalProperties);
        }
    }
}
