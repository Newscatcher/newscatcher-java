/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.breakingnews.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.resources.breakingnews.types.BreakingNewsGetRequestSortBy;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BreakingNewsGetRequest.Builder.class)
public final class BreakingNewsGetRequest {
    private final Optional<BreakingNewsGetRequestSortBy> sortBy;

    private final Optional<Boolean> rankedOnly;

    private final Optional<Integer> fromRank;

    private final Optional<Integer> toRank;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Optional<Integer> topNArticles;

    private final Optional<Boolean> includeTranslationFields;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<String> theme;

    private final Optional<String> notTheme;

    private final Optional<String> orgEntityName;

    private final Optional<String> perEntityName;

    private final Optional<String> locEntityName;

    private final Optional<String> miscEntityName;

    private final Optional<Float> titleSentimentMin;

    private final Optional<Float> titleSentimentMax;

    private final Optional<Float> contentSentimentMin;

    private final Optional<Float> contentSentimentMax;

    private final Optional<Boolean> robotsCompliant;

    private final Map<String, Object> additionalProperties;

    private BreakingNewsGetRequest(
            Optional<BreakingNewsGetRequestSortBy> sortBy,
            Optional<Boolean> rankedOnly,
            Optional<Integer> fromRank,
            Optional<Integer> toRank,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Optional<Integer> topNArticles,
            Optional<Boolean> includeTranslationFields,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<String> theme,
            Optional<String> notTheme,
            Optional<String> orgEntityName,
            Optional<String> perEntityName,
            Optional<String> locEntityName,
            Optional<String> miscEntityName,
            Optional<Float> titleSentimentMin,
            Optional<Float> titleSentimentMax,
            Optional<Float> contentSentimentMin,
            Optional<Float> contentSentimentMax,
            Optional<Boolean> robotsCompliant,
            Map<String, Object> additionalProperties) {
        this.sortBy = sortBy;
        this.rankedOnly = rankedOnly;
        this.fromRank = fromRank;
        this.toRank = toRank;
        this.page = page;
        this.pageSize = pageSize;
        this.topNArticles = topNArticles;
        this.includeTranslationFields = includeTranslationFields;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.orgEntityName = orgEntityName;
        this.perEntityName = perEntityName;
        this.locEntityName = locEntityName;
        this.miscEntityName = miscEntityName;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.robotsCompliant = robotsCompliant;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The sorting order of the results. Possible values are:
     * <ul>
     * <li><code>relevancy</code>: The most relevant results first.</li>
     * <li><code>date</code>: The most recently published results first.</li>
     * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
     * </ul>
     */
    @JsonProperty("sort_by")
    public Optional<BreakingNewsGetRequestSortBy> getSortBy() {
        return sortBy;
    }

    /**
     * @return If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.
     */
    @JsonProperty("ranked_only")
    public Optional<Boolean> getRankedOnly() {
        return rankedOnly;
    }

    /**
     * @return The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
     */
    @JsonProperty("from_rank")
    public Optional<Integer> getFromRank() {
        return fromRank;
    }

    /**
     * @return The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
     */
    @JsonProperty("to_rank")
    public Optional<Integer> getToRank() {
        return toRank;
    }

    /**
     * @return The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.
     * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The number of articles to return per page.
     */
    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("top_n_articles")
    public Optional<Integer> getTopNArticles() {
        return topNArticles;
    }

    @JsonProperty("include_translation_fields")
    public Optional<Boolean> getIncludeTranslationFields() {
        return includeTranslationFields;
    }

    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    /**
     * @return Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
     */
    @JsonProperty("theme")
    public Optional<String> getTheme() {
        return theme;
    }

    /**
     * @return Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("not_theme")
    public Optional<String> getNotTheme() {
        return notTheme;
    }

    /**
     * @return Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
     * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("ORG_entity_name")
    public Optional<String> getOrgEntityName() {
        return orgEntityName;
    }

    /**
     * @return Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
     * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("PER_entity_name")
    public Optional<String> getPerEntityName() {
        return perEntityName;
    }

    /**
     * @return Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;California, New York&quot;</code></p>
     * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("LOC_entity_name")
    public Optional<String> getLocEntityName() {
        return locEntityName;
    }

    /**
     * @return Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).
     * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
     * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("MISC_entity_name")
    public Optional<String> getMiscEntityName() {
        return miscEntityName;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_min")
    public Optional<Float> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_max")
    public Optional<Float> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_min")
    public Optional<Float> getContentSentimentMin() {
        return contentSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_max")
    public Optional<Float> getContentSentimentMax() {
        return contentSentimentMax;
    }

    /**
     * @return If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.
     */
    @JsonProperty("robots_compliant")
    public Optional<Boolean> getRobotsCompliant() {
        return robotsCompliant;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BreakingNewsGetRequest && equalTo((BreakingNewsGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BreakingNewsGetRequest other) {
        return sortBy.equals(other.sortBy)
                && rankedOnly.equals(other.rankedOnly)
                && fromRank.equals(other.fromRank)
                && toRank.equals(other.toRank)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && topNArticles.equals(other.topNArticles)
                && includeTranslationFields.equals(other.includeTranslationFields)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && orgEntityName.equals(other.orgEntityName)
                && perEntityName.equals(other.perEntityName)
                && locEntityName.equals(other.locEntityName)
                && miscEntityName.equals(other.miscEntityName)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && robotsCompliant.equals(other.robotsCompliant);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sortBy,
                this.rankedOnly,
                this.fromRank,
                this.toRank,
                this.page,
                this.pageSize,
                this.topNArticles,
                this.includeTranslationFields,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.orgEntityName,
                this.perEntityName,
                this.locEntityName,
                this.miscEntityName,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.robotsCompliant);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BreakingNewsGetRequestSortBy> sortBy = Optional.empty();

        private Optional<Boolean> rankedOnly = Optional.empty();

        private Optional<Integer> fromRank = Optional.empty();

        private Optional<Integer> toRank = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Integer> topNArticles = Optional.empty();

        private Optional<Boolean> includeTranslationFields = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<String> theme = Optional.empty();

        private Optional<String> notTheme = Optional.empty();

        private Optional<String> orgEntityName = Optional.empty();

        private Optional<String> perEntityName = Optional.empty();

        private Optional<String> locEntityName = Optional.empty();

        private Optional<String> miscEntityName = Optional.empty();

        private Optional<Float> titleSentimentMin = Optional.empty();

        private Optional<Float> titleSentimentMax = Optional.empty();

        private Optional<Float> contentSentimentMin = Optional.empty();

        private Optional<Float> contentSentimentMax = Optional.empty();

        private Optional<Boolean> robotsCompliant = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BreakingNewsGetRequest other) {
            sortBy(other.getSortBy());
            rankedOnly(other.getRankedOnly());
            fromRank(other.getFromRank());
            toRank(other.getToRank());
            page(other.getPage());
            pageSize(other.getPageSize());
            topNArticles(other.getTopNArticles());
            includeTranslationFields(other.getIncludeTranslationFields());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            orgEntityName(other.getOrgEntityName());
            perEntityName(other.getPerEntityName());
            locEntityName(other.getLocEntityName());
            miscEntityName(other.getMiscEntityName());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            robotsCompliant(other.getRobotsCompliant());
            return this;
        }

        /**
         * <p>The sorting order of the results. Possible values are:</p>
         * <ul>
         * <li><code>relevancy</code>: The most relevant results first.</li>
         * <li><code>date</code>: The most recently published results first.</li>
         * <li><code>rank</code>: The results from the highest-ranked sources first.</li>
         * </ul>
         */
        @JsonSetter(value = "sort_by", nulls = Nulls.SKIP)
        public Builder sortBy(Optional<BreakingNewsGetRequestSortBy> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(BreakingNewsGetRequestSortBy sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        /**
         * <p>If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.</p>
         */
        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public Builder rankedOnly(Optional<Boolean> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        public Builder rankedOnly(Boolean rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        /**
         * <p>The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         */
        @JsonSetter(value = "from_rank", nulls = Nulls.SKIP)
        public Builder fromRank(Optional<Integer> fromRank) {
            this.fromRank = fromRank;
            return this;
        }

        public Builder fromRank(Integer fromRank) {
            this.fromRank = Optional.ofNullable(fromRank);
            return this;
        }

        /**
         * <p>The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.</p>
         */
        @JsonSetter(value = "to_rank", nulls = Nulls.SKIP)
        public Builder toRank(Optional<Integer> toRank) {
            this.toRank = toRank;
            return this;
        }

        public Builder toRank(Integer toRank) {
            this.toRank = Optional.ofNullable(toRank);
            return this;
        }

        /**
         * <p>The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.</p>
         * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>The number of articles to return per page.</p>
         */
        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "top_n_articles", nulls = Nulls.SKIP)
        public Builder topNArticles(Optional<Integer> topNArticles) {
            this.topNArticles = topNArticles;
            return this;
        }

        public Builder topNArticles(Integer topNArticles) {
            this.topNArticles = Optional.ofNullable(topNArticles);
            return this;
        }

        @JsonSetter(value = "include_translation_fields", nulls = Nulls.SKIP)
        public Builder includeTranslationFields(Optional<Boolean> includeTranslationFields) {
            this.includeTranslationFields = includeTranslationFields;
            return this;
        }

        public Builder includeTranslationFields(Boolean includeTranslationFields) {
            this.includeTranslationFields = Optional.ofNullable(includeTranslationFields);
            return this;
        }

        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public Builder includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        public Builder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public Builder hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        public Builder hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        /**
         * <p>Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
         */
        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public Builder theme(Optional<String> theme) {
            this.theme = theme;
            return this;
        }

        public Builder theme(String theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        /**
         * <p>Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.</p>
         * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
         * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public Builder notTheme(Optional<String> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        public Builder notTheme(String notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        /**
         * <p>Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
         * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @JsonSetter(value = "ORG_entity_name", nulls = Nulls.SKIP)
        public Builder orgEntityName(Optional<String> orgEntityName) {
            this.orgEntityName = orgEntityName;
            return this;
        }

        public Builder orgEntityName(String orgEntityName) {
            this.orgEntityName = Optional.ofNullable(orgEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
         * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @JsonSetter(value = "PER_entity_name", nulls = Nulls.SKIP)
        public Builder perEntityName(Optional<String> perEntityName) {
            this.perEntityName = perEntityName;
            return this;
        }

        public Builder perEntityName(String perEntityName) {
            this.perEntityName = Optional.ofNullable(perEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;California, New York&quot;</code></p>
         * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @JsonSetter(value = "LOC_entity_name", nulls = Nulls.SKIP)
        public Builder locEntityName(Optional<String> locEntityName) {
            this.locEntityName = locEntityName;
            return this;
        }

        public Builder locEntityName(String locEntityName) {
            this.locEntityName = Optional.ofNullable(locEntityName);
            return this;
        }

        /**
         * <p>Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the <code>search_in</code> parameter (e.g., <code>title_content_translated</code>).</p>
         * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
         * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
         */
        @JsonSetter(value = "MISC_entity_name", nulls = Nulls.SKIP)
        public Builder miscEntityName(Optional<String> miscEntityName) {
            this.miscEntityName = miscEntityName;
            return this;
        }

        public Builder miscEntityName(String miscEntityName) {
            this.miscEntityName = Optional.ofNullable(miscEntityName);
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public Builder titleSentimentMin(Optional<Float> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        public Builder titleSentimentMin(Float titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their titles.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public Builder titleSentimentMax(Optional<Float> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        public Builder titleSentimentMax(Float titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        /**
         * <p>Filters articles based on the minimum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public Builder contentSentimentMin(Optional<Float> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        public Builder contentSentimentMin(Float contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        /**
         * <p>Filters articles based on the maximum sentiment score of their content.</p>
         * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
         * <ul>
         * <li>Negative values indicate negative sentiment.</li>
         * <li>Positive values indicate positive sentiment.</li>
         * <li>Values close to 0 indicate neutral sentiment.</li>
         * </ul>
         * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
         * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
         */
        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public Builder contentSentimentMax(Optional<Float> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        public Builder contentSentimentMax(Float contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        /**
         * <p>If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.</p>
         */
        @JsonSetter(value = "robots_compliant", nulls = Nulls.SKIP)
        public Builder robotsCompliant(Optional<Boolean> robotsCompliant) {
            this.robotsCompliant = robotsCompliant;
            return this;
        }

        public Builder robotsCompliant(Boolean robotsCompliant) {
            this.robotsCompliant = Optional.ofNullable(robotsCompliant);
            return this;
        }

        public BreakingNewsGetRequest build() {
            return new BreakingNewsGetRequest(
                    sortBy,
                    rankedOnly,
                    fromRank,
                    toRank,
                    page,
                    pageSize,
                    topNArticles,
                    includeTranslationFields,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    orgEntityName,
                    perEntityName,
                    locEntityName,
                    miscEntityName,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    robotsCompliant,
                    additionalProperties);
        }
    }
}
