/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.sources;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.MediaTypes;
import com.newscatcher.api.core.NewscatcherApiApiException;
import com.newscatcher.api.core.NewscatcherApiException;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.errors.UnprocessableEntityError;
import com.newscatcher.api.resources.sources.requests.SourcesGetRequest;
import com.newscatcher.api.resources.sources.requests.SourcesRequest;
import com.newscatcher.api.types.HttpValidationError;
import com.newscatcher.api.types.SourceResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class SourcesClient {
    protected final ClientOptions clientOptions;

    public SourcesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     */
    public SourceResponse get(SourcesGetRequest request) {
        return get(request, null);
    }

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     */
    public SourceResponse get(SourcesGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/sources");
        httpUrl.addQueryParameter("lang", request.getLang());
        httpUrl.addQueryParameter("countries", request.getCountries());
        httpUrl.addQueryParameter("predefined_sources", request.getPredefinedSources());
        if (request.getIncludeAdditionalInfo().isPresent()) {
            httpUrl.addQueryParameter(
                    "include_additional_info",
                    request.getIncludeAdditionalInfo().get().toString());
        }
        if (request.getFromRank().isPresent()) {
            httpUrl.addQueryParameter("from_rank", request.getFromRank().get().toString());
        }
        if (request.getToRank().isPresent()) {
            httpUrl.addQueryParameter("to_rank", request.getToRank().get().toString());
        }
        httpUrl.addQueryParameter("source_name", request.getSourceName());
        httpUrl.addQueryParameter("source_url", request.getSourceUrl());
        if (request.getIsNewsDomain().isPresent()) {
            httpUrl.addQueryParameter(
                    "is_news_domain", request.getIsNewsDomain().get().toString());
        }
        httpUrl.addQueryParameter("news_domain_type", request.getNewsDomainType());
        httpUrl.addQueryParameter("news_type", request.getNewsType());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SourceResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new NewscatcherApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new NewscatcherApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     */
    public SourceResponse post() {
        return post(SourcesRequest.builder().build());
    }

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     */
    public SourceResponse post(SourcesRequest request) {
        return post(request, null);
    }

    /**
     * This endpoint allows you to get the list of sources that are available in the database. You can filter the sources by language and country. The maximum number of sources displayed is set according to your plan. You can find the list of plans and their features here: https://newscatcherapi.com/news-api#news-api-pricing
     */
    public SourceResponse post(SourcesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/sources")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new NewscatcherApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SourceResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new NewscatcherApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new NewscatcherApiException("Network error executing HTTP request", e);
        }
    }
}
