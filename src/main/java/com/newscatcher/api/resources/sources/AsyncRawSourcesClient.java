/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.sources;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.MediaTypes;
import com.newscatcher.api.core.NewscatcherApiApiException;
import com.newscatcher.api.core.NewscatcherApiException;
import com.newscatcher.api.core.NewscatcherApiHttpResponse;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.core.QueryStringMapper;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.errors.BadRequestError;
import com.newscatcher.api.errors.ForbiddenError;
import com.newscatcher.api.errors.InternalServerError;
import com.newscatcher.api.errors.RequestTimeoutError;
import com.newscatcher.api.errors.TooManyRequestsError;
import com.newscatcher.api.errors.UnauthorizedError;
import com.newscatcher.api.errors.UnprocessableEntityError;
import com.newscatcher.api.resources.sources.requests.SourcesGetRequest;
import com.newscatcher.api.resources.sources.requests.SourcesPostRequest;
import com.newscatcher.api.types.Error;
import com.newscatcher.api.types.SourcesResponseDto;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawSourcesClient {
    protected final ClientOptions clientOptions;

    public AsyncRawSourcesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Retrieves a list of sources based on specified criteria such as language, country, rank, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> get() {
        return get(SourcesGetRequest.builder().build());
    }

    /**
     * Retrieves a list of sources based on specified criteria such as language, country, rank, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> get(SourcesGetRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves a list of sources based on specified criteria such as language, country, rank, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> get(
            SourcesGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/sources");
        if (request.getLang().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "lang", request.getLang().get(), false);
        }
        if (request.getCountries().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "countries", request.getCountries().get(), false);
        }
        if (request.getPredefinedSources().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "predefined_sources",
                    request.getPredefinedSources().get(),
                    false);
        }
        if (request.getSourceName().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "source_name", request.getSourceName().get(), false);
        }
        if (request.getSourceUrl().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "source_url", request.getSourceUrl().get(), false);
        }
        if (request.getIncludeAdditionalInfo().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_additional_info",
                    request.getIncludeAdditionalInfo().get(),
                    false);
        }
        if (request.getIsNewsDomain().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "is_news_domain", request.getIsNewsDomain().get(), false);
        }
        if (request.getNewsDomainType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "news_domain_type", request.getNewsDomainType().get(), false);
        }
        if (request.getNewsType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "news_type", request.getNewsType().get(), false);
        }
        if (request.getFromRank().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "from_rank", request.getFromRank().get(), false);
        }
        if (request.getToRank().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "to_rank", request.getToRank().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new NewscatcherApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SourcesResponseDto.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 403:
                                future.completeExceptionally(new ForbiddenError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 408:
                                future.completeExceptionally(new RequestTimeoutError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 422:
                                future.completeExceptionally(new UnprocessableEntityError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, String.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new NewscatcherApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new NewscatcherApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new NewscatcherApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves the list of sources available in the database. You can filter the sources by language, country, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> post() {
        return post(SourcesPostRequest.builder().build());
    }

    /**
     * Retrieves the list of sources available in the database. You can filter the sources by language, country, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> post(SourcesPostRequest request) {
        return post(request, null);
    }

    /**
     * Retrieves the list of sources available in the database. You can filter the sources by language, country, and more.
     */
    public CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> post(
            SourcesPostRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/sources")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new NewscatcherApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<NewscatcherApiHttpResponse<SourcesResponseDto>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new NewscatcherApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SourcesResponseDto.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 403:
                                future.completeExceptionally(new ForbiddenError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 408:
                                future.completeExceptionally(new RequestTimeoutError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 422:
                                future.completeExceptionally(new UnprocessableEntityError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 429:
                                future.completeExceptionally(new TooManyRequestsError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Error.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, String.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new NewscatcherApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new NewscatcherApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new NewscatcherApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
