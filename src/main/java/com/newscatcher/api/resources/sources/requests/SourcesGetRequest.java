/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.sources.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SourcesGetRequest.Builder.class)
public final class SourcesGetRequest {
    private final String lang;

    private final String countries;

    private final String predefinedSources;

    private final Optional<Boolean> includeAdditionalInfo;

    private final Optional<Integer> fromRank;

    private final Optional<Integer> toRank;

    private final String sourceName;

    private final String sourceUrl;

    private final Optional<Boolean> isNewsDomain;

    private final String newsDomainType;

    private final String newsType;

    private final Map<String, Object> additionalProperties;

    private SourcesGetRequest(
            String lang,
            String countries,
            String predefinedSources,
            Optional<Boolean> includeAdditionalInfo,
            Optional<Integer> fromRank,
            Optional<Integer> toRank,
            String sourceName,
            String sourceUrl,
            Optional<Boolean> isNewsDomain,
            String newsDomainType,
            String newsType,
            Map<String, Object> additionalProperties) {
        this.lang = lang;
        this.countries = countries;
        this.predefinedSources = predefinedSources;
        this.includeAdditionalInfo = includeAdditionalInfo;
        this.fromRank = fromRank;
        this.toRank = toRank;
        this.sourceName = sourceName;
        this.sourceUrl = sourceUrl;
        this.isNewsDomain = isNewsDomain;
        this.newsDomainType = newsDomainType;
        this.newsType = newsType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lang")
    public String getLang() {
        return lang;
    }

    @JsonProperty("countries")
    public String getCountries() {
        return countries;
    }

    @JsonProperty("predefined_sources")
    public String getPredefinedSources() {
        return predefinedSources;
    }

    @JsonProperty("include_additional_info")
    public Optional<Boolean> getIncludeAdditionalInfo() {
        return includeAdditionalInfo;
    }

    @JsonProperty("from_rank")
    public Optional<Integer> getFromRank() {
        return fromRank;
    }

    @JsonProperty("to_rank")
    public Optional<Integer> getToRank() {
        return toRank;
    }

    @JsonProperty("source_name")
    public String getSourceName() {
        return sourceName;
    }

    @JsonProperty("source_url")
    public String getSourceUrl() {
        return sourceUrl;
    }

    @JsonProperty("is_news_domain")
    public Optional<Boolean> getIsNewsDomain() {
        return isNewsDomain;
    }

    @JsonProperty("news_domain_type")
    public String getNewsDomainType() {
        return newsDomainType;
    }

    @JsonProperty("news_type")
    public String getNewsType() {
        return newsType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourcesGetRequest && equalTo((SourcesGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourcesGetRequest other) {
        return lang.equals(other.lang)
                && countries.equals(other.countries)
                && predefinedSources.equals(other.predefinedSources)
                && includeAdditionalInfo.equals(other.includeAdditionalInfo)
                && fromRank.equals(other.fromRank)
                && toRank.equals(other.toRank)
                && sourceName.equals(other.sourceName)
                && sourceUrl.equals(other.sourceUrl)
                && isNewsDomain.equals(other.isNewsDomain)
                && newsDomainType.equals(other.newsDomainType)
                && newsType.equals(other.newsType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.lang,
                this.countries,
                this.predefinedSources,
                this.includeAdditionalInfo,
                this.fromRank,
                this.toRank,
                this.sourceName,
                this.sourceUrl,
                this.isNewsDomain,
                this.newsDomainType,
                this.newsType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LangStage builder() {
        return new Builder();
    }

    public interface LangStage {
        CountriesStage lang(@NotNull String lang);

        Builder from(SourcesGetRequest other);
    }

    public interface CountriesStage {
        PredefinedSourcesStage countries(@NotNull String countries);
    }

    public interface PredefinedSourcesStage {
        SourceNameStage predefinedSources(@NotNull String predefinedSources);
    }

    public interface SourceNameStage {
        SourceUrlStage sourceName(@NotNull String sourceName);
    }

    public interface SourceUrlStage {
        NewsDomainTypeStage sourceUrl(@NotNull String sourceUrl);
    }

    public interface NewsDomainTypeStage {
        NewsTypeStage newsDomainType(@NotNull String newsDomainType);
    }

    public interface NewsTypeStage {
        _FinalStage newsType(@NotNull String newsType);
    }

    public interface _FinalStage {
        SourcesGetRequest build();

        _FinalStage includeAdditionalInfo(Optional<Boolean> includeAdditionalInfo);

        _FinalStage includeAdditionalInfo(Boolean includeAdditionalInfo);

        _FinalStage fromRank(Optional<Integer> fromRank);

        _FinalStage fromRank(Integer fromRank);

        _FinalStage toRank(Optional<Integer> toRank);

        _FinalStage toRank(Integer toRank);

        _FinalStage isNewsDomain(Optional<Boolean> isNewsDomain);

        _FinalStage isNewsDomain(Boolean isNewsDomain);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements LangStage,
                    CountriesStage,
                    PredefinedSourcesStage,
                    SourceNameStage,
                    SourceUrlStage,
                    NewsDomainTypeStage,
                    NewsTypeStage,
                    _FinalStage {
        private String lang;

        private String countries;

        private String predefinedSources;

        private String sourceName;

        private String sourceUrl;

        private String newsDomainType;

        private String newsType;

        private Optional<Boolean> isNewsDomain = Optional.empty();

        private Optional<Integer> toRank = Optional.empty();

        private Optional<Integer> fromRank = Optional.empty();

        private Optional<Boolean> includeAdditionalInfo = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SourcesGetRequest other) {
            lang(other.getLang());
            countries(other.getCountries());
            predefinedSources(other.getPredefinedSources());
            includeAdditionalInfo(other.getIncludeAdditionalInfo());
            fromRank(other.getFromRank());
            toRank(other.getToRank());
            sourceName(other.getSourceName());
            sourceUrl(other.getSourceUrl());
            isNewsDomain(other.getIsNewsDomain());
            newsDomainType(other.getNewsDomainType());
            newsType(other.getNewsType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("lang")
        public CountriesStage lang(@NotNull String lang) {
            this.lang = Objects.requireNonNull(lang, "lang must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("countries")
        public PredefinedSourcesStage countries(@NotNull String countries) {
            this.countries = Objects.requireNonNull(countries, "countries must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("predefined_sources")
        public SourceNameStage predefinedSources(@NotNull String predefinedSources) {
            this.predefinedSources = Objects.requireNonNull(predefinedSources, "predefinedSources must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("source_name")
        public SourceUrlStage sourceName(@NotNull String sourceName) {
            this.sourceName = Objects.requireNonNull(sourceName, "sourceName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("source_url")
        public NewsDomainTypeStage sourceUrl(@NotNull String sourceUrl) {
            this.sourceUrl = Objects.requireNonNull(sourceUrl, "sourceUrl must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("news_domain_type")
        public NewsTypeStage newsDomainType(@NotNull String newsDomainType) {
            this.newsDomainType = Objects.requireNonNull(newsDomainType, "newsDomainType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("news_type")
        public _FinalStage newsType(@NotNull String newsType) {
            this.newsType = Objects.requireNonNull(newsType, "newsType must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage isNewsDomain(Boolean isNewsDomain) {
            this.isNewsDomain = Optional.ofNullable(isNewsDomain);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_news_domain", nulls = Nulls.SKIP)
        public _FinalStage isNewsDomain(Optional<Boolean> isNewsDomain) {
            this.isNewsDomain = isNewsDomain;
            return this;
        }

        @java.lang.Override
        public _FinalStage toRank(Integer toRank) {
            this.toRank = Optional.ofNullable(toRank);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "to_rank", nulls = Nulls.SKIP)
        public _FinalStage toRank(Optional<Integer> toRank) {
            this.toRank = toRank;
            return this;
        }

        @java.lang.Override
        public _FinalStage fromRank(Integer fromRank) {
            this.fromRank = Optional.ofNullable(fromRank);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "from_rank", nulls = Nulls.SKIP)
        public _FinalStage fromRank(Optional<Integer> fromRank) {
            this.fromRank = fromRank;
            return this;
        }

        @java.lang.Override
        public _FinalStage includeAdditionalInfo(Boolean includeAdditionalInfo) {
            this.includeAdditionalInfo = Optional.ofNullable(includeAdditionalInfo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "include_additional_info", nulls = Nulls.SKIP)
        public _FinalStage includeAdditionalInfo(Optional<Boolean> includeAdditionalInfo) {
            this.includeAdditionalInfo = includeAdditionalInfo;
            return this;
        }

        @java.lang.Override
        public SourcesGetRequest build() {
            return new SourcesGetRequest(
                    lang,
                    countries,
                    predefinedSources,
                    includeAdditionalInfo,
                    fromRank,
                    toRank,
                    sourceName,
                    sourceUrl,
                    isNewsDomain,
                    newsDomainType,
                    newsType,
                    additionalProperties);
        }
    }
}
