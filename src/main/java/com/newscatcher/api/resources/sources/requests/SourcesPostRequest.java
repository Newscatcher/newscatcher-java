/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.sources.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.types.Countries;
import com.newscatcher.api.types.Lang;
import com.newscatcher.api.types.NewsDomainType;
import com.newscatcher.api.types.NewsType;
import com.newscatcher.api.types.PredefinedSources;
import com.newscatcher.api.types.SourceName;
import com.newscatcher.api.types.SourceUrl;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SourcesPostRequest.Builder.class)
public final class SourcesPostRequest {
    private final Optional<Lang> lang;

    private final Optional<Countries> countries;

    private final Optional<PredefinedSources> predefinedSources;

    private final Optional<SourceName> sourceName;

    private final Optional<SourceUrl> sourceUrl;

    private final Optional<Boolean> includeAdditionalInfo;

    private final Optional<Boolean> isNewsDomain;

    private final Optional<NewsDomainType> newsDomainType;

    private final Optional<NewsType> newsType;

    private final Optional<Integer> fromRank;

    private final Optional<Integer> toRank;

    private final Map<String, Object> additionalProperties;

    private SourcesPostRequest(
            Optional<Lang> lang,
            Optional<Countries> countries,
            Optional<PredefinedSources> predefinedSources,
            Optional<SourceName> sourceName,
            Optional<SourceUrl> sourceUrl,
            Optional<Boolean> includeAdditionalInfo,
            Optional<Boolean> isNewsDomain,
            Optional<NewsDomainType> newsDomainType,
            Optional<NewsType> newsType,
            Optional<Integer> fromRank,
            Optional<Integer> toRank,
            Map<String, Object> additionalProperties) {
        this.lang = lang;
        this.countries = countries;
        this.predefinedSources = predefinedSources;
        this.sourceName = sourceName;
        this.sourceUrl = sourceUrl;
        this.includeAdditionalInfo = includeAdditionalInfo;
        this.isNewsDomain = isNewsDomain;
        this.newsDomainType = newsDomainType;
        this.newsType = newsType;
        this.fromRank = fromRank;
        this.toRank = toRank;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lang")
    public Optional<Lang> getLang() {
        return lang;
    }

    @JsonProperty("countries")
    public Optional<Countries> getCountries() {
        return countries;
    }

    @JsonProperty("predefined_sources")
    public Optional<PredefinedSources> getPredefinedSources() {
        return predefinedSources;
    }

    @JsonProperty("source_name")
    public Optional<SourceName> getSourceName() {
        return sourceName;
    }

    @JsonProperty("source_url")
    public Optional<SourceUrl> getSourceUrl() {
        return sourceUrl;
    }

    @JsonProperty("include_additional_info")
    public Optional<Boolean> getIncludeAdditionalInfo() {
        return includeAdditionalInfo;
    }

    @JsonProperty("is_news_domain")
    public Optional<Boolean> getIsNewsDomain() {
        return isNewsDomain;
    }

    @JsonProperty("news_domain_type")
    public Optional<NewsDomainType> getNewsDomainType() {
        return newsDomainType;
    }

    @JsonProperty("news_type")
    public Optional<NewsType> getNewsType() {
        return newsType;
    }

    @JsonProperty("from_rank")
    public Optional<Integer> getFromRank() {
        return fromRank;
    }

    @JsonProperty("to_rank")
    public Optional<Integer> getToRank() {
        return toRank;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourcesPostRequest && equalTo((SourcesPostRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourcesPostRequest other) {
        return lang.equals(other.lang)
                && countries.equals(other.countries)
                && predefinedSources.equals(other.predefinedSources)
                && sourceName.equals(other.sourceName)
                && sourceUrl.equals(other.sourceUrl)
                && includeAdditionalInfo.equals(other.includeAdditionalInfo)
                && isNewsDomain.equals(other.isNewsDomain)
                && newsDomainType.equals(other.newsDomainType)
                && newsType.equals(other.newsType)
                && fromRank.equals(other.fromRank)
                && toRank.equals(other.toRank);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.lang,
                this.countries,
                this.predefinedSources,
                this.sourceName,
                this.sourceUrl,
                this.includeAdditionalInfo,
                this.isNewsDomain,
                this.newsDomainType,
                this.newsType,
                this.fromRank,
                this.toRank);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Lang> lang = Optional.empty();

        private Optional<Countries> countries = Optional.empty();

        private Optional<PredefinedSources> predefinedSources = Optional.empty();

        private Optional<SourceName> sourceName = Optional.empty();

        private Optional<SourceUrl> sourceUrl = Optional.empty();

        private Optional<Boolean> includeAdditionalInfo = Optional.empty();

        private Optional<Boolean> isNewsDomain = Optional.empty();

        private Optional<NewsDomainType> newsDomainType = Optional.empty();

        private Optional<NewsType> newsType = Optional.empty();

        private Optional<Integer> fromRank = Optional.empty();

        private Optional<Integer> toRank = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SourcesPostRequest other) {
            lang(other.getLang());
            countries(other.getCountries());
            predefinedSources(other.getPredefinedSources());
            sourceName(other.getSourceName());
            sourceUrl(other.getSourceUrl());
            includeAdditionalInfo(other.getIncludeAdditionalInfo());
            isNewsDomain(other.getIsNewsDomain());
            newsDomainType(other.getNewsDomainType());
            newsType(other.getNewsType());
            fromRank(other.getFromRank());
            toRank(other.getToRank());
            return this;
        }

        @JsonSetter(value = "lang", nulls = Nulls.SKIP)
        public Builder lang(Optional<Lang> lang) {
            this.lang = lang;
            return this;
        }

        public Builder lang(Lang lang) {
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        @JsonSetter(value = "countries", nulls = Nulls.SKIP)
        public Builder countries(Optional<Countries> countries) {
            this.countries = countries;
            return this;
        }

        public Builder countries(Countries countries) {
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        @JsonSetter(value = "predefined_sources", nulls = Nulls.SKIP)
        public Builder predefinedSources(Optional<PredefinedSources> predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }

        public Builder predefinedSources(PredefinedSources predefinedSources) {
            this.predefinedSources = Optional.ofNullable(predefinedSources);
            return this;
        }

        @JsonSetter(value = "source_name", nulls = Nulls.SKIP)
        public Builder sourceName(Optional<SourceName> sourceName) {
            this.sourceName = sourceName;
            return this;
        }

        public Builder sourceName(SourceName sourceName) {
            this.sourceName = Optional.ofNullable(sourceName);
            return this;
        }

        @JsonSetter(value = "source_url", nulls = Nulls.SKIP)
        public Builder sourceUrl(Optional<SourceUrl> sourceUrl) {
            this.sourceUrl = sourceUrl;
            return this;
        }

        public Builder sourceUrl(SourceUrl sourceUrl) {
            this.sourceUrl = Optional.ofNullable(sourceUrl);
            return this;
        }

        @JsonSetter(value = "include_additional_info", nulls = Nulls.SKIP)
        public Builder includeAdditionalInfo(Optional<Boolean> includeAdditionalInfo) {
            this.includeAdditionalInfo = includeAdditionalInfo;
            return this;
        }

        public Builder includeAdditionalInfo(Boolean includeAdditionalInfo) {
            this.includeAdditionalInfo = Optional.ofNullable(includeAdditionalInfo);
            return this;
        }

        @JsonSetter(value = "is_news_domain", nulls = Nulls.SKIP)
        public Builder isNewsDomain(Optional<Boolean> isNewsDomain) {
            this.isNewsDomain = isNewsDomain;
            return this;
        }

        public Builder isNewsDomain(Boolean isNewsDomain) {
            this.isNewsDomain = Optional.ofNullable(isNewsDomain);
            return this;
        }

        @JsonSetter(value = "news_domain_type", nulls = Nulls.SKIP)
        public Builder newsDomainType(Optional<NewsDomainType> newsDomainType) {
            this.newsDomainType = newsDomainType;
            return this;
        }

        public Builder newsDomainType(NewsDomainType newsDomainType) {
            this.newsDomainType = Optional.ofNullable(newsDomainType);
            return this;
        }

        @JsonSetter(value = "news_type", nulls = Nulls.SKIP)
        public Builder newsType(Optional<NewsType> newsType) {
            this.newsType = newsType;
            return this;
        }

        public Builder newsType(NewsType newsType) {
            this.newsType = Optional.ofNullable(newsType);
            return this;
        }

        @JsonSetter(value = "from_rank", nulls = Nulls.SKIP)
        public Builder fromRank(Optional<Integer> fromRank) {
            this.fromRank = fromRank;
            return this;
        }

        public Builder fromRank(Integer fromRank) {
            this.fromRank = Optional.ofNullable(fromRank);
            return this;
        }

        @JsonSetter(value = "to_rank", nulls = Nulls.SKIP)
        public Builder toRank(Optional<Integer> toRank) {
            this.toRank = toRank;
            return this;
        }

        public Builder toRank(Integer toRank) {
            this.toRank = Optional.ofNullable(toRank);
            return this;
        }

        public SourcesPostRequest build() {
            return new SourcesPostRequest(
                    lang,
                    countries,
                    predefinedSources,
                    sourceName,
                    sourceUrl,
                    includeAdditionalInfo,
                    isNewsDomain,
                    newsDomainType,
                    newsType,
                    fromRank,
                    toRank,
                    additionalProperties);
        }
    }
}
