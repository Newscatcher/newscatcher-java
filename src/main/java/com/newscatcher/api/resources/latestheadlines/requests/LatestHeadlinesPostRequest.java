/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.latestheadlines.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.types.AllDomainLinks;
import com.newscatcher.api.types.AllLinks;
import com.newscatcher.api.types.ClusteringVariable;
import com.newscatcher.api.types.Countries;
import com.newscatcher.api.types.CustomTags;
import com.newscatcher.api.types.IabTags;
import com.newscatcher.api.types.IptcTags;
import com.newscatcher.api.types.Lang;
import com.newscatcher.api.types.LocEntityName;
import com.newscatcher.api.types.MiscEntityName;
import com.newscatcher.api.types.NotAuthorName;
import com.newscatcher.api.types.NotCountries;
import com.newscatcher.api.types.NotIabTags;
import com.newscatcher.api.types.NotIptcTags;
import com.newscatcher.api.types.NotLang;
import com.newscatcher.api.types.NotSources;
import com.newscatcher.api.types.NotTheme;
import com.newscatcher.api.types.OrgEntityName;
import com.newscatcher.api.types.ParentUrl;
import com.newscatcher.api.types.PerEntityName;
import com.newscatcher.api.types.PredefinedSources;
import com.newscatcher.api.types.Sources;
import com.newscatcher.api.types.Theme;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LatestHeadlinesPostRequest.Builder.class)
public final class LatestHeadlinesPostRequest {
    private final Optional<String> when;

    private final Optional<Boolean> byParseDate;

    private final Optional<Lang> lang;

    private final Optional<NotLang> notLang;

    private final Optional<Countries> countries;

    private final Optional<NotCountries> notCountries;

    private final Optional<PredefinedSources> predefinedSources;

    private final Optional<Sources> sources;

    private final Optional<NotSources> notSources;

    private final Optional<NotAuthorName> notAuthorName;

    private final Optional<Boolean> rankedOnly;

    private final Optional<Boolean> isHeadline;

    private final Optional<Boolean> isOpinion;

    private final Optional<Boolean> isPaidContent;

    private final Optional<ParentUrl> parentUrl;

    private final Optional<AllLinks> allLinks;

    private final Optional<AllDomainLinks> allDomainLinks;

    private final Optional<Integer> wordCountMin;

    private final Optional<Integer> wordCountMax;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Optional<Boolean> clusteringEnabled;

    private final Optional<ClusteringVariable> clusteringVariable;

    private final Optional<Float> clusteringThreshold;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<Theme> theme;

    private final Optional<NotTheme> notTheme;

    private final Optional<OrgEntityName> orgEntityName;

    private final Optional<PerEntityName> perEntityName;

    private final Optional<LocEntityName> locEntityName;

    private final Optional<MiscEntityName> miscEntityName;

    private final Optional<Float> titleSentimentMin;

    private final Optional<Float> titleSentimentMax;

    private final Optional<Float> contentSentimentMin;

    private final Optional<Float> contentSentimentMax;

    private final Optional<IptcTags> iptcTags;

    private final Optional<NotIptcTags> notIptcTags;

    private final Optional<IabTags> iabTags;

    private final Optional<NotIabTags> notIabTags;

    private final Optional<CustomTags> customTags;

    private final Map<String, Object> additionalProperties;

    private LatestHeadlinesPostRequest(
            Optional<String> when,
            Optional<Boolean> byParseDate,
            Optional<Lang> lang,
            Optional<NotLang> notLang,
            Optional<Countries> countries,
            Optional<NotCountries> notCountries,
            Optional<PredefinedSources> predefinedSources,
            Optional<Sources> sources,
            Optional<NotSources> notSources,
            Optional<NotAuthorName> notAuthorName,
            Optional<Boolean> rankedOnly,
            Optional<Boolean> isHeadline,
            Optional<Boolean> isOpinion,
            Optional<Boolean> isPaidContent,
            Optional<ParentUrl> parentUrl,
            Optional<AllLinks> allLinks,
            Optional<AllDomainLinks> allDomainLinks,
            Optional<Integer> wordCountMin,
            Optional<Integer> wordCountMax,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Optional<Boolean> clusteringEnabled,
            Optional<ClusteringVariable> clusteringVariable,
            Optional<Float> clusteringThreshold,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<Theme> theme,
            Optional<NotTheme> notTheme,
            Optional<OrgEntityName> orgEntityName,
            Optional<PerEntityName> perEntityName,
            Optional<LocEntityName> locEntityName,
            Optional<MiscEntityName> miscEntityName,
            Optional<Float> titleSentimentMin,
            Optional<Float> titleSentimentMax,
            Optional<Float> contentSentimentMin,
            Optional<Float> contentSentimentMax,
            Optional<IptcTags> iptcTags,
            Optional<NotIptcTags> notIptcTags,
            Optional<IabTags> iabTags,
            Optional<NotIabTags> notIabTags,
            Optional<CustomTags> customTags,
            Map<String, Object> additionalProperties) {
        this.when = when;
        this.byParseDate = byParseDate;
        this.lang = lang;
        this.notLang = notLang;
        this.countries = countries;
        this.notCountries = notCountries;
        this.predefinedSources = predefinedSources;
        this.sources = sources;
        this.notSources = notSources;
        this.notAuthorName = notAuthorName;
        this.rankedOnly = rankedOnly;
        this.isHeadline = isHeadline;
        this.isOpinion = isOpinion;
        this.isPaidContent = isPaidContent;
        this.parentUrl = parentUrl;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.wordCountMin = wordCountMin;
        this.wordCountMax = wordCountMax;
        this.page = page;
        this.pageSize = pageSize;
        this.clusteringEnabled = clusteringEnabled;
        this.clusteringVariable = clusteringVariable;
        this.clusteringThreshold = clusteringThreshold;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.orgEntityName = orgEntityName;
        this.perEntityName = perEntityName;
        this.locEntityName = locEntityName;
        this.miscEntityName = miscEntityName;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.iptcTags = iptcTags;
        this.notIptcTags = notIptcTags;
        this.iabTags = iabTags;
        this.notIabTags = notIabTags;
        this.customTags = customTags;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("when")
    public Optional<String> getWhen() {
        return when;
    }

    @JsonProperty("by_parse_date")
    public Optional<Boolean> getByParseDate() {
        return byParseDate;
    }

    @JsonProperty("lang")
    public Optional<Lang> getLang() {
        return lang;
    }

    @JsonProperty("not_lang")
    public Optional<NotLang> getNotLang() {
        return notLang;
    }

    @JsonProperty("countries")
    public Optional<Countries> getCountries() {
        return countries;
    }

    @JsonProperty("not_countries")
    public Optional<NotCountries> getNotCountries() {
        return notCountries;
    }

    @JsonProperty("predefined_sources")
    public Optional<PredefinedSources> getPredefinedSources() {
        return predefinedSources;
    }

    @JsonProperty("sources")
    public Optional<Sources> getSources() {
        return sources;
    }

    @JsonProperty("not_sources")
    public Optional<NotSources> getNotSources() {
        return notSources;
    }

    @JsonProperty("not_author_name")
    public Optional<NotAuthorName> getNotAuthorName() {
        return notAuthorName;
    }

    @JsonProperty("ranked_only")
    public Optional<Boolean> getRankedOnly() {
        return rankedOnly;
    }

    @JsonProperty("is_headline")
    public Optional<Boolean> getIsHeadline() {
        return isHeadline;
    }

    @JsonProperty("is_opinion")
    public Optional<Boolean> getIsOpinion() {
        return isOpinion;
    }

    @JsonProperty("is_paid_content")
    public Optional<Boolean> getIsPaidContent() {
        return isPaidContent;
    }

    @JsonProperty("parent_url")
    public Optional<ParentUrl> getParentUrl() {
        return parentUrl;
    }

    @JsonProperty("all_links")
    public Optional<AllLinks> getAllLinks() {
        return allLinks;
    }

    @JsonProperty("all_domain_links")
    public Optional<AllDomainLinks> getAllDomainLinks() {
        return allDomainLinks;
    }

    @JsonProperty("word_count_min")
    public Optional<Integer> getWordCountMin() {
        return wordCountMin;
    }

    @JsonProperty("word_count_max")
    public Optional<Integer> getWordCountMax() {
        return wordCountMax;
    }

    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("clustering_enabled")
    public Optional<Boolean> getClusteringEnabled() {
        return clusteringEnabled;
    }

    @JsonProperty("clustering_variable")
    public Optional<ClusteringVariable> getClusteringVariable() {
        return clusteringVariable;
    }

    @JsonProperty("clustering_threshold")
    public Optional<Float> getClusteringThreshold() {
        return clusteringThreshold;
    }

    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    @JsonProperty("theme")
    public Optional<Theme> getTheme() {
        return theme;
    }

    @JsonProperty("not_theme")
    public Optional<NotTheme> getNotTheme() {
        return notTheme;
    }

    @JsonProperty("ORG_entity_name")
    public Optional<OrgEntityName> getOrgEntityName() {
        return orgEntityName;
    }

    @JsonProperty("PER_entity_name")
    public Optional<PerEntityName> getPerEntityName() {
        return perEntityName;
    }

    @JsonProperty("LOC_entity_name")
    public Optional<LocEntityName> getLocEntityName() {
        return locEntityName;
    }

    @JsonProperty("MISC_entity_name")
    public Optional<MiscEntityName> getMiscEntityName() {
        return miscEntityName;
    }

    @JsonProperty("title_sentiment_min")
    public Optional<Float> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    @JsonProperty("title_sentiment_max")
    public Optional<Float> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    @JsonProperty("content_sentiment_min")
    public Optional<Float> getContentSentimentMin() {
        return contentSentimentMin;
    }

    @JsonProperty("content_sentiment_max")
    public Optional<Float> getContentSentimentMax() {
        return contentSentimentMax;
    }

    @JsonProperty("iptc_tags")
    public Optional<IptcTags> getIptcTags() {
        return iptcTags;
    }

    @JsonProperty("not_iptc_tags")
    public Optional<NotIptcTags> getNotIptcTags() {
        return notIptcTags;
    }

    @JsonProperty("iab_tags")
    public Optional<IabTags> getIabTags() {
        return iabTags;
    }

    @JsonProperty("not_iab_tags")
    public Optional<NotIabTags> getNotIabTags() {
        return notIabTags;
    }

    @JsonProperty("custom_tags")
    public Optional<CustomTags> getCustomTags() {
        return customTags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LatestHeadlinesPostRequest && equalTo((LatestHeadlinesPostRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LatestHeadlinesPostRequest other) {
        return when.equals(other.when)
                && byParseDate.equals(other.byParseDate)
                && lang.equals(other.lang)
                && notLang.equals(other.notLang)
                && countries.equals(other.countries)
                && notCountries.equals(other.notCountries)
                && predefinedSources.equals(other.predefinedSources)
                && sources.equals(other.sources)
                && notSources.equals(other.notSources)
                && notAuthorName.equals(other.notAuthorName)
                && rankedOnly.equals(other.rankedOnly)
                && isHeadline.equals(other.isHeadline)
                && isOpinion.equals(other.isOpinion)
                && isPaidContent.equals(other.isPaidContent)
                && parentUrl.equals(other.parentUrl)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && wordCountMin.equals(other.wordCountMin)
                && wordCountMax.equals(other.wordCountMax)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && clusteringEnabled.equals(other.clusteringEnabled)
                && clusteringVariable.equals(other.clusteringVariable)
                && clusteringThreshold.equals(other.clusteringThreshold)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && orgEntityName.equals(other.orgEntityName)
                && perEntityName.equals(other.perEntityName)
                && locEntityName.equals(other.locEntityName)
                && miscEntityName.equals(other.miscEntityName)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && iptcTags.equals(other.iptcTags)
                && notIptcTags.equals(other.notIptcTags)
                && iabTags.equals(other.iabTags)
                && notIabTags.equals(other.notIabTags)
                && customTags.equals(other.customTags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.when,
                this.byParseDate,
                this.lang,
                this.notLang,
                this.countries,
                this.notCountries,
                this.predefinedSources,
                this.sources,
                this.notSources,
                this.notAuthorName,
                this.rankedOnly,
                this.isHeadline,
                this.isOpinion,
                this.isPaidContent,
                this.parentUrl,
                this.allLinks,
                this.allDomainLinks,
                this.wordCountMin,
                this.wordCountMax,
                this.page,
                this.pageSize,
                this.clusteringEnabled,
                this.clusteringVariable,
                this.clusteringThreshold,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.orgEntityName,
                this.perEntityName,
                this.locEntityName,
                this.miscEntityName,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.iptcTags,
                this.notIptcTags,
                this.iabTags,
                this.notIabTags,
                this.customTags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> when = Optional.empty();

        private Optional<Boolean> byParseDate = Optional.empty();

        private Optional<Lang> lang = Optional.empty();

        private Optional<NotLang> notLang = Optional.empty();

        private Optional<Countries> countries = Optional.empty();

        private Optional<NotCountries> notCountries = Optional.empty();

        private Optional<PredefinedSources> predefinedSources = Optional.empty();

        private Optional<Sources> sources = Optional.empty();

        private Optional<NotSources> notSources = Optional.empty();

        private Optional<NotAuthorName> notAuthorName = Optional.empty();

        private Optional<Boolean> rankedOnly = Optional.empty();

        private Optional<Boolean> isHeadline = Optional.empty();

        private Optional<Boolean> isOpinion = Optional.empty();

        private Optional<Boolean> isPaidContent = Optional.empty();

        private Optional<ParentUrl> parentUrl = Optional.empty();

        private Optional<AllLinks> allLinks = Optional.empty();

        private Optional<AllDomainLinks> allDomainLinks = Optional.empty();

        private Optional<Integer> wordCountMin = Optional.empty();

        private Optional<Integer> wordCountMax = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Boolean> clusteringEnabled = Optional.empty();

        private Optional<ClusteringVariable> clusteringVariable = Optional.empty();

        private Optional<Float> clusteringThreshold = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<Theme> theme = Optional.empty();

        private Optional<NotTheme> notTheme = Optional.empty();

        private Optional<OrgEntityName> orgEntityName = Optional.empty();

        private Optional<PerEntityName> perEntityName = Optional.empty();

        private Optional<LocEntityName> locEntityName = Optional.empty();

        private Optional<MiscEntityName> miscEntityName = Optional.empty();

        private Optional<Float> titleSentimentMin = Optional.empty();

        private Optional<Float> titleSentimentMax = Optional.empty();

        private Optional<Float> contentSentimentMin = Optional.empty();

        private Optional<Float> contentSentimentMax = Optional.empty();

        private Optional<IptcTags> iptcTags = Optional.empty();

        private Optional<NotIptcTags> notIptcTags = Optional.empty();

        private Optional<IabTags> iabTags = Optional.empty();

        private Optional<NotIabTags> notIabTags = Optional.empty();

        private Optional<CustomTags> customTags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LatestHeadlinesPostRequest other) {
            when(other.getWhen());
            byParseDate(other.getByParseDate());
            lang(other.getLang());
            notLang(other.getNotLang());
            countries(other.getCountries());
            notCountries(other.getNotCountries());
            predefinedSources(other.getPredefinedSources());
            sources(other.getSources());
            notSources(other.getNotSources());
            notAuthorName(other.getNotAuthorName());
            rankedOnly(other.getRankedOnly());
            isHeadline(other.getIsHeadline());
            isOpinion(other.getIsOpinion());
            isPaidContent(other.getIsPaidContent());
            parentUrl(other.getParentUrl());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            wordCountMin(other.getWordCountMin());
            wordCountMax(other.getWordCountMax());
            page(other.getPage());
            pageSize(other.getPageSize());
            clusteringEnabled(other.getClusteringEnabled());
            clusteringVariable(other.getClusteringVariable());
            clusteringThreshold(other.getClusteringThreshold());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            orgEntityName(other.getOrgEntityName());
            perEntityName(other.getPerEntityName());
            locEntityName(other.getLocEntityName());
            miscEntityName(other.getMiscEntityName());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            iptcTags(other.getIptcTags());
            notIptcTags(other.getNotIptcTags());
            iabTags(other.getIabTags());
            notIabTags(other.getNotIabTags());
            customTags(other.getCustomTags());
            return this;
        }

        @JsonSetter(value = "when", nulls = Nulls.SKIP)
        public Builder when(Optional<String> when) {
            this.when = when;
            return this;
        }

        public Builder when(String when) {
            this.when = Optional.ofNullable(when);
            return this;
        }

        @JsonSetter(value = "by_parse_date", nulls = Nulls.SKIP)
        public Builder byParseDate(Optional<Boolean> byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }

        public Builder byParseDate(Boolean byParseDate) {
            this.byParseDate = Optional.ofNullable(byParseDate);
            return this;
        }

        @JsonSetter(value = "lang", nulls = Nulls.SKIP)
        public Builder lang(Optional<Lang> lang) {
            this.lang = lang;
            return this;
        }

        public Builder lang(Lang lang) {
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        @JsonSetter(value = "not_lang", nulls = Nulls.SKIP)
        public Builder notLang(Optional<NotLang> notLang) {
            this.notLang = notLang;
            return this;
        }

        public Builder notLang(NotLang notLang) {
            this.notLang = Optional.ofNullable(notLang);
            return this;
        }

        @JsonSetter(value = "countries", nulls = Nulls.SKIP)
        public Builder countries(Optional<Countries> countries) {
            this.countries = countries;
            return this;
        }

        public Builder countries(Countries countries) {
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        @JsonSetter(value = "not_countries", nulls = Nulls.SKIP)
        public Builder notCountries(Optional<NotCountries> notCountries) {
            this.notCountries = notCountries;
            return this;
        }

        public Builder notCountries(NotCountries notCountries) {
            this.notCountries = Optional.ofNullable(notCountries);
            return this;
        }

        @JsonSetter(value = "predefined_sources", nulls = Nulls.SKIP)
        public Builder predefinedSources(Optional<PredefinedSources> predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }

        public Builder predefinedSources(PredefinedSources predefinedSources) {
            this.predefinedSources = Optional.ofNullable(predefinedSources);
            return this;
        }

        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public Builder sources(Optional<Sources> sources) {
            this.sources = sources;
            return this;
        }

        public Builder sources(Sources sources) {
            this.sources = Optional.ofNullable(sources);
            return this;
        }

        @JsonSetter(value = "not_sources", nulls = Nulls.SKIP)
        public Builder notSources(Optional<NotSources> notSources) {
            this.notSources = notSources;
            return this;
        }

        public Builder notSources(NotSources notSources) {
            this.notSources = Optional.ofNullable(notSources);
            return this;
        }

        @JsonSetter(value = "not_author_name", nulls = Nulls.SKIP)
        public Builder notAuthorName(Optional<NotAuthorName> notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        public Builder notAuthorName(NotAuthorName notAuthorName) {
            this.notAuthorName = Optional.ofNullable(notAuthorName);
            return this;
        }

        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public Builder rankedOnly(Optional<Boolean> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        public Builder rankedOnly(Boolean rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public Builder isHeadline(Optional<Boolean> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        public Builder isHeadline(Boolean isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public Builder isOpinion(Optional<Boolean> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        public Builder isOpinion(Boolean isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        @JsonSetter(value = "is_paid_content", nulls = Nulls.SKIP)
        public Builder isPaidContent(Optional<Boolean> isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }

        public Builder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = Optional.ofNullable(isPaidContent);
            return this;
        }

        @JsonSetter(value = "parent_url", nulls = Nulls.SKIP)
        public Builder parentUrl(Optional<ParentUrl> parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }

        public Builder parentUrl(ParentUrl parentUrl) {
            this.parentUrl = Optional.ofNullable(parentUrl);
            return this;
        }

        @JsonSetter(value = "all_links", nulls = Nulls.SKIP)
        public Builder allLinks(Optional<AllLinks> allLinks) {
            this.allLinks = allLinks;
            return this;
        }

        public Builder allLinks(AllLinks allLinks) {
            this.allLinks = Optional.ofNullable(allLinks);
            return this;
        }

        @JsonSetter(value = "all_domain_links", nulls = Nulls.SKIP)
        public Builder allDomainLinks(Optional<AllDomainLinks> allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }

        public Builder allDomainLinks(AllDomainLinks allDomainLinks) {
            this.allDomainLinks = Optional.ofNullable(allDomainLinks);
            return this;
        }

        @JsonSetter(value = "word_count_min", nulls = Nulls.SKIP)
        public Builder wordCountMin(Optional<Integer> wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }

        public Builder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = Optional.ofNullable(wordCountMin);
            return this;
        }

        @JsonSetter(value = "word_count_max", nulls = Nulls.SKIP)
        public Builder wordCountMax(Optional<Integer> wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }

        public Builder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = Optional.ofNullable(wordCountMax);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "clustering_enabled", nulls = Nulls.SKIP)
        public Builder clusteringEnabled(Optional<Boolean> clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }

        public Builder clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = Optional.ofNullable(clusteringEnabled);
            return this;
        }

        @JsonSetter(value = "clustering_variable", nulls = Nulls.SKIP)
        public Builder clusteringVariable(Optional<ClusteringVariable> clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }

        public Builder clusteringVariable(ClusteringVariable clusteringVariable) {
            this.clusteringVariable = Optional.ofNullable(clusteringVariable);
            return this;
        }

        @JsonSetter(value = "clustering_threshold", nulls = Nulls.SKIP)
        public Builder clusteringThreshold(Optional<Float> clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }

        public Builder clusteringThreshold(Float clusteringThreshold) {
            this.clusteringThreshold = Optional.ofNullable(clusteringThreshold);
            return this;
        }

        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public Builder includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        public Builder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public Builder hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        public Builder hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public Builder theme(Optional<Theme> theme) {
            this.theme = theme;
            return this;
        }

        public Builder theme(Theme theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public Builder notTheme(Optional<NotTheme> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        public Builder notTheme(NotTheme notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        @JsonSetter(value = "ORG_entity_name", nulls = Nulls.SKIP)
        public Builder orgEntityName(Optional<OrgEntityName> orgEntityName) {
            this.orgEntityName = orgEntityName;
            return this;
        }

        public Builder orgEntityName(OrgEntityName orgEntityName) {
            this.orgEntityName = Optional.ofNullable(orgEntityName);
            return this;
        }

        @JsonSetter(value = "PER_entity_name", nulls = Nulls.SKIP)
        public Builder perEntityName(Optional<PerEntityName> perEntityName) {
            this.perEntityName = perEntityName;
            return this;
        }

        public Builder perEntityName(PerEntityName perEntityName) {
            this.perEntityName = Optional.ofNullable(perEntityName);
            return this;
        }

        @JsonSetter(value = "LOC_entity_name", nulls = Nulls.SKIP)
        public Builder locEntityName(Optional<LocEntityName> locEntityName) {
            this.locEntityName = locEntityName;
            return this;
        }

        public Builder locEntityName(LocEntityName locEntityName) {
            this.locEntityName = Optional.ofNullable(locEntityName);
            return this;
        }

        @JsonSetter(value = "MISC_entity_name", nulls = Nulls.SKIP)
        public Builder miscEntityName(Optional<MiscEntityName> miscEntityName) {
            this.miscEntityName = miscEntityName;
            return this;
        }

        public Builder miscEntityName(MiscEntityName miscEntityName) {
            this.miscEntityName = Optional.ofNullable(miscEntityName);
            return this;
        }

        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public Builder titleSentimentMin(Optional<Float> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        public Builder titleSentimentMin(Float titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public Builder titleSentimentMax(Optional<Float> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        public Builder titleSentimentMax(Float titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public Builder contentSentimentMin(Optional<Float> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        public Builder contentSentimentMin(Float contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public Builder contentSentimentMax(Optional<Float> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        public Builder contentSentimentMax(Float contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        @JsonSetter(value = "iptc_tags", nulls = Nulls.SKIP)
        public Builder iptcTags(Optional<IptcTags> iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }

        public Builder iptcTags(IptcTags iptcTags) {
            this.iptcTags = Optional.ofNullable(iptcTags);
            return this;
        }

        @JsonSetter(value = "not_iptc_tags", nulls = Nulls.SKIP)
        public Builder notIptcTags(Optional<NotIptcTags> notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }

        public Builder notIptcTags(NotIptcTags notIptcTags) {
            this.notIptcTags = Optional.ofNullable(notIptcTags);
            return this;
        }

        @JsonSetter(value = "iab_tags", nulls = Nulls.SKIP)
        public Builder iabTags(Optional<IabTags> iabTags) {
            this.iabTags = iabTags;
            return this;
        }

        public Builder iabTags(IabTags iabTags) {
            this.iabTags = Optional.ofNullable(iabTags);
            return this;
        }

        @JsonSetter(value = "not_iab_tags", nulls = Nulls.SKIP)
        public Builder notIabTags(Optional<NotIabTags> notIabTags) {
            this.notIabTags = notIabTags;
            return this;
        }

        public Builder notIabTags(NotIabTags notIabTags) {
            this.notIabTags = Optional.ofNullable(notIabTags);
            return this;
        }

        @JsonSetter(value = "custom_tags", nulls = Nulls.SKIP)
        public Builder customTags(Optional<CustomTags> customTags) {
            this.customTags = customTags;
            return this;
        }

        public Builder customTags(CustomTags customTags) {
            this.customTags = Optional.ofNullable(customTags);
            return this;
        }

        public LatestHeadlinesPostRequest build() {
            return new LatestHeadlinesPostRequest(
                    when,
                    byParseDate,
                    lang,
                    notLang,
                    countries,
                    notCountries,
                    predefinedSources,
                    sources,
                    notSources,
                    notAuthorName,
                    rankedOnly,
                    isHeadline,
                    isOpinion,
                    isPaidContent,
                    parentUrl,
                    allLinks,
                    allDomainLinks,
                    wordCountMin,
                    wordCountMax,
                    page,
                    pageSize,
                    clusteringEnabled,
                    clusteringVariable,
                    clusteringThreshold,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    orgEntityName,
                    perEntityName,
                    locEntityName,
                    miscEntityName,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    iptcTags,
                    notIptcTags,
                    iabTags,
                    notIabTags,
                    customTags,
                    additionalProperties);
        }
    }
}
