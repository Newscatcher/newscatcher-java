/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.latestheadlines.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesGetRequestClusteringVariable;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LatestHeadlinesGetRequest.Builder.class)
public final class LatestHeadlinesGetRequest {
    private final Optional<String> when;

    private final Optional<Boolean> byParseDate;

    private final Optional<String> lang;

    private final Optional<String> notLang;

    private final Optional<String> countries;

    private final Optional<String> notCountries;

    private final Optional<String> predefinedSources;

    private final Optional<String> sources;

    private final Optional<String> notSources;

    private final Optional<String> notAuthorName;

    private final Optional<Boolean> rankedOnly;

    private final Optional<Boolean> isHeadline;

    private final Optional<Boolean> isOpinion;

    private final Optional<Boolean> isPaidContent;

    private final Optional<String> parentUrl;

    private final Optional<String> allLinks;

    private final Optional<String> allDomainLinks;

    private final Optional<Integer> wordCountMin;

    private final Optional<Integer> wordCountMax;

    private final Optional<Integer> page;

    private final Optional<Integer> pageSize;

    private final Optional<Boolean> clusteringEnabled;

    private final Optional<LatestHeadlinesGetRequestClusteringVariable> clusteringVariable;

    private final Optional<Float> clusteringThreshold;

    private final Optional<Boolean> includeNlpData;

    private final Optional<Boolean> hasNlp;

    private final Optional<String> theme;

    private final Optional<String> notTheme;

    private final Optional<String> orgEntityName;

    private final Optional<String> perEntityName;

    private final Optional<String> locEntityName;

    private final Optional<String> miscEntityName;

    private final Optional<Float> titleSentimentMin;

    private final Optional<Float> titleSentimentMax;

    private final Optional<Float> contentSentimentMin;

    private final Optional<Float> contentSentimentMax;

    private final Optional<String> iptcTags;

    private final Optional<String> notIptcTags;

    private final Optional<String> iabTags;

    private final Optional<String> notIabTags;

    private final Optional<String> customTags;

    private final Map<String, Object> additionalProperties;

    private LatestHeadlinesGetRequest(
            Optional<String> when,
            Optional<Boolean> byParseDate,
            Optional<String> lang,
            Optional<String> notLang,
            Optional<String> countries,
            Optional<String> notCountries,
            Optional<String> predefinedSources,
            Optional<String> sources,
            Optional<String> notSources,
            Optional<String> notAuthorName,
            Optional<Boolean> rankedOnly,
            Optional<Boolean> isHeadline,
            Optional<Boolean> isOpinion,
            Optional<Boolean> isPaidContent,
            Optional<String> parentUrl,
            Optional<String> allLinks,
            Optional<String> allDomainLinks,
            Optional<Integer> wordCountMin,
            Optional<Integer> wordCountMax,
            Optional<Integer> page,
            Optional<Integer> pageSize,
            Optional<Boolean> clusteringEnabled,
            Optional<LatestHeadlinesGetRequestClusteringVariable> clusteringVariable,
            Optional<Float> clusteringThreshold,
            Optional<Boolean> includeNlpData,
            Optional<Boolean> hasNlp,
            Optional<String> theme,
            Optional<String> notTheme,
            Optional<String> orgEntityName,
            Optional<String> perEntityName,
            Optional<String> locEntityName,
            Optional<String> miscEntityName,
            Optional<Float> titleSentimentMin,
            Optional<Float> titleSentimentMax,
            Optional<Float> contentSentimentMin,
            Optional<Float> contentSentimentMax,
            Optional<String> iptcTags,
            Optional<String> notIptcTags,
            Optional<String> iabTags,
            Optional<String> notIabTags,
            Optional<String> customTags,
            Map<String, Object> additionalProperties) {
        this.when = when;
        this.byParseDate = byParseDate;
        this.lang = lang;
        this.notLang = notLang;
        this.countries = countries;
        this.notCountries = notCountries;
        this.predefinedSources = predefinedSources;
        this.sources = sources;
        this.notSources = notSources;
        this.notAuthorName = notAuthorName;
        this.rankedOnly = rankedOnly;
        this.isHeadline = isHeadline;
        this.isOpinion = isOpinion;
        this.isPaidContent = isPaidContent;
        this.parentUrl = parentUrl;
        this.allLinks = allLinks;
        this.allDomainLinks = allDomainLinks;
        this.wordCountMin = wordCountMin;
        this.wordCountMax = wordCountMax;
        this.page = page;
        this.pageSize = pageSize;
        this.clusteringEnabled = clusteringEnabled;
        this.clusteringVariable = clusteringVariable;
        this.clusteringThreshold = clusteringThreshold;
        this.includeNlpData = includeNlpData;
        this.hasNlp = hasNlp;
        this.theme = theme;
        this.notTheme = notTheme;
        this.orgEntityName = orgEntityName;
        this.perEntityName = perEntityName;
        this.locEntityName = locEntityName;
        this.miscEntityName = miscEntityName;
        this.titleSentimentMin = titleSentimentMin;
        this.titleSentimentMax = titleSentimentMax;
        this.contentSentimentMin = contentSentimentMin;
        this.contentSentimentMax = contentSentimentMax;
        this.iptcTags = iptcTags;
        this.notIptcTags = notIptcTags;
        this.iabTags = iabTags;
        this.notIabTags = notIabTags;
        this.customTags = customTags;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The time period for which you want to get the latest headlines.
     * <p>Format examples:</p>
     * <ul>
     * <li><code>7d</code>: Last seven days</li>
     * <li><code>30d</code>: Last 30 days</li>
     * <li><code>1h</code>: Last hour</li>
     * <li><code>24h</code>: Last 24 hours</li>
     * </ul>
     */
    @JsonProperty("when")
    public Optional<String> getWhen() {
        return when;
    }

    /**
     * @return If true, the <code>from_</code> and <code>to_</code> parameters use article parse dates instead of published dates. Additionally, the <code>parse_date</code> variable is added to the output for each article object.
     */
    @JsonProperty("by_parse_date")
    public Optional<Boolean> getByParseDate() {
        return byParseDate;
    }

    /**
     * @return The language(s) of the search. The only accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To select multiple languages, use a comma-separated string.
     * <p>Example: <code>&quot;en, es&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
     */
    @JsonProperty("lang")
    public Optional<String> getLang() {
        return lang;
    }

    /**
     * @return The language(s) to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_639-1">ISO 639-1</a> code. To exclude multiple languages, use a comma-separated string.
     * <p>Example: <code>&quot;fr, de&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#language-lang-and-not-lang">Enumerated parameters &gt; Language</a>.</p>
     */
    @JsonProperty("not_lang")
    public Optional<String> getNotLang() {
        return notLang;
    }

    /**
     * @return The countries where the news publisher is located. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To select multiple countries, use a comma-separated string.
     * <p>Example: <code>&quot;US, CA&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
     */
    @JsonProperty("countries")
    public Optional<String> getCountries() {
        return countries;
    }

    /**
     * @return The publisher location countries to exclude from the search. The accepted format is the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code. To exclude multiple countries, use a comma-separated string.
     * <p>Example:<code>&quot;US, CA&quot;</code></p>
     * <p>To learn more, see <a href="/docs/v3/api-reference/overview/enumerated-parameters#country-country-and-not-country">Enumerated parameters &gt; Country</a>.</p>
     */
    @JsonProperty("not_countries")
    public Optional<String> getNotCountries() {
        return notCountries;
    }

    /**
     * @return Predefined top news sources per country.
     * <p>Format: start with the word <code>top</code>, followed by the number of desired sources, and then the two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>. Multiple countries with the number of top sources can be specified as a comma-separated string.</p>
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;top 100 US&quot;</code></li>
     * <li><code>&quot;top 33 AT&quot;</code></li>
     * <li><code>&quot;top 50 US, top 20 GB&quot;</code></li>
     * <li><code>&quot;top 33 AT, top 50 IT&quot;</code></li>
     * </ul>
     */
    @JsonProperty("predefined_sources")
    public Optional<String> getPredefinedSources() {
        return predefinedSources;
    }

    /**
     * @return One or more news sources to narrow down the search. The format must be a domain URL. Subdomains, such as <code>finance.yahoo.com</code>, are also acceptable.To specify multiple sources, use a comma-separated string.
     * <p>Examples:</p>
     * <ul>
     * <li><code>&quot;nytimes.com&quot;</code></li>
     * <li><code>&quot;theguardian.com, finance.yahoo.com&quot;</code></li>
     * </ul>
     */
    @JsonProperty("sources")
    public Optional<String> getSources() {
        return sources;
    }

    /**
     * @return The news sources to exclude from the search. To exclude multiple sources, use a comma-separated string.
     * <p>Example: <code>&quot;cnn.com, wsj.com&quot;</code></p>
     */
    @JsonProperty("not_sources")
    public Optional<String> getNotSources() {
        return notSources;
    }

    /**
     * @return The list of author names to exclude from your search. To exclude articles by specific authors, use a comma-separated string.
     * <p>Example: <code>&quot;John Doe, Jane Doe&quot;</code></p>
     */
    @JsonProperty("not_author_name")
    public Optional<String> getNotAuthorName() {
        return notAuthorName;
    }

    /**
     * @return If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.
     */
    @JsonProperty("ranked_only")
    public Optional<Boolean> getRankedOnly() {
        return rankedOnly;
    }

    /**
     * @return If true, only returns articles that were posted on the home page of a given news domain.
     */
    @JsonProperty("is_headline")
    public Optional<Boolean> getIsHeadline() {
        return isHeadline;
    }

    /**
     * @return If true, returns only opinion pieces. If false, excludes opinion-based articles and returns news only.
     */
    @JsonProperty("is_opinion")
    public Optional<Boolean> getIsOpinion() {
        return isOpinion;
    }

    /**
     * @return If false, returns only articles that have publicly available complete content. Some publishers partially block content, so this setting ensures that only full articles are retrieved.
     */
    @JsonProperty("is_paid_content")
    public Optional<Boolean> getIsPaidContent() {
        return isPaidContent;
    }

    /**
     * @return The categorical URL(s) to filter your search. To filter your search by multiple categorical URLs, use a comma-separated string.
     * <p>Example: <code>&quot;wsj.com/politics, wsj.com/tech&quot;</code></p>
     */
    @JsonProperty("parent_url")
    public Optional<String> getParentUrl() {
        return parentUrl;
    }

    /**
     * @return The complete URL(s) mentioned in the article. For multiple URLs, use a comma-separated string.
     * <p>Example: <code>&quot;https://aiindex.stanford.edu/report, https://www.stateof.ai&quot;</code></p>
     * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
     */
    @JsonProperty("all_links")
    public Optional<String> getAllLinks() {
        return allLinks;
    }

    /**
     * @return The domain(s) mentioned in the article. For multiple domains, use a comma-separated string.
     * <p>Example: <code>&quot;who.int, nih.gov&quot;</code></p>
     * <p>For more details, see <a href="/docs/v3/documentation/how-to/search-by-url">Search by URL</a>.</p>
     */
    @JsonProperty("all_domain_links")
    public Optional<String> getAllDomainLinks() {
        return allDomainLinks;
    }

    /**
     * @return The minimum number of words an article must contain. To be used for avoiding articles with small content.
     */
    @JsonProperty("word_count_min")
    public Optional<Integer> getWordCountMin() {
        return wordCountMin;
    }

    /**
     * @return The maximum number of words an article can contain. To be used for avoiding articles with large content.
     */
    @JsonProperty("word_count_max")
    public Optional<Integer> getWordCountMax() {
        return wordCountMax;
    }

    /**
     * @return The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.
     * <p>For details, see <a href="https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets">How to paginate large datasets</a>.</p>
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The number of articles to return per page.
     */
    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Determines whether to group similar articles into clusters. If true, the API returns clustered results.
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
     */
    @JsonProperty("clustering_enabled")
    public Optional<Boolean> getClusteringEnabled() {
        return clusteringEnabled;
    }

    /**
     * @return Specifies which part of the article to use for determining similarity when clustering.
     * <p>Possible values are:</p>
     * <ul>
     * <li><code>content</code>: Uses the full article content (default).</li>
     * <li><code>title</code>: Uses only the article title.</li>
     * <li><code>summary</code>: Uses the article summary.</li>
     * </ul>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
     */
    @JsonProperty("clustering_variable")
    public Optional<LatestHeadlinesGetRequestClusteringVariable> getClusteringVariable() {
        return clusteringVariable;
    }

    /**
     * @return Sets the similarity threshold for grouping articles into clusters. A lower value creates more inclusive clusters, while a higher value requires greater similarity between articles.
     * <p>Examples:</p>
     * <ul>
     * <li><code>0.3</code>: Results in larger, more diverse clusters.</li>
     * <li><code>0.6</code>: Balances cluster size and article similarity (default).</li>
     * <li><code>0.9</code>: Creates smaller, tightly related clusters.</li>
     * </ul>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/clustering-news-articles">Clustering news articles</a>.</p>
     */
    @JsonProperty("clustering_threshold")
    public Optional<Float> getClusteringThreshold() {
        return clusteringThreshold;
    }

    /**
     * @return If true, includes an NLP layer with each article in the response. This layer provides enhanced information such as theme classification, article summary, sentiment analysis, tags, and named entity recognition.
     * <p>The NLP layer includes:</p>
     * <ul>
     * <li>Theme: General topic of the article.</li>
     * <li>Summary: A concise overview of the article content.</li>
     * <li>Sentiment: Separate scores for title and content (range: -1 to 1).</li>
     * <li>Named entities: Identified persons (PER), organizations (ORG), locations (LOC), and miscellaneous entities (MISC).</li>
     * <li>IPTC tags: Standardized news category tags.</li>
     * <li>IAB tags: Content categories for digital advertising.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>include_nlp_data</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("include_nlp_data")
    public Optional<Boolean> getIncludeNlpData() {
        return includeNlpData;
    }

    /**
     * @return If true, filters the results to include only articles with an NLP layer. This allows you to focus on articles that have been processed with advanced NLP techniques.
     * <p><strong>Note</strong>: The <code>has_nlp</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("has_nlp")
    public Optional<Boolean> getHasNlp() {
        return hasNlp;
    }

    /**
     * @return Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Finance, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     * <p>Available options: <code>Business</code>, <code>Economics</code>, <code>Entertainment</code>, <code>Finance</code>, <code>Health</code>, <code>Politics</code>, <code>Science</code>, <code>Sports</code>, <code>Tech</code>, <code>Crime</code>, <code>Financial Crime</code>, <code>Lifestyle</code>, <code>Automotive</code>, <code>Travel</code>, <code>Weather</code>, <code>General</code>.</p>
     */
    @JsonProperty("theme")
    public Optional<String> getTheme() {
        return theme;
    }

    /**
     * @return Inverse of the <code>theme</code> parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.
     * <p>Example: <code>&quot;Crime, Tech&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_theme</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("not_theme")
    public Optional<String> getNotTheme() {
        return notTheme;
    }

    /**
     * @return Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string.
     * <p>Example: <code>&quot;Apple, Microsoft&quot;</code></p>
     * <p><strong>Note</strong>: The <code>ORG_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("ORG_entity_name")
    public Optional<String> getOrgEntityName() {
        return orgEntityName;
    }

    /**
     * @return Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string.
     * <p>Example: <code>&quot;Elon Musk, Jeff Bezos&quot;</code></p>
     * <p><strong>Note</strong>: The <code>PER_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("PER_entity_name")
    public Optional<String> getPerEntityName() {
        return perEntityName;
    }

    /**
     * @return Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string.
     * <p>Example: <code>&quot;California, New York&quot;</code></p>
     * <p><strong>Note</strong>: The <code>LOC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("LOC_entity_name")
    public Optional<String> getLocEntityName() {
        return locEntityName;
    }

    /**
     * @return Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string.
     * <p>Example: <code>&quot;Bitcoin, Blockchain&quot;</code></p>
     * <p><strong>Note</strong>: The <code>MISC_entity_name</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/how-to/search-by-entity">Search by entity</a>.</p>
     */
    @JsonProperty("MISC_entity_name")
    public Optional<String> getMiscEntityName() {
        return miscEntityName;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_min")
    public Optional<Float> getTitleSentimentMin() {
        return titleSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their titles.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>title_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("title_sentiment_max")
    public Optional<Float> getTitleSentimentMax() {
        return titleSentimentMax;
    }

    /**
     * @return Filters articles based on the minimum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_min</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_min")
    public Optional<Float> getContentSentimentMin() {
        return contentSentimentMin;
    }

    /**
     * @return Filters articles based on the maximum sentiment score of their content.
     * <p>Range is <code>-1.0</code> to <code>1.0</code>, where:</p>
     * <ul>
     * <li>Negative values indicate negative sentiment.</li>
     * <li>Positive values indicate positive sentiment.</li>
     * <li>Values close to 0 indicate neutral sentiment.</li>
     * </ul>
     * <p><strong>Note</strong>: The <code>content_sentiment_max</code> parameter is only available if NLP is included in your subscription plan.</p>
     * <p>To learn more, see <a href="/docs/v3/documentation/guides-and-concepts/nlp-features">NLP features</a>.</p>
     */
    @JsonProperty("content_sentiment_max")
    public Optional<Float> getContentSentimentMax() {
        return contentSentimentMax;
    }

    /**
     * @return Filters articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags, use a comma-separated string of tag IDs.
     * <p>Example: <code>&quot;20000199, 20000209&quot;</code></p>
     * <p><strong>Note</strong>: The <code>iptc_tags</code> parameter is only available if tags are included in your subscription plan.</p>
     * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
     */
    @JsonProperty("iptc_tags")
    public Optional<String> getIptcTags() {
        return iptcTags;
    }

    /**
     * @return Inverse of the <code>iptc_tags</code> parameter. Excludes articles based on International Press Telecommunications Council (IPTC) media topic tags. To specify multiple IPTC tags to exclude, use a comma-separated string of tag IDs.
     * <p>Example: <code>&quot;20000205, 20000209&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_iptc_tags</code> parameter is only available if tags are included in your subscription plan.</p>
     * <p>To learn more, see <a href="https://www.iptc.org/std/NewsCodes/treeview/mediatopic/mediatopic-en-GB.html">IPTC Media Topic NewsCodes</a>.</p>
     */
    @JsonProperty("not_iptc_tags")
    public Optional<String> getNotIptcTags() {
        return notIptcTags;
    }

    /**
     * @return Filters articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories, use a comma-separated string.
     * <p>Example: <code>&quot;Business, Events&quot;</code></p>
     * <p><strong>Note</strong>: The <code>iab_tags</code> parameter is only available if tags are included in your subscription plan.</p>
     * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
     */
    @JsonProperty("iab_tags")
    public Optional<String> getIabTags() {
        return iabTags;
    }

    /**
     * @return Inverse of the <code>iab_tags</code> parameter. Excludes articles based on Interactive Advertising Bureau (IAB) content categories. These tags provide a standardized taxonomy for digital advertising content categorization. To specify multiple IAB categories to exclude, use a comma-separated string.
     * <p>Example: <code>&quot;Agriculture, Metals&quot;</code></p>
     * <p><strong>Note</strong>: The <code>not_iab_tags</code> parameter is only available if tags are included in your subscription plan.</p>
     * <p>To learn more, see the <a href="https://iabtechlab.com/standards/content-taxonomy/">IAB Content taxonomy</a>.</p>
     */
    @JsonProperty("not_iab_tags")
    public Optional<String> getNotIabTags() {
        return notIabTags;
    }

    /**
     * @return Filters articles based on provided taxonomy that is tailored to your specific needs and is accessible only with your API key. To specify tags, use the following pattern:
     * <ul>
     * <li><code>custom_tags.taxonomy=Tag1,Tag2,Tag3</code>, where <code>taxonomy</code> is the taxonomy name and <code>Tag1,Tag2,Tag3</code> is a comma-separated list of tags.</li>
     * </ul>
     * <p>Example: <code>custom_tags.industry=&quot;Manufacturing, Supply Chain, Logistics&quot;</code></p>
     * <p>To learn more, see the <a href="/docs/v3/documentation/guides-and-concepts/custom-tags">Custom tags</a>.</p>
     */
    @JsonProperty("custom_tags")
    public Optional<String> getCustomTags() {
        return customTags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LatestHeadlinesGetRequest && equalTo((LatestHeadlinesGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LatestHeadlinesGetRequest other) {
        return when.equals(other.when)
                && byParseDate.equals(other.byParseDate)
                && lang.equals(other.lang)
                && notLang.equals(other.notLang)
                && countries.equals(other.countries)
                && notCountries.equals(other.notCountries)
                && predefinedSources.equals(other.predefinedSources)
                && sources.equals(other.sources)
                && notSources.equals(other.notSources)
                && notAuthorName.equals(other.notAuthorName)
                && rankedOnly.equals(other.rankedOnly)
                && isHeadline.equals(other.isHeadline)
                && isOpinion.equals(other.isOpinion)
                && isPaidContent.equals(other.isPaidContent)
                && parentUrl.equals(other.parentUrl)
                && allLinks.equals(other.allLinks)
                && allDomainLinks.equals(other.allDomainLinks)
                && wordCountMin.equals(other.wordCountMin)
                && wordCountMax.equals(other.wordCountMax)
                && page.equals(other.page)
                && pageSize.equals(other.pageSize)
                && clusteringEnabled.equals(other.clusteringEnabled)
                && clusteringVariable.equals(other.clusteringVariable)
                && clusteringThreshold.equals(other.clusteringThreshold)
                && includeNlpData.equals(other.includeNlpData)
                && hasNlp.equals(other.hasNlp)
                && theme.equals(other.theme)
                && notTheme.equals(other.notTheme)
                && orgEntityName.equals(other.orgEntityName)
                && perEntityName.equals(other.perEntityName)
                && locEntityName.equals(other.locEntityName)
                && miscEntityName.equals(other.miscEntityName)
                && titleSentimentMin.equals(other.titleSentimentMin)
                && titleSentimentMax.equals(other.titleSentimentMax)
                && contentSentimentMin.equals(other.contentSentimentMin)
                && contentSentimentMax.equals(other.contentSentimentMax)
                && iptcTags.equals(other.iptcTags)
                && notIptcTags.equals(other.notIptcTags)
                && iabTags.equals(other.iabTags)
                && notIabTags.equals(other.notIabTags)
                && customTags.equals(other.customTags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.when,
                this.byParseDate,
                this.lang,
                this.notLang,
                this.countries,
                this.notCountries,
                this.predefinedSources,
                this.sources,
                this.notSources,
                this.notAuthorName,
                this.rankedOnly,
                this.isHeadline,
                this.isOpinion,
                this.isPaidContent,
                this.parentUrl,
                this.allLinks,
                this.allDomainLinks,
                this.wordCountMin,
                this.wordCountMax,
                this.page,
                this.pageSize,
                this.clusteringEnabled,
                this.clusteringVariable,
                this.clusteringThreshold,
                this.includeNlpData,
                this.hasNlp,
                this.theme,
                this.notTheme,
                this.orgEntityName,
                this.perEntityName,
                this.locEntityName,
                this.miscEntityName,
                this.titleSentimentMin,
                this.titleSentimentMax,
                this.contentSentimentMin,
                this.contentSentimentMax,
                this.iptcTags,
                this.notIptcTags,
                this.iabTags,
                this.notIabTags,
                this.customTags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> when = Optional.empty();

        private Optional<Boolean> byParseDate = Optional.empty();

        private Optional<String> lang = Optional.empty();

        private Optional<String> notLang = Optional.empty();

        private Optional<String> countries = Optional.empty();

        private Optional<String> notCountries = Optional.empty();

        private Optional<String> predefinedSources = Optional.empty();

        private Optional<String> sources = Optional.empty();

        private Optional<String> notSources = Optional.empty();

        private Optional<String> notAuthorName = Optional.empty();

        private Optional<Boolean> rankedOnly = Optional.empty();

        private Optional<Boolean> isHeadline = Optional.empty();

        private Optional<Boolean> isOpinion = Optional.empty();

        private Optional<Boolean> isPaidContent = Optional.empty();

        private Optional<String> parentUrl = Optional.empty();

        private Optional<String> allLinks = Optional.empty();

        private Optional<String> allDomainLinks = Optional.empty();

        private Optional<Integer> wordCountMin = Optional.empty();

        private Optional<Integer> wordCountMax = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Boolean> clusteringEnabled = Optional.empty();

        private Optional<LatestHeadlinesGetRequestClusteringVariable> clusteringVariable = Optional.empty();

        private Optional<Float> clusteringThreshold = Optional.empty();

        private Optional<Boolean> includeNlpData = Optional.empty();

        private Optional<Boolean> hasNlp = Optional.empty();

        private Optional<String> theme = Optional.empty();

        private Optional<String> notTheme = Optional.empty();

        private Optional<String> orgEntityName = Optional.empty();

        private Optional<String> perEntityName = Optional.empty();

        private Optional<String> locEntityName = Optional.empty();

        private Optional<String> miscEntityName = Optional.empty();

        private Optional<Float> titleSentimentMin = Optional.empty();

        private Optional<Float> titleSentimentMax = Optional.empty();

        private Optional<Float> contentSentimentMin = Optional.empty();

        private Optional<Float> contentSentimentMax = Optional.empty();

        private Optional<String> iptcTags = Optional.empty();

        private Optional<String> notIptcTags = Optional.empty();

        private Optional<String> iabTags = Optional.empty();

        private Optional<String> notIabTags = Optional.empty();

        private Optional<String> customTags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LatestHeadlinesGetRequest other) {
            when(other.getWhen());
            byParseDate(other.getByParseDate());
            lang(other.getLang());
            notLang(other.getNotLang());
            countries(other.getCountries());
            notCountries(other.getNotCountries());
            predefinedSources(other.getPredefinedSources());
            sources(other.getSources());
            notSources(other.getNotSources());
            notAuthorName(other.getNotAuthorName());
            rankedOnly(other.getRankedOnly());
            isHeadline(other.getIsHeadline());
            isOpinion(other.getIsOpinion());
            isPaidContent(other.getIsPaidContent());
            parentUrl(other.getParentUrl());
            allLinks(other.getAllLinks());
            allDomainLinks(other.getAllDomainLinks());
            wordCountMin(other.getWordCountMin());
            wordCountMax(other.getWordCountMax());
            page(other.getPage());
            pageSize(other.getPageSize());
            clusteringEnabled(other.getClusteringEnabled());
            clusteringVariable(other.getClusteringVariable());
            clusteringThreshold(other.getClusteringThreshold());
            includeNlpData(other.getIncludeNlpData());
            hasNlp(other.getHasNlp());
            theme(other.getTheme());
            notTheme(other.getNotTheme());
            orgEntityName(other.getOrgEntityName());
            perEntityName(other.getPerEntityName());
            locEntityName(other.getLocEntityName());
            miscEntityName(other.getMiscEntityName());
            titleSentimentMin(other.getTitleSentimentMin());
            titleSentimentMax(other.getTitleSentimentMax());
            contentSentimentMin(other.getContentSentimentMin());
            contentSentimentMax(other.getContentSentimentMax());
            iptcTags(other.getIptcTags());
            notIptcTags(other.getNotIptcTags());
            iabTags(other.getIabTags());
            notIabTags(other.getNotIabTags());
            customTags(other.getCustomTags());
            return this;
        }

        @JsonSetter(value = "when", nulls = Nulls.SKIP)
        public Builder when(Optional<String> when) {
            this.when = when;
            return this;
        }

        public Builder when(String when) {
            this.when = Optional.ofNullable(when);
            return this;
        }

        @JsonSetter(value = "by_parse_date", nulls = Nulls.SKIP)
        public Builder byParseDate(Optional<Boolean> byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }

        public Builder byParseDate(Boolean byParseDate) {
            this.byParseDate = Optional.ofNullable(byParseDate);
            return this;
        }

        @JsonSetter(value = "lang", nulls = Nulls.SKIP)
        public Builder lang(Optional<String> lang) {
            this.lang = lang;
            return this;
        }

        public Builder lang(String lang) {
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        @JsonSetter(value = "not_lang", nulls = Nulls.SKIP)
        public Builder notLang(Optional<String> notLang) {
            this.notLang = notLang;
            return this;
        }

        public Builder notLang(String notLang) {
            this.notLang = Optional.ofNullable(notLang);
            return this;
        }

        @JsonSetter(value = "countries", nulls = Nulls.SKIP)
        public Builder countries(Optional<String> countries) {
            this.countries = countries;
            return this;
        }

        public Builder countries(String countries) {
            this.countries = Optional.ofNullable(countries);
            return this;
        }

        @JsonSetter(value = "not_countries", nulls = Nulls.SKIP)
        public Builder notCountries(Optional<String> notCountries) {
            this.notCountries = notCountries;
            return this;
        }

        public Builder notCountries(String notCountries) {
            this.notCountries = Optional.ofNullable(notCountries);
            return this;
        }

        @JsonSetter(value = "predefined_sources", nulls = Nulls.SKIP)
        public Builder predefinedSources(Optional<String> predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }

        public Builder predefinedSources(String predefinedSources) {
            this.predefinedSources = Optional.ofNullable(predefinedSources);
            return this;
        }

        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public Builder sources(Optional<String> sources) {
            this.sources = sources;
            return this;
        }

        public Builder sources(String sources) {
            this.sources = Optional.ofNullable(sources);
            return this;
        }

        @JsonSetter(value = "not_sources", nulls = Nulls.SKIP)
        public Builder notSources(Optional<String> notSources) {
            this.notSources = notSources;
            return this;
        }

        public Builder notSources(String notSources) {
            this.notSources = Optional.ofNullable(notSources);
            return this;
        }

        @JsonSetter(value = "not_author_name", nulls = Nulls.SKIP)
        public Builder notAuthorName(Optional<String> notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }

        public Builder notAuthorName(String notAuthorName) {
            this.notAuthorName = Optional.ofNullable(notAuthorName);
            return this;
        }

        @JsonSetter(value = "ranked_only", nulls = Nulls.SKIP)
        public Builder rankedOnly(Optional<Boolean> rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }

        public Builder rankedOnly(Boolean rankedOnly) {
            this.rankedOnly = Optional.ofNullable(rankedOnly);
            return this;
        }

        @JsonSetter(value = "is_headline", nulls = Nulls.SKIP)
        public Builder isHeadline(Optional<Boolean> isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }

        public Builder isHeadline(Boolean isHeadline) {
            this.isHeadline = Optional.ofNullable(isHeadline);
            return this;
        }

        @JsonSetter(value = "is_opinion", nulls = Nulls.SKIP)
        public Builder isOpinion(Optional<Boolean> isOpinion) {
            this.isOpinion = isOpinion;
            return this;
        }

        public Builder isOpinion(Boolean isOpinion) {
            this.isOpinion = Optional.ofNullable(isOpinion);
            return this;
        }

        @JsonSetter(value = "is_paid_content", nulls = Nulls.SKIP)
        public Builder isPaidContent(Optional<Boolean> isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }

        public Builder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = Optional.ofNullable(isPaidContent);
            return this;
        }

        @JsonSetter(value = "parent_url", nulls = Nulls.SKIP)
        public Builder parentUrl(Optional<String> parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }

        public Builder parentUrl(String parentUrl) {
            this.parentUrl = Optional.ofNullable(parentUrl);
            return this;
        }

        @JsonSetter(value = "all_links", nulls = Nulls.SKIP)
        public Builder allLinks(Optional<String> allLinks) {
            this.allLinks = allLinks;
            return this;
        }

        public Builder allLinks(String allLinks) {
            this.allLinks = Optional.ofNullable(allLinks);
            return this;
        }

        @JsonSetter(value = "all_domain_links", nulls = Nulls.SKIP)
        public Builder allDomainLinks(Optional<String> allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }

        public Builder allDomainLinks(String allDomainLinks) {
            this.allDomainLinks = Optional.ofNullable(allDomainLinks);
            return this;
        }

        @JsonSetter(value = "word_count_min", nulls = Nulls.SKIP)
        public Builder wordCountMin(Optional<Integer> wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }

        public Builder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = Optional.ofNullable(wordCountMin);
            return this;
        }

        @JsonSetter(value = "word_count_max", nulls = Nulls.SKIP)
        public Builder wordCountMax(Optional<Integer> wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }

        public Builder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = Optional.ofNullable(wordCountMax);
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "clustering_enabled", nulls = Nulls.SKIP)
        public Builder clusteringEnabled(Optional<Boolean> clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }

        public Builder clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = Optional.ofNullable(clusteringEnabled);
            return this;
        }

        @JsonSetter(value = "clustering_variable", nulls = Nulls.SKIP)
        public Builder clusteringVariable(Optional<LatestHeadlinesGetRequestClusteringVariable> clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }

        public Builder clusteringVariable(LatestHeadlinesGetRequestClusteringVariable clusteringVariable) {
            this.clusteringVariable = Optional.ofNullable(clusteringVariable);
            return this;
        }

        @JsonSetter(value = "clustering_threshold", nulls = Nulls.SKIP)
        public Builder clusteringThreshold(Optional<Float> clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }

        public Builder clusteringThreshold(Float clusteringThreshold) {
            this.clusteringThreshold = Optional.ofNullable(clusteringThreshold);
            return this;
        }

        @JsonSetter(value = "include_nlp_data", nulls = Nulls.SKIP)
        public Builder includeNlpData(Optional<Boolean> includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }

        public Builder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = Optional.ofNullable(includeNlpData);
            return this;
        }

        @JsonSetter(value = "has_nlp", nulls = Nulls.SKIP)
        public Builder hasNlp(Optional<Boolean> hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }

        public Builder hasNlp(Boolean hasNlp) {
            this.hasNlp = Optional.ofNullable(hasNlp);
            return this;
        }

        @JsonSetter(value = "theme", nulls = Nulls.SKIP)
        public Builder theme(Optional<String> theme) {
            this.theme = theme;
            return this;
        }

        public Builder theme(String theme) {
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        @JsonSetter(value = "not_theme", nulls = Nulls.SKIP)
        public Builder notTheme(Optional<String> notTheme) {
            this.notTheme = notTheme;
            return this;
        }

        public Builder notTheme(String notTheme) {
            this.notTheme = Optional.ofNullable(notTheme);
            return this;
        }

        @JsonSetter(value = "ORG_entity_name", nulls = Nulls.SKIP)
        public Builder orgEntityName(Optional<String> orgEntityName) {
            this.orgEntityName = orgEntityName;
            return this;
        }

        public Builder orgEntityName(String orgEntityName) {
            this.orgEntityName = Optional.ofNullable(orgEntityName);
            return this;
        }

        @JsonSetter(value = "PER_entity_name", nulls = Nulls.SKIP)
        public Builder perEntityName(Optional<String> perEntityName) {
            this.perEntityName = perEntityName;
            return this;
        }

        public Builder perEntityName(String perEntityName) {
            this.perEntityName = Optional.ofNullable(perEntityName);
            return this;
        }

        @JsonSetter(value = "LOC_entity_name", nulls = Nulls.SKIP)
        public Builder locEntityName(Optional<String> locEntityName) {
            this.locEntityName = locEntityName;
            return this;
        }

        public Builder locEntityName(String locEntityName) {
            this.locEntityName = Optional.ofNullable(locEntityName);
            return this;
        }

        @JsonSetter(value = "MISC_entity_name", nulls = Nulls.SKIP)
        public Builder miscEntityName(Optional<String> miscEntityName) {
            this.miscEntityName = miscEntityName;
            return this;
        }

        public Builder miscEntityName(String miscEntityName) {
            this.miscEntityName = Optional.ofNullable(miscEntityName);
            return this;
        }

        @JsonSetter(value = "title_sentiment_min", nulls = Nulls.SKIP)
        public Builder titleSentimentMin(Optional<Float> titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }

        public Builder titleSentimentMin(Float titleSentimentMin) {
            this.titleSentimentMin = Optional.ofNullable(titleSentimentMin);
            return this;
        }

        @JsonSetter(value = "title_sentiment_max", nulls = Nulls.SKIP)
        public Builder titleSentimentMax(Optional<Float> titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }

        public Builder titleSentimentMax(Float titleSentimentMax) {
            this.titleSentimentMax = Optional.ofNullable(titleSentimentMax);
            return this;
        }

        @JsonSetter(value = "content_sentiment_min", nulls = Nulls.SKIP)
        public Builder contentSentimentMin(Optional<Float> contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }

        public Builder contentSentimentMin(Float contentSentimentMin) {
            this.contentSentimentMin = Optional.ofNullable(contentSentimentMin);
            return this;
        }

        @JsonSetter(value = "content_sentiment_max", nulls = Nulls.SKIP)
        public Builder contentSentimentMax(Optional<Float> contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }

        public Builder contentSentimentMax(Float contentSentimentMax) {
            this.contentSentimentMax = Optional.ofNullable(contentSentimentMax);
            return this;
        }

        @JsonSetter(value = "iptc_tags", nulls = Nulls.SKIP)
        public Builder iptcTags(Optional<String> iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }

        public Builder iptcTags(String iptcTags) {
            this.iptcTags = Optional.ofNullable(iptcTags);
            return this;
        }

        @JsonSetter(value = "not_iptc_tags", nulls = Nulls.SKIP)
        public Builder notIptcTags(Optional<String> notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }

        public Builder notIptcTags(String notIptcTags) {
            this.notIptcTags = Optional.ofNullable(notIptcTags);
            return this;
        }

        @JsonSetter(value = "iab_tags", nulls = Nulls.SKIP)
        public Builder iabTags(Optional<String> iabTags) {
            this.iabTags = iabTags;
            return this;
        }

        public Builder iabTags(String iabTags) {
            this.iabTags = Optional.ofNullable(iabTags);
            return this;
        }

        @JsonSetter(value = "not_iab_tags", nulls = Nulls.SKIP)
        public Builder notIabTags(Optional<String> notIabTags) {
            this.notIabTags = notIabTags;
            return this;
        }

        public Builder notIabTags(String notIabTags) {
            this.notIabTags = Optional.ofNullable(notIabTags);
            return this;
        }

        @JsonSetter(value = "custom_tags", nulls = Nulls.SKIP)
        public Builder customTags(Optional<String> customTags) {
            this.customTags = customTags;
            return this;
        }

        public Builder customTags(String customTags) {
            this.customTags = Optional.ofNullable(customTags);
            return this;
        }

        public LatestHeadlinesGetRequest build() {
            return new LatestHeadlinesGetRequest(
                    when,
                    byParseDate,
                    lang,
                    notLang,
                    countries,
                    notCountries,
                    predefinedSources,
                    sources,
                    notSources,
                    notAuthorName,
                    rankedOnly,
                    isHeadline,
                    isOpinion,
                    isPaidContent,
                    parentUrl,
                    allLinks,
                    allDomainLinks,
                    wordCountMin,
                    wordCountMax,
                    page,
                    pageSize,
                    clusteringEnabled,
                    clusteringVariable,
                    clusteringThreshold,
                    includeNlpData,
                    hasNlp,
                    theme,
                    notTheme,
                    orgEntityName,
                    perEntityName,
                    locEntityName,
                    miscEntityName,
                    titleSentimentMin,
                    titleSentimentMax,
                    contentSentimentMin,
                    contentSentimentMax,
                    iptcTags,
                    notIptcTags,
                    iabTags,
                    notIabTags,
                    customTags,
                    additionalProperties);
        }
    }
}
