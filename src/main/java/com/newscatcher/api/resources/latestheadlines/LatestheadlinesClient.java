/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.newscatcher.api.resources.latestheadlines;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.newscatcher.api.core.ClientOptions;
import com.newscatcher.api.core.MediaTypes;
import com.newscatcher.api.core.NewscatcherApiApiException;
import com.newscatcher.api.core.NewscatcherApiException;
import com.newscatcher.api.core.ObjectMappers;
import com.newscatcher.api.core.RequestOptions;
import com.newscatcher.api.errors.UnprocessableEntityError;
import com.newscatcher.api.resources.latestheadlines.requests.LatestHeadlinesGetRequest;
import com.newscatcher.api.resources.latestheadlines.requests.LatestHeadlinesRequest;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesGetResponse;
import com.newscatcher.api.resources.latestheadlines.types.LatestHeadlinesPostResponse;
import com.newscatcher.api.types.HttpValidationError;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class LatestheadlinesClient {
    protected final ClientOptions clientOptions;

    public LatestheadlinesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     */
    public LatestHeadlinesGetResponse get(LatestHeadlinesGetRequest request) {
        return get(request, null);
    }

    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     */
    public LatestHeadlinesGetResponse get(LatestHeadlinesGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/latest_headlines");
        if (request.getWhen().isPresent()) {
            httpUrl.addQueryParameter("when", request.getWhen().get());
        }
        if (request.getByParseDate().isPresent()) {
            httpUrl.addQueryParameter("by_parse_date", request.getByParseDate().get());
        }
        if (request.getSortBy().isPresent()) {
            httpUrl.addQueryParameter("sort_by", request.getSortBy().get());
        }
        httpUrl.addQueryParameter("lang", request.getLang());
        httpUrl.addQueryParameter("not_lang", request.getNotLang());
        httpUrl.addQueryParameter("countries", request.getCountries());
        httpUrl.addQueryParameter("not_countries", request.getNotCountries());
        httpUrl.addQueryParameter("sources", request.getSources());
        httpUrl.addQueryParameter("predefined_sources", request.getPredefinedSources());
        httpUrl.addQueryParameter("not_sources", request.getNotSources());
        httpUrl.addQueryParameter("not_author_name", request.getNotAuthorName());
        if (request.getRankedOnly().isPresent()) {
            httpUrl.addQueryParameter("ranked_only", request.getRankedOnly().get());
        }
        if (request.getIsHeadline().isPresent()) {
            httpUrl.addQueryParameter("is_headline", request.getIsHeadline().get());
        }
        if (request.getIsOpinion().isPresent()) {
            httpUrl.addQueryParameter("is_opinion", request.getIsOpinion().get());
        }
        if (request.getIsPaidContent().isPresent()) {
            httpUrl.addQueryParameter(
                    "is_paid_content", request.getIsPaidContent().get());
        }
        httpUrl.addQueryParameter("parent_url", request.getParentUrl());
        httpUrl.addQueryParameter("all_links", request.getAllLinks());
        httpUrl.addQueryParameter("all_domain_links", request.getAllDomainLinks());
        if (request.getWordCountMin().isPresent()) {
            httpUrl.addQueryParameter(
                    "word_count_min", request.getWordCountMin().get());
        }
        if (request.getWordCountMax().isPresent()) {
            httpUrl.addQueryParameter(
                    "word_count_max", request.getWordCountMax().get());
        }
        if (request.getPage().isPresent()) {
            httpUrl.addQueryParameter("page", request.getPage().get());
        }
        if (request.getPageSize().isPresent()) {
            httpUrl.addQueryParameter("page_size", request.getPageSize().get());
        }
        if (request.getClusteringVariable().isPresent()) {
            httpUrl.addQueryParameter(
                    "clustering_variable", request.getClusteringVariable().get());
        }
        if (request.getClusteringEnabled().isPresent()) {
            httpUrl.addQueryParameter(
                    "clustering_enabled", request.getClusteringEnabled().get());
        }
        if (request.getClusteringThreshold().isPresent()) {
            httpUrl.addQueryParameter(
                    "clustering_threshold",
                    request.getClusteringThreshold().get().toString());
        }
        if (request.getIncludeNlpData().isPresent()) {
            httpUrl.addQueryParameter(
                    "include_nlp_data", request.getIncludeNlpData().get().toString());
        }
        if (request.getHasNlp().isPresent()) {
            httpUrl.addQueryParameter("has_nlp", request.getHasNlp().get().toString());
        }
        if (request.getTheme().isPresent()) {
            httpUrl.addQueryParameter("theme", request.getTheme().get());
        }
        if (request.getNotTheme().isPresent()) {
            httpUrl.addQueryParameter("not_theme", request.getNotTheme().get());
        }
        if (request.getOrgEntityName().isPresent()) {
            httpUrl.addQueryParameter(
                    "ORG_entity_name", request.getOrgEntityName().get());
        }
        if (request.getPerEntityName().isPresent()) {
            httpUrl.addQueryParameter(
                    "PER_entity_name", request.getPerEntityName().get());
        }
        if (request.getLocEntityName().isPresent()) {
            httpUrl.addQueryParameter(
                    "LOC_entity_name", request.getLocEntityName().get());
        }
        if (request.getMiscEntityName().isPresent()) {
            httpUrl.addQueryParameter(
                    "MISC_entity_name", request.getMiscEntityName().get());
        }
        if (request.getTitleSentimentMin().isPresent()) {
            httpUrl.addQueryParameter(
                    "title_sentiment_min", request.getTitleSentimentMin().get().toString());
        }
        if (request.getTitleSentimentMax().isPresent()) {
            httpUrl.addQueryParameter(
                    "title_sentiment_max", request.getTitleSentimentMax().get().toString());
        }
        if (request.getContentSentimentMin().isPresent()) {
            httpUrl.addQueryParameter(
                    "content_sentiment_min",
                    request.getContentSentimentMin().get().toString());
        }
        if (request.getContentSentimentMax().isPresent()) {
            httpUrl.addQueryParameter(
                    "content_sentiment_max",
                    request.getContentSentimentMax().get().toString());
        }
        httpUrl.addQueryParameter("iptc_tags", request.getIptcTags());
        httpUrl.addQueryParameter("not_iptc_tags", request.getNotIptcTags());
        httpUrl.addQueryParameter("iab_tags", request.getIabTags());
        httpUrl.addQueryParameter("not_iab_tags", request.getNotIabTags());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), LatestHeadlinesGetResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new NewscatcherApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new NewscatcherApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     */
    public LatestHeadlinesPostResponse post() {
        return post(LatestHeadlinesRequest.builder().build());
    }

    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     */
    public LatestHeadlinesPostResponse post(LatestHeadlinesRequest request) {
        return post(request, null);
    }

    /**
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     */
    public LatestHeadlinesPostResponse post(LatestHeadlinesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/latest_headlines")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new NewscatcherApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), LatestHeadlinesPostResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new NewscatcherApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new NewscatcherApiException("Network error executing HTTP request", e);
        }
    }
}
